{
  "$schema": "./schema.json",
  "instructions": [
    {
      "mnemonic": "XCHG_0I",
      "since_version": 0,
      "doc": {
        "category": "stack_basic",
        "description": "Interchanges `s0` with `s[i]`, `1 <= i <= 15`.",
        "gas": "18",
        "fift": "s[i] XCHG0",
        "fift_examples": [],
        "opcode": "0i",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#0 i:(## 4) {1 <= i}",
        "prefix": "0",
        "operands_range_check": { "length": 4, "from": 1, "to": 15 },
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 1,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 43,
          "function_name": "exec_xchg0"
        }
      ]
    },
    {
      "mnemonic": "PUSH",
      "since_version": 0,
      "doc": {
        "category": "stack_basic",
        "description": "Pushes a copy of the old `s[i]` into the stack.",
        "gas": "18",
        "fift": "s[i] PUSH",
        "fift_examples": [],
        "opcode": "2i",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#2 i:uint4",
        "prefix": "2",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 109,
          "function_name": "exec_push"
        }
      ]
    },
    {
      "mnemonic": "LDU",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Loads an unsigned `cc+1`-bit integer `x` from _Slice_ `s`.",
        "gas": "26",
        "fift": "[cc+1] LDU",
        "fift_examples": [],
        "opcode": "D3cc",
        "stack": "s - x s'"
      },
      "bytecode": {
        "tlb": "#D3 cc:uint8",
        "prefix": "D3",
        "operands": [
          {
            "name": "c",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 971,
          "function_name": "exec_load_int_fixed"
        }
      ]
    },
    {
      "mnemonic": "PUSHINT_LONG",
      "since_version": 0,
      "doc": {
        "category": "const_int",
        "description": "Pushes integer `xxx`.\n_Details:_ 5-bit `0 <= l <= 30` determines the length `n=8l+19` of signed big-endian integer `xxx`.\nThe total length of this instruction is `l+4` bytes or `n+13=8l+32` bits.",
        "gas": "23",
        "fift": "[xxx] PUSHINT\n[xxx] INT",
        "fift_examples": [],
        "opcode": "82lxxx",
        "stack": "- xxx"
      },
      "bytecode": {
        "tlb": "#82 l:(## 5) xxx:(int (8 * l + 19))",
        "prefix": "82",
        "operands_range_check": { "length": 5, "from": 0, "to": 30 },
        "operands": [
          { "name": "x", "type": "pushint_long" }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 76,
          "function_name": "exec_push_int"
        }
      ]
    },
    {
      "mnemonic": "EQUAL",
      "since_version": 0,
      "doc": {
        "category": "compare_int",
        "description": "Returns `-1` if `x=y`, `0` otherwise.",
        "gas": "18",
        "fift": "EQUAL",
        "fift_examples": [],
        "opcode": "BA",
        "stack": "x y - x=y"
      },
      "bytecode": { "tlb": "#BA", "prefix": "BA", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 975,
          "function_name": "exec_cmp"
        }
      ]
    },
    {
      "mnemonic": "THROWIFNOT",
      "since_version": 0,
      "doc": {
        "category": "exceptions",
        "description": "For `0 <= n < 2^11`, an encoding of `[n] THROWIFNOT` for larger values of `n`.",
        "gas": "34/84",
        "fift": "[n] THROWIFNOT",
        "fift_examples": [],
        "opcode": "F2E4_n",
        "stack": "f - "
      },
      "bytecode": {
        "tlb": "#F2E4_ n:uint11",
        "prefix": "F2E4_",
        "operands": [
          {
            "name": "n",
            "type": "uint",
            "size": 11,
            "min_value": 0,
            "max_value": 2047,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 1130,
          "function_name": "exec_throw_fixed"
        }
      ]
    },
    {
      "mnemonic": "PUSHINT_16",
      "since_version": 0,
      "doc": {
        "category": "const_int",
        "description": "Pushes integer `xxxx`. `-2^15 <= xx < 2^15`.",
        "gas": "34",
        "fift": "[xxxx] PUSHINT\n[xxxx] INT",
        "fift_examples": [],
        "opcode": "81xxxx",
        "stack": "- xxxx"
      },
      "bytecode": {
        "tlb": "#81 xxxx:int16",
        "prefix": "81",
        "operands": [
          {
            "name": "x",
            "type": "int",
            "size": 16,
            "min_value": -32768,
            "max_value": 32767,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 61,
          "function_name": "exec_push_smallint"
        }
      ]
    },
    {
      "mnemonic": "POP",
      "since_version": 0,
      "doc": {
        "category": "stack_basic",
        "description": "Pops the old `s0` value into the old `s[i]`.",
        "gas": "18",
        "fift": "s[i] POP",
        "fift_examples": [],
        "opcode": "3i",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#3 i:uint4",
        "prefix": "3",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 143,
          "function_name": "exec_pop"
        }
      ]
    },
    {
      "mnemonic": "PUSHCONT_SHORT",
      "since_version": 0,
      "doc": {
        "category": "const_data",
        "description": "Pushes a continuation made from `builder`.\n_Details:_ Pushes an `x`-byte continuation for `0 <= x <= 15`.",
        "gas": "18",
        "fift": "[builder] PUSHCONT\n[builder] CONT",
        "fift_examples": [
          { "fift": "<{ code }> PUSHCONT <{ code }> CONT CONT:<{ code }>", "description": "Pushes a continuation with code `code`. Note that the assembler can replace `PUSHCONT` with `PUSHREFCONT` in certain situations (e.g. if there's not enough space in the current continuation)." }
        ],
        "opcode": "9xccc",
        "stack": "- c"
      },
      "bytecode": {
        "tlb": "#9 x:(## 4) ssss:((8 * x) * Bit)",
        "prefix": "9",
        "operands": [
          {
            "name": "s",
            "type": "subslice",
            "bits_length_var_size": 4,
            "bits_padding": 0,
            "completion_tag": false,
            "max_bits": 120,
            "min_bits": 0,
            "max_refs": 0,
            "min_refs": 0,
            "display_hints": [
              { "type": "continuation" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Continuation"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 204,
          "function_name": "exec_push_cont_simple"
        }
      ]
    },
    {
      "mnemonic": "STU",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Stores an unsigned `cc+1`-bit integer `x` into _Builder_ `b`. In all other respects it is similar to `STI`.",
        "gas": "26",
        "fift": "[cc+1] STU",
        "fift_examples": [],
        "opcode": "CBcc",
        "stack": "x b - b'"
      },
      "bytecode": {
        "tlb": "#CB cc:uint8",
        "prefix": "CB",
        "operands": [
          {
            "name": "c",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 407,
          "function_name": "exec_store_int"
        }
      ]
    },
    {
      "mnemonic": "PUSHINT_4",
      "since_version": 0,
      "doc": {
        "category": "const_int",
        "description": "Pushes integer `x` into the stack. `-5 <= x <= 10`.\nHere `i` equals four lower-order bits of `x` (`i=x mod 16`).",
        "gas": "18",
        "fift": "[x] PUSHINT\n[x] INT",
        "fift_examples": [],
        "opcode": "7i",
        "stack": "- x"
      },
      "bytecode": {
        "tlb": "#7 i:uint4",
        "prefix": "7",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "pushint4" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 31,
          "function_name": "exec_push_tinyint4"
        }
      ]
    },
    {
      "mnemonic": "IFJMP",
      "since_version": 0,
      "doc": {
        "category": "cont_conditional",
        "description": "Jumps to `c` (similarly to `JMPX`), but only if `f` is non-zero.",
        "gas": "18",
        "fift": "IFJMP",
        "fift_examples": [
          { "fift": "IFJMP:<{ code }>", "description": "Equivalent to `<{ code }> CONT` `IFJMP`." }
        ],
        "opcode": "E0",
        "stack": "f c - "
      },
      "bytecode": { "tlb": "#E0", "prefix": "E0", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Continuation"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": {
        "branches": [
          { "type": "variable", "var_name": "c" }
        ],
        "nobranch": true
      },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 347,
          "function_name": "exec_if_jmp"
        }
      ]
    },
    {
      "mnemonic": "CTOS",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Converts a _Cell_ into a _Slice_. Notice that `c` must be either an ordinary cell, or an exotic cell which is automatically _loaded_ to yield an ordinary cell `c'`, converted into a _Slice_ afterwards.",
        "gas": "118/43",
        "fift": "CTOS",
        "fift_examples": [],
        "opcode": "D0",
        "stack": "c - s"
      },
      "bytecode": { "tlb": "#D0", "prefix": "D0", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 873,
          "function_name": "exec_cell_to_slice"
        }
      ]
    },
    {
      "mnemonic": "LDMSGADDR",
      "since_version": 0,
      "doc": {
        "category": "app_addr",
        "description": "Loads from _Slice_ `s` the only prefix that is a valid `MsgAddress`, and returns both this prefix `s'` and the remainder `s''` of `s` as slices.",
        "gas": "26",
        "fift": "LDMSGADDR",
        "fift_examples": [],
        "opcode": "FA40",
        "stack": "s - s' s''"
      },
      "bytecode": { "tlb": "#FA40", "prefix": "FA40", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "s3",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "ldmsgaddr"
        }
      ]
    },
    {
      "mnemonic": "NEWC",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Creates a new empty _Builder_.",
        "gas": "18",
        "fift": "NEWC",
        "fift_examples": [],
        "opcode": "C8",
        "stack": "- b"
      },
      "bytecode": { "tlb": "#C8", "prefix": "C8", "operands": [] },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 334,
          "function_name": "exec_new_builder"
        }
      ]
    },
    {
      "mnemonic": "XCHG_1I",
      "since_version": 0,
      "doc": {
        "category": "stack_basic",
        "description": "Interchanges `s1` with `s[i]`, `2 <= i <= 15`.",
        "gas": "18",
        "fift": "s1 s[i] XCHG",
        "fift_examples": [],
        "opcode": "1i",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#1 i:(## 4) {2 <= i}",
        "prefix": "1",
        "operands_range_check": { "length": 4, "from": 2, "to": 15 },
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 2,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 83,
          "function_name": "exec_xchg1"
        }
      ]
    },
    {
      "mnemonic": "ENDC",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Converts a _Builder_ into an ordinary _Cell_.",
        "gas": "518",
        "fift": "ENDC",
        "fift_examples": [],
        "opcode": "C9",
        "stack": "b - c"
      },
      "bytecode": { "tlb": "#C9", "prefix": "C9", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 341,
          "function_name": "exec_builder_to_cell"
        }
      ]
    },
    {
      "mnemonic": "CALLREF",
      "since_version": 0,
      "doc": {
        "category": "cont_basic",
        "description": "Equivalent to `PUSHREFCONT` `CALLX`.",
        "gas": "126/51",
        "fift": "[ref] CALLREF",
        "fift_examples": [],
        "opcode": "DB3C",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#DB3C c:^Cell",
        "prefix": "DB3C",
        "operands": [
          {
            "name": "c",
            "type": "ref",
            "display_hints": [
              { "type": "continuation" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": {
        "branches": [
          {
            "type": "variable",
            "var_name": "c",
            "save": {
              "c0": {
                "type": "cc",
                "save": {
                  "c0": { "type": "register", "index": 0 }
                }
              }
            }
          }
        ],
        "nobranch": false
      },
      "implementation": [
        {
          "file": "<manual>",
          "path": "<manual>",
          "line": 0,
          "function_name": "exec_do_with_ref"
        }
      ]
    },
    {
      "mnemonic": "GETGLOB",
      "since_version": 0,
      "doc": {
        "category": "app_global",
        "description": "Returns the `k`-th global variable for `1 <= k <= 31`.\nEquivalent to `c7 PUSHCTR` `[k] INDEXQ`.",
        "gas": "26",
        "fift": "[k] GETGLOB",
        "fift_examples": [],
        "opcode": "F85_k",
        "stack": " - x"
      },
      "bytecode": {
        "tlb": "#F85_ k:(## 5) {1 <= k}",
        "prefix": "F85_",
        "operands_range_check": { "length": 5, "from": 1, "to": 31 },
        "operands": [
          {
            "name": "k",
            "type": "uint",
            "size": 5,
            "min_value": 1,
            "max_value": 31,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [],
          "registers": [
            { "type": "constant", "index": 7 }
          ]
        },
        "outputs": {
          "stack": [
            { "type": "simple", "name": "x" }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "get_global"
        }
      ]
    },
    {
      "mnemonic": "POPCTR",
      "since_version": 0,
      "doc": {
        "category": "cont_registers",
        "description": "Pops a value `x` from the stack and stores it into control register `c(i)`, if supported in the current codepage. Notice that if a control register accepts only values of a specific type, a type-checking exception may occur.",
        "gas": "26",
        "fift": "c[i] POPCTR\nc[i] POP",
        "fift_examples": [],
        "opcode": "ED5i",
        "stack": "x - "
      },
      "bytecode": {
        "tlb": "#ED5 i:uint4",
        "prefix": "ED5",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "register" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            { "type": "simple", "name": "x" }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": [
            { "type": "variable", "var_name": "i" }
          ]
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 794,
          "function_name": "exec_pop_ctr"
        }
      ]
    },
    {
      "mnemonic": "STSLICER",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Equivalent to `SWAP` `STSLICE`.",
        "gas": "26",
        "fift": "STSLICER",
        "fift_examples": [],
        "opcode": "CF16",
        "stack": "b s - b'"
      },
      "bytecode": { "tlb": "#CF16", "prefix": "CF16", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            },
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 530,
          "function_name": "exec_store_slice_rev"
        }
      ]
    },
    {
      "mnemonic": "GETPARAM",
      "since_version": 0,
      "doc": {
        "category": "app_config",
        "description": "Returns the `i`-th parameter from the _Tuple_ provided at `c7` for `0 <= i <= 15`. Equivalent to `c7 PUSHCTR` `FIRST` `[i] INDEX`.\nIf one of these internal operations fails, throws an appropriate type checking or range checking exception.",
        "gas": "26",
        "fift": "[i] GETPARAM",
        "fift_examples": [],
        "opcode": "F82i",
        "stack": " - x"
      },
      "bytecode": {
        "tlb": "#F82 i:uint4",
        "prefix": "F82",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [],
          "registers": [
            { "type": "constant", "index": 7 }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "get_var_param"
        }
      ]
    },
    {
      "mnemonic": "SETGLOB",
      "since_version": 0,
      "doc": {
        "category": "app_global",
        "description": "Assigns `x` to the `k`-th global variable for `1 <= k <= 31`.\nEquivalent to `c7 PUSHCTR` `SWAP` `k SETINDEXQ` `c7 POPCTR`.",
        "gas": "26+|c7'|",
        "fift": "[k] SETGLOB",
        "fift_examples": [],
        "opcode": "F87_k",
        "stack": "x - "
      },
      "bytecode": {
        "tlb": "#F87_ k:(## 5) {1 <= k}",
        "prefix": "F87_",
        "operands_range_check": { "length": 5, "from": 1, "to": 31 },
        "operands": [
          {
            "name": "k",
            "type": "uint",
            "size": 5,
            "min_value": 1,
            "max_value": 31,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            { "type": "simple", "name": "x" }
          ],
          "registers": [
            { "type": "constant", "index": 7 }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            { "type": "constant", "index": 7 }
          ]
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "set_global"
        }
      ]
    },
    {
      "mnemonic": "XCHG_0I_LONG",
      "since_version": 0,
      "doc": {
        "category": "stack_basic",
        "description": "Interchanges `s0` with `s[ii]`, `0 <= ii <= 255`.",
        "gas": "26",
        "fift": "s0 [ii] s() XCHG",
        "fift_examples": [],
        "opcode": "11ii",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#11 ii:uint8",
        "prefix": "11",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "stack" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 52,
          "function_name": "exec_xchg0_l"
        }
      ]
    },
    {
      "mnemonic": "LDREF",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Loads a cell reference `c` from `s`.",
        "gas": "18",
        "fift": "LDREF",
        "fift_examples": [],
        "opcode": "D4",
        "stack": "s - c s'"
      },
      "bytecode": { "tlb": "#D4", "prefix": "D4", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell"
              ]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1003,
          "function_name": "exec_load_ref"
        }
      ]
    },
    {
      "mnemonic": "THROWIFNOT_SHORT",
      "since_version": 0,
      "doc": {
        "category": "exceptions",
        "description": "Throws exception `0 <= n <= 63` with parameter zero only if integer `f=0`.",
        "gas": "26/76",
        "fift": "[n] THROWIFNOT",
        "fift_examples": [],
        "opcode": "F2A_n",
        "stack": "f - "
      },
      "bytecode": {
        "tlb": "#F2A_ n:uint6",
        "prefix": "F2A_",
        "operands": [
          {
            "name": "n",
            "type": "uint",
            "size": 6,
            "min_value": 0,
            "max_value": 63,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 1130,
          "function_name": "exec_throw_fixed"
        }
      ]
    },
    {
      "mnemonic": "ROTREV",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `2 1 BLKSWAP` or to `s2 s2 XCHG2`.",
        "gas": "18",
        "fift": "ROTREV\n-ROT",
        "fift_examples": [],
        "opcode": "59",
        "stack": "a b c - c a b"
      },
      "bytecode": { "tlb": "#59", "prefix": "59", "operands": [] },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 317,
          "function_name": "exec_rotrev"
        }
      ]
    },
    {
      "mnemonic": "INC",
      "since_version": 0,
      "doc": {
        "category": "arithm_basic",
        "description": "Equivalent to `1 ADDCONST`.",
        "gas": "18",
        "fift": "INC",
        "fift_examples": [],
        "opcode": "A4",
        "stack": "x - x+1"
      },
      "bytecode": { "tlb": "#A4", "prefix": "A4", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 197,
          "function_name": "exec_inc"
        }
      ]
    },
    {
      "mnemonic": "THROWIF_SHORT",
      "since_version": 0,
      "doc": {
        "category": "exceptions",
        "description": "Throws exception `0 <= n <= 63` with  parameter zero only if integer `f!=0`.",
        "gas": "26/76",
        "fift": "[n] THROWIF",
        "fift_examples": [],
        "opcode": "F26_n",
        "stack": "f - "
      },
      "bytecode": {
        "tlb": "#F26_ n:uint6",
        "prefix": "F26_",
        "operands": [
          {
            "name": "n",
            "type": "uint",
            "size": 6,
            "min_value": 0,
            "max_value": 63,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 1130,
          "function_name": "exec_throw_fixed"
        }
      ]
    },
    {
      "mnemonic": "HASHSU",
      "since_version": 0,
      "doc": {
        "category": "app_crypto",
        "description": "Computes the hash of a _Slice_ `s` and returns it as a 256-bit unsigned integer `x`. The result is the same as if an ordinary cell containing only data and references from `s` had been created and its hash computed by `HASHCU`.",
        "gas": "526",
        "fift": "HASHSU",
        "fift_examples": [],
        "opcode": "F901",
        "stack": "s - x"
      },
      "bytecode": { "tlb": "#F901", "prefix": "F901", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "compute_hash_su"
        }
      ]
    },
    {
      "mnemonic": "GEQ",
      "since_version": 0,
      "doc": {
        "category": "compare_int",
        "description": "Equivalent to `LESS` `NOT`.",
        "gas": "18",
        "fift": "GEQ",
        "fift_examples": [],
        "opcode": "BE",
        "stack": "x y - x>=y"
      },
      "bytecode": { "tlb": "#BE", "prefix": "BE", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 975,
          "function_name": "exec_cmp"
        }
      ]
    },
    {
      "mnemonic": "LDSLICEX",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Loads the first `0 <= l <= 1023` bits from _Slice_ `s` into a separate _Slice_ `s''`, returning the remainder of `s` as `s'`.",
        "gas": "26",
        "fift": "LDSLICEX",
        "fift_examples": [],
        "opcode": "D718",
        "stack": "s l - s'' s'"
      },
      "bytecode": { "tlb": "#D718", "prefix": "D718", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s3",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1127,
          "function_name": "exec_load_slice"
        }
      ]
    },
    {
      "mnemonic": "ACCEPT",
      "since_version": 0,
      "doc": {
        "category": "app_gas",
        "description": "Sets current gas limit `g_l` to its maximal allowed value `g_m`, and resets the gas credit `g_c` to zero, decreasing the value of `g_r` by `g_c` in the process.\nIn other words, the current smart contract agrees to buy some gas to finish the current transaction. This action is required to process external messages, which bring no value (hence no gas) with themselves.",
        "gas": "26",
        "fift": "ACCEPT",
        "fift_examples": [],
        "opcode": "F800",
        "stack": "-"
      },
      "bytecode": { "tlb": "#F800", "prefix": "F800", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [],
          "registers": [
            { "type": "special", "name": "gas" }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            { "type": "special", "name": "gas" }
          ]
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "accept"
        }
      ]
    },
    {
      "mnemonic": "CHKSIGNU",
      "since_version": 0,
      "doc": {
        "category": "app_crypto",
        "description": "Checks the Ed25519-signature `s` of a hash `h` (a 256-bit unsigned integer, usually computed as the hash of some data) using public key `k` (also represented by a 256-bit unsigned integer).\nThe signature `s` must be a _Slice_ containing at least 512 data bits; only the first 512 bits are used. The result is `-1` if the signature is valid, `0` otherwise.\nNotice that `CHKSIGNU` is equivalent to `ROT` `NEWC` `256 STU` `ENDC` `ROTREV` `CHKSIGNS`, i.e., to `CHKSIGNS` with the first argument `d` set to 256-bit _Slice_ containing `h`. Therefore, if `h` is computed as the hash of some data, these data are hashed _twice_, the second hashing occurring inside `CHKSIGNS`.",
        "gas": "26",
        "fift": "CHKSIGNU",
        "fift_examples": [],
        "opcode": "F910",
        "stack": "h s k - ?"
      },
      "bytecode": { "tlb": "#F910", "prefix": "F910", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "h",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "chksignu"
        }
      ]
    },
    {
      "mnemonic": "XCHG2",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `s1 s[i] XCHG` `s[j] XCHG0`.",
        "gas": "26",
        "fift": "s[i] s[j] XCHG2",
        "fift_examples": [],
        "opcode": "50ij",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#50 i:uint4 j:uint4",
        "prefix": "50",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "j",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 163,
          "function_name": "exec_xchg2"
        }
      ]
    },
    {
      "mnemonic": "PLDREFIDX",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Returns the `n`-th cell reference of _Slice_ `s`, where `0 <= n <= 3`.",
        "gas": "26",
        "fift": "[n] PLDREFIDX",
        "fift_examples": [],
        "opcode": "D74E_n",
        "stack": "s - c"
      },
      "bytecode": {
        "tlb": "#D74E_ n:uint2",
        "prefix": "D74E_",
        "operands": [
          {
            "name": "n",
            "type": "uint",
            "size": 2,
            "min_value": 0,
            "max_value": 3,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 978,
          "function_name": "exec_preload_ref_fixed"
        }
      ]
    },
    {
      "mnemonic": "SETCP",
      "since_version": 0,
      "doc": {
        "category": "codepage",
        "description": "Selects TVM codepage `0 <= nn < 240`. If the codepage is not supported, throws an invalid opcode exception.",
        "gas": "26",
        "fift": "[nn] SETCP",
        "fift_examples": [],
        "opcode": "FFnn",
        "stack": "-"
      },
      "bytecode": {
        "tlb": "#FF nn:(#<= 239)",
        "prefix": "FF",
        "operands_range_check": { "length": 8, "from": 0, "to": 239 },
        "operands": [
          {
            "name": "n",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 239,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 0,
          "function_name": "exec_set_cp"
        }
      ]
    },
    {
      "mnemonic": "IFNOTRET",
      "since_version": 0,
      "doc": {
        "category": "cont_conditional",
        "description": "Performs a `RET`, but only if integer `f` is zero.",
        "gas": "18",
        "fift": "IFNOTRET\nIF:",
        "fift_examples": [],
        "opcode": "DD",
        "stack": "f - "
      },
      "bytecode": { "tlb": "#DD", "prefix": "DD", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": {
        "branches": [
          { "type": "register", "index": 0 }
        ],
        "nobranch": true
      },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 377,
          "function_name": "exec_ifnotret"
        }
      ]
    },
    {
      "mnemonic": "LDGRAMS",
      "since_version": 0,
      "doc": {
        "category": "app_currency",
        "description": "Loads (deserializes) a `Gram` or `VarUInteger 16` amount from _Slice_ `s`, and returns the amount as _Integer_ `x` along with the remainder `s'` of `s`. The expected serialization of `x` consists of a 4-bit unsigned big-endian integer `l`, followed by an `8l`-bit unsigned big-endian representation of `x`.\nThe net effect is approximately equivalent to `4 LDU` `SWAP` `3 LSHIFT#` `LDUX`.",
        "gas": "26",
        "fift": "LDGRAMS\nLDVARUINT16",
        "fift_examples": [],
        "opcode": "FA00",
        "stack": "s - x s'"
      },
      "bytecode": { "tlb": "#FA00", "prefix": "FA00", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "ldgrams"
        }
      ]
    },
    {
      "mnemonic": "PUSHCTR",
      "since_version": 0,
      "doc": {
        "category": "cont_registers",
        "description": "Pushes the current value of control register `c(i)`. If the control register is not supported in the current codepage, or if it does not have a value, an exception is triggered.",
        "gas": "26",
        "fift": "c[i] PUSHCTR\nc[i] PUSH",
        "fift_examples": [],
        "opcode": "ED4i",
        "stack": "- x"
      },
      "bytecode": {
        "tlb": "#ED4 i:uint4",
        "prefix": "ED4",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "register" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [],
          "registers": [
            { "type": "variable", "var_name": "i" }
          ]
        },
        "outputs": {
          "stack": [
            { "type": "simple", "name": "x" }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 765,
          "function_name": "exec_push_ctr"
        }
      ]
    },
    {
      "mnemonic": "STREF",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Stores a reference to _Cell_ `c` into _Builder_ `b`.",
        "gas": "18",
        "fift": "STREF",
        "fift_examples": [],
        "opcode": "CC",
        "stack": "c b - b'"
      },
      "bytecode": { "tlb": "#CC", "prefix": "CC", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell"
              ]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 415,
          "function_name": "exec_store_ref"
        }
      ]
    },
    {
      "mnemonic": "CALLDICT",
      "since_version": 0,
      "doc": {
        "category": "cont_dict",
        "description": "Calls the continuation in `c3`, pushing integer `0 <= nn <= 255` into its stack as an argument.\nApproximately equivalent to `[nn] PUSHINT` `c3 PUSHCTR` `EXECUTE`.",
        "gas": "",
        "fift": "[nn] CALL\n[nn] CALLDICT",
        "fift_examples": [],
        "opcode": "F0nn",
        "stack": "- nn"
      },
      "bytecode": {
        "tlb": "#F0 n:uint8",
        "prefix": "F0",
        "operands": [
          {
            "name": "n",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": {
        "branches": [
          {
            "type": "register",
            "index": 3,
            "save": {
              "c0": {
                "type": "cc",
                "save": {
                  "c0": { "type": "register", "index": 0 }
                }
              }
            }
          }
        ],
        "nobranch": false
      },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 1092,
          "function_name": "exec_calldict_short"
        }
      ]
    },
    {
      "mnemonic": "STGRAMS",
      "since_version": 0,
      "doc": {
        "category": "app_currency",
        "description": "Stores (serializes) an _Integer_ `x` in the range `0...2^120-1` into _Builder_ `b`, and returns the resulting _Builder_ `b'`. The serialization of `x` consists of a 4-bit unsigned big-endian integer `l`, which is the smallest integer `l>=0`, such that `x<2^(8l)`, followed by an `8l`-bit unsigned big-endian representation of `x`. If `x` does not belong to the supported range, a range check exception is thrown.",
        "gas": "26",
        "fift": "STGRAMS\nSTVARUINT16",
        "fift_examples": [],
        "opcode": "FA02",
        "stack": "b x - b'"
      },
      "bytecode": { "tlb": "#FA02", "prefix": "FA02", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "stgrams"
        }
      ]
    },
    {
      "mnemonic": "XCHG_IJ",
      "since_version": 0,
      "doc": {
        "category": "stack_basic",
        "description": "Interchanges `s[i]` with `s[j]`, `1 <= i < j <= 15`.",
        "gas": "26",
        "fift": "s[i] s[j] XCHG",
        "fift_examples": [],
        "opcode": "10ij",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#10 i:(## 4) j:(## 4) {1 <= i} {i + 1 <= j}",
        "prefix": "10",
        "operands_range_check": { "length": 4, "from": 1, "to": 15 },
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 1,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "j",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 61,
          "function_name": "exec_xchg"
        }
      ]
    },
    {
      "mnemonic": "PUSHCONT",
      "since_version": 0,
      "doc": {
        "category": "const_data",
        "description": "Pushes a continuation made from `builder`.\n_Details:_ Pushes the simple ordinary continuation `cccc` made from the first `0 <= r <= 3` references and the first `0 <= xx <= 127` bytes of `cc.code`.",
        "gas": "26",
        "fift": "[builder] PUSHCONT\n[builder] CONT",
        "fift_examples": [],
        "opcode": "8F_rxxcccc",
        "stack": "- c"
      },
      "bytecode": {
        "tlb": "#8F_ r:(## 2) xx:(## 7) c:(r * ^Cell) ssss:((8 * xx) * Bit)",
        "prefix": "8F_",
        "operands": [
          {
            "name": "s",
            "type": "subslice",
            "bits_length_var_size": 7,
            "refs_length_var_size": 2,
            "bits_padding": 0,
            "refs_add": 0,
            "completion_tag": false,
            "max_bits": 1016,
            "min_bits": 0,
            "max_refs": 3,
            "min_refs": 0,
            "display_hints": [
              { "type": "continuation" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Continuation"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 165,
          "function_name": "exec_push_cont"
        }
      ]
    },
    {
      "mnemonic": "BLKDROP2",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Drops `i` stack elements under the top `j` elements.\n`1 <= i <= 15`, `0 <= j <= 15`\nEquivalent to `[i+j] 0 REVERSE` `[i] BLKDROP` `[j] 0 REVERSE`.",
        "gas": "26",
        "fift": "[i] [j] BLKDROP2",
        "fift_examples": [],
        "opcode": "6Cij",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#6C i:(## 4) j:uint4 {1 <= i}",
        "prefix": "6C",
        "operands_range_check": { "length": 4, "from": 1, "to": 15 },
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 1,
            "max_value": 15,
            "display_hints": []
          },
          {
            "name": "j",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 380,
          "function_name": "exec_blkdrop2"
        }
      ]
    },
    {
      "mnemonic": "PUSHPOW2",
      "since_version": 0,
      "doc": {
        "category": "const_int",
        "description": "(Quietly) pushes `2^(xx+1)` for `0 <= xx <= 255`.\n`2^256` is a `NaN`.",
        "gas": "26",
        "fift": "[xx+1] PUSHPOW2",
        "fift_examples": [],
        "opcode": "83xx",
        "stack": "- 2^(xx+1)"
      },
      "bytecode": {
        "tlb": "#83 xx:uint8",
        "prefix": "83",
        "operands_range_check": { "length": 8, "from": 0, "to": 254 },
        "operands": [
          {
            "name": "x",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 254,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 110,
          "function_name": "exec_push_pow2"
        }
      ]
    },
    {
      "mnemonic": "PUSHINT_8",
      "since_version": 0,
      "doc": {
        "category": "const_int",
        "description": "Pushes integer `xx`. `-128 <= xx <= 127`.",
        "gas": "26",
        "fift": "[xx] PUSHINT\n[xx] INT",
        "fift_examples": [],
        "opcode": "80xx",
        "stack": "- xx"
      },
      "bytecode": {
        "tlb": "#80 xx:int8",
        "prefix": "80",
        "operands": [
          {
            "name": "x",
            "type": "int",
            "size": 8,
            "min_value": -128,
            "max_value": 127,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 46,
          "function_name": "exec_push_tinyint8"
        }
      ]
    },
    {
      "mnemonic": "STDICT",
      "since_version": 0,
      "doc": {
        "category": "dict_serial",
        "description": "Stores dictionary `D` into _Builder_ `b`, returning the resulting _Builder_ `b'`.\nIn other words, if `D` is a cell, performs `STONE` and `STREF`; if `D` is _Null_, performs `NIP` and `STZERO`; otherwise throws a type checking exception.",
        "gas": "26",
        "fift": "STDICT\nSTOPTREF",
        "fift_examples": [],
        "opcode": "F400",
        "stack": "D b - b'"
      },
      "bytecode": { "tlb": "#F400", "prefix": "F400", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 53,
          "function_name": "exec_store_dict"
        }
      ]
    },
    {
      "mnemonic": "EQINT",
      "since_version": 0,
      "doc": {
        "category": "compare_int",
        "description": "Returns `-1` if `x=yy`, `0` otherwise.\n`-2^7 <= yy < 2^7`.",
        "gas": "26",
        "fift": "[yy] EQINT",
        "fift_examples": [],
        "opcode": "C0yy",
        "stack": "x - x=yy"
      },
      "bytecode": {
        "tlb": "#C0 yy:int8",
        "prefix": "C0",
        "operands": [
          {
            "name": "y",
            "type": "int",
            "size": 8,
            "min_value": -128,
            "max_value": 127,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 992,
          "function_name": "exec_cmp_int"
        }
      ]
    },
    {
      "mnemonic": "BLKDROP",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `DROP` performed `i` times.",
        "gas": "26",
        "fift": "[i] BLKDROP",
        "fift_examples": [],
        "opcode": "5F0i",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#5F0 i:uint4",
        "prefix": "5F0",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 371,
          "function_name": "exec_blkdrop"
        }
      ]
    },
    {
      "mnemonic": "LDDICT",
      "since_version": 0,
      "doc": {
        "category": "dict_serial",
        "description": "Loads (parses) a dictionary `D` from _Slice_ `s`, and returns the remainder of `s` as `s'`. May be applied to dictionaries or to values of arbitrary `(^Y)?` types.",
        "gas": "26",
        "fift": "LDDICT\nLDOPTREF",
        "fift_examples": [],
        "opcode": "F404",
        "stack": "s - D s'"
      },
      "bytecode": { "tlb": "#F404", "prefix": "F404", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 148,
          "function_name": "exec_load_dict"
        }
      ]
    },
    {
      "mnemonic": "ROT",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `1 2 BLKSWAP` or to `s2 s1 XCHG2`.",
        "gas": "18",
        "fift": "ROT",
        "fift_examples": [],
        "opcode": "58",
        "stack": "a b c - b c a"
      },
      "bytecode": { "tlb": "#58", "prefix": "58", "operands": [] },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 308,
          "function_name": "exec_rot"
        }
      ]
    },
    {
      "mnemonic": "SBITS",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Returns the number of data bits in _Slice_ `s`.",
        "gas": "26",
        "fift": "SBITS",
        "fift_examples": [],
        "opcode": "D749",
        "stack": "s - l"
      },
      "bytecode": { "tlb": "#D749", "prefix": "D749", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "l",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1308,
          "function_name": "exec_slice_bits_refs"
        }
      ]
    },
    {
      "mnemonic": "PUXC",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `s[i] PUSH` `SWAP` `s[j] XCHG0`.",
        "gas": "26",
        "fift": "s[i] s[j-1] PUXC",
        "fift_examples": [],
        "opcode": "52ij",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#52 i:uint4 j:uint4",
        "prefix": "52",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "j",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" },
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 183,
          "function_name": "exec_puxc"
        }
      ]
    },
    {
      "mnemonic": "AND",
      "since_version": 0,
      "doc": {
        "category": "arithm_logical",
        "description": "Bitwise and of two signed integers `x` and `y`, sign-extended to infinity.",
        "gas": "18",
        "fift": "AND",
        "fift_examples": [],
        "opcode": "B0",
        "stack": "x y - x&y"
      },
      "bytecode": { "tlb": "#B0", "prefix": "B0", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 769,
          "function_name": "exec_and"
        }
      ]
    },
    {
      "mnemonic": "PLDU",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Preloads an unsigned `cc+1`-bit integer from `s`.",
        "gas": "34",
        "fift": "[cc+1] PLDU",
        "fift_examples": [],
        "opcode": "D70Bcc",
        "stack": "s - x"
      },
      "bytecode": {
        "tlb": "#D70B cc:uint8",
        "prefix": "D70B",
        "operands": [
          {
            "name": "c",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1092,
          "function_name": "exec_load_int_fixed2"
        }
      ]
    },
    {
      "mnemonic": "IFELSE",
      "since_version": 0,
      "doc": {
        "category": "cont_conditional",
        "description": "If integer `f` is non-zero, executes `c`, otherwise executes `c'`. Equivalent to `CONDSELCHK` `EXECUTE`.",
        "gas": "18",
        "fift": "IFELSE",
        "fift_examples": [
          { "fift": "IF:<{ code1 }>ELSE<{ code2 }>", "description": "Equivalent to `<{ code1 }> CONT` `<{ code2 }> CONT` `IFELSE`." }
        ],
        "opcode": "E2",
        "stack": "f c c' - "
      },
      "bytecode": { "tlb": "#E2", "prefix": "E2", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Continuation"
              ]
            },
            {
              "type": "simple",
              "name": "c2",
              "value_types": [
                "Continuation"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": {
        "branches": [
          {
            "type": "variable",
            "var_name": "c",
            "save": {
              "c0": {
                "type": "cc",
                "save": {
                  "c0": { "type": "register", "index": 0 }
                }
              }
            }
          },
          {
            "type": "variable",
            "var_name": "c2",
            "save": {
              "c0": {
                "type": "cc",
                "save": {
                  "c0": { "type": "register", "index": 0 }
                }
              }
            }
          }
        ],
        "nobranch": false
      },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 385,
          "function_name": "exec_if_else"
        }
      ]
    },
    {
      "mnemonic": "STI",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Stores a signed `cc+1`-bit integer `x` into _Builder_ `b` for `0 <= cc <= 255`, throws a range check exception if `x` does not fit into `cc+1` bits.",
        "gas": "26",
        "fift": "[cc+1] STI",
        "fift_examples": [],
        "opcode": "CAcc",
        "stack": "x b - b'"
      },
      "bytecode": {
        "tlb": "#CA cc:uint8",
        "prefix": "CA",
        "operands": [
          {
            "name": "c",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 407,
          "function_name": "exec_store_int"
        }
      ]
    },
    {
      "mnemonic": "ADD",
      "since_version": 0,
      "doc": {
        "category": "arithm_basic",
        "description": "",
        "gas": "18",
        "fift": "ADD",
        "fift_examples": [],
        "opcode": "A0",
        "stack": "x y - x+y"
      },
      "bytecode": { "tlb": "#A0", "prefix": "A0", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 162,
          "function_name": "exec_add"
        }
      ]
    },
    {
      "mnemonic": "BLKSWAP",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Permutes two blocks `s[j+i+1] ... s[j+1]` and `s[j] ... s0`.\n`0 <= i,j <= 15`\nEquivalent to `[i+1] [j+1] REVERSE` `[j+1] 0 REVERSE` `[i+j+2] 0 REVERSE`.",
        "gas": "26",
        "fift": "[i+1] [j+1] BLKSWAP",
        "fift_examples": [],
        "opcode": "55ij",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#55 i:uint4 j:uint4",
        "prefix": "55",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" },
              { "type": "add", "value": 1 }
            ]
          },
          {
            "name": "j",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" },
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 299,
          "function_name": "exec_blkswap"
        }
      ]
    },
    {
      "mnemonic": "THROWIF",
      "since_version": 0,
      "doc": {
        "category": "exceptions",
        "description": "For `0 <= n < 2^11`, an encoding of `[n] THROWIF` for larger values of `n`.",
        "gas": "34/84",
        "fift": "[n] THROWIF",
        "fift_examples": [],
        "opcode": "F2D4_n",
        "stack": "f - "
      },
      "bytecode": {
        "tlb": "#F2D4_ n:uint11",
        "prefix": "F2D4_",
        "operands": [
          {
            "name": "n",
            "type": "uint",
            "size": 11,
            "min_value": 0,
            "max_value": 2047,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 1130,
          "function_name": "exec_throw_fixed"
        }
      ]
    },
    {
      "mnemonic": "IFJMPREF",
      "since_version": 0,
      "doc": {
        "category": "cont_conditional",
        "description": "Equivalent to `PUSHREFCONT` `IFJMP`.",
        "gas": "26/126/51",
        "fift": "[ref] IFJMPREF",
        "fift_examples": [],
        "opcode": "E302",
        "stack": "f - "
      },
      "bytecode": {
        "tlb": "#E302 c:^Cell",
        "prefix": "E302",
        "operands": [
          {
            "name": "c",
            "type": "ref",
            "display_hints": [
              { "type": "continuation" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": {
        "branches": [
          { "type": "variable", "var_name": "c" }
        ],
        "nobranch": true
      },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 459,
          "function_name": "exec_if_bit_jmpref"
        }
      ]
    },
    {
      "mnemonic": "SUB",
      "since_version": 0,
      "doc": {
        "category": "arithm_basic",
        "description": "",
        "gas": "18",
        "fift": "SUB",
        "fift_examples": [],
        "opcode": "A1",
        "stack": "x y - x-y"
      },
      "bytecode": { "tlb": "#A1", "prefix": "A1", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 171,
          "function_name": "exec_sub"
        }
      ]
    },
    {
      "mnemonic": "XCHG3",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `s2 s[i] XCHG` `s1 s[j] XCHG` `s[k] XCHG0`.",
        "gas": "26",
        "fift": "s[i] s[j] s[k] XCHG3",
        "fift_examples": [],
        "opcode": "4ijk",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#4 i:uint4 j:uint4 k:uint4",
        "prefix": "4",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "j",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "k",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 204,
          "function_name": "exec_xchg3"
        }
      ]
    },
    {
      "mnemonic": "LDI",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Loads (i.e., parses) a signed `cc+1`-bit integer `x` from _Slice_ `s`, and returns the remainder of `s` as `s'`.",
        "gas": "26",
        "fift": "[cc+1] LDI",
        "fift_examples": [],
        "opcode": "D2cc",
        "stack": "s - x s'"
      },
      "bytecode": {
        "tlb": "#D2 cc:uint8",
        "prefix": "D2",
        "operands": [
          {
            "name": "c",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 971,
          "function_name": "exec_load_int_fixed"
        }
      ]
    },
    {
      "mnemonic": "SENDRAWMSG",
      "since_version": 0,
      "doc": {
        "category": "app_actions",
        "description": "Sends a raw message contained in _Cell `c`_, which should contain a correctly serialized object `Message X`, with the only exception that the source address is allowed to have dummy value `addr_none` (to be automatically replaced with the current smart-contract address), and `ihr_fee`, `fwd_fee`, `created_lt` and `created_at` fields can have arbitrary values (to be rewritten with correct values during the action phase of the current transaction). Integer parameter `x` contains the flags. Currently `x=0` is used for ordinary messages; `x=128` is used for messages that are to carry all the remaining balance of the current smart contract (instead of the value originally indicated in the message); `x=64` is used for messages that carry all the remaining value of the inbound message in addition to the value initially indicated in the new message (if bit 0 is not set, the gas fees are deducted from this amount); `x'=x+1` means that the sender wants to pay transfer fees separately; `x'=x+2` means that any errors arising while processing this message during the action phase should be ignored. Finally, `x'=x+32` means that the current account must be destroyed if its resulting balance is zero. This flag is usually employed together with `+128`.",
        "gas": "526",
        "fift": "SENDRAWMSG",
        "fift_examples": [],
        "opcode": "FB00",
        "stack": "c x - "
      },
      "bytecode": { "tlb": "#FB00", "prefix": "FB00", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell"
              ]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": [
            { "type": "constant", "index": 5 }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            { "type": "constant", "index": 5 }
          ]
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "sendrawmsg"
        }
      ]
    },
    {
      "mnemonic": "SDEQ",
      "since_version": 0,
      "doc": {
        "category": "compare_other",
        "description": "Checks whether the data parts of `s` and `s'` coincide, equivalent to `SDLEXCMP` `ISZERO`.",
        "gas": "26",
        "fift": "SDEQ",
        "fift_examples": [],
        "opcode": "C705",
        "stack": "s s' - ?"
      },
      "bytecode": { "tlb": "#C705", "prefix": "C705", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 319,
          "function_name": "exec_bin_cs_cmp"
        }
      ]
    },
    {
      "mnemonic": "PUSH2",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `s[i] PUSH` `s[j+1] PUSH`.",
        "gas": "26",
        "fift": "s[i] s[j] PUSH2",
        "fift_examples": [],
        "opcode": "53ij",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#53 i:uint4 j:uint4",
        "prefix": "53",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "j",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 194,
          "function_name": "exec_push2"
        }
      ]
    },
    {
      "mnemonic": "ENDS",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Removes a _Slice_ `s` from the stack, and throws an exception if it is not empty.",
        "gas": "18/68",
        "fift": "ENDS",
        "fift_examples": [],
        "opcode": "D1",
        "stack": "s - "
      },
      "bytecode": { "tlb": "#D1", "prefix": "D1", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 936,
          "function_name": "exec_slice_chk_empty"
        }
      ]
    },
    {
      "mnemonic": "POP_LONG",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Pops the old `s0` value into the old `s[ii]`.\n`0 <= ii <= 255`",
        "gas": "26",
        "fift": "[ii] s() POP",
        "fift_examples": [],
        "opcode": "57ii",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#57 ii:uint8",
        "prefix": "57",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "stack" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 152,
          "function_name": "exec_pop_l"
        }
      ]
    },
    {
      "mnemonic": "XCPU",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `s[i] XCHG0` `s[j] PUSH`.",
        "gas": "26",
        "fift": "s[i] s[j] XCPU",
        "fift_examples": [],
        "opcode": "51ij",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#51 i:uint4 j:uint4",
        "prefix": "51",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "j",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 173,
          "function_name": "exec_xcpu"
        }
      ]
    },
    {
      "mnemonic": "GTINT",
      "since_version": 0,
      "doc": {
        "category": "compare_int",
        "description": "Returns `-1` if `x>yy`, `0` otherwise.\n`-2^7 <= yy < 2^7`.",
        "gas": "26",
        "fift": "[yy] GTINT\n[yy+1] GEQINT",
        "fift_examples": [],
        "opcode": "C2yy",
        "stack": "x - x>yy"
      },
      "bytecode": {
        "tlb": "#C2 yy:int8",
        "prefix": "C2",
        "operands": [
          {
            "name": "y",
            "type": "int",
            "size": 8,
            "min_value": -128,
            "max_value": 127,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 992,
          "function_name": "exec_cmp_int"
        }
      ]
    },
    {
      "mnemonic": "SEMPTY",
      "since_version": 0,
      "doc": {
        "category": "compare_other",
        "description": "Checks whether a _Slice_ `s` is empty (i.e., contains no bits of data and no cell references).",
        "gas": "26",
        "fift": "SEMPTY",
        "fift_examples": [],
        "opcode": "C700",
        "stack": "s - ?"
      },
      "bytecode": { "tlb": "#C700", "prefix": "C700", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 314,
          "function_name": "exec_un_cs_cmp"
        }
      ]
    },
    {
      "mnemonic": "TUPLE",
      "since_version": 0,
      "doc": {
        "category": "tuple",
        "description": "Creates a new _Tuple_ `t=(x_1, ... ,x_n)` containing `n` values `x_1`,..., `x_n`.\n`0 <= n <= 15`",
        "gas": "26+n",
        "fift": "[n] TUPLE",
        "fift_examples": [],
        "opcode": "6F0n",
        "stack": "x_1 ... x_n - t"
      },
      "bytecode": {
        "tlb": "#6F0 n:uint4",
        "prefix": "6F0",
        "operands": [
          {
            "name": "n",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "array",
              "name": "tuple_elements",
              "length_var": "n",
              "array_entry": [
                { "type": "simple", "name": "x" }
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": [
                "Tuple"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tupleops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tupleops.cpp",
          "line": 73,
          "function_name": "exec_mktuple_common"
        }
      ]
    },
    {
      "mnemonic": "PUSHSLICE_LONG",
      "since_version": 0,
      "doc": {
        "category": "const_data",
        "description": "Pushes the slice `slice` into the stack.\n_Details:_ Pushes the subslice of `cc.code` consisting of `0 <= r <= 4` references and up to `8xx+6` bits of data, with `0 <= xx <= 127`.\nA completion tag is assumed.",
        "gas": "28",
        "fift": "[slice] PUSHSLICE\n[slice] SLICE",
        "fift_examples": [
          { "fift": "x{} PUSHSLICE x{ABCD1234} PUSHSLICE b{01101} PUSHSLICE", "description": "Examples of `PUSHSLICE`. `x{}` is an empty slice. `x{...}` is a hexadecimal literal. `b{...}` is a binary literal. More on slice literals [here](https://github.com/Piterden/TON-docs/blob/master/Fift.%20A%20Brief%20Introduction.md#user-content-51-slice-literals). Note that the assembler can replace `PUSHSLICE` with `PUSHREFSLICE` in certain situations (e.g. if there's not enough space in the current continuation)." },
          { "fift": "<b x{AB12} s, b> PUSHREF <b x{AB12} s, b> PUSHREFSLICE", "description": "Examples of `PUSHREF` and `PUSHREFSLICE`. More on building cells in fift [here](https://github.com/Piterden/TON-docs/blob/master/Fift.%20A%20Brief%20Introduction.md#user-content-52-builder-primitives)." }
        ],
        "opcode": "8Drxxsssss",
        "stack": "- s"
      },
      "bytecode": {
        "tlb": "#8D r:(#<= 4) xx:(## 7) c:(r * ^Cell) ssss:((8 * xx + 6) * Bit)",
        "prefix": "8D",
        "operands_range_check": { "length": 3, "from": 0, "to": 4 },
        "operands": [
          {
            "name": "slice",
            "type": "subslice",
            "bits_length_var_size": 7,
            "refs_length_var_size": 3,
            "bits_padding": 6,
            "refs_add": 0,
            "completion_tag": true,
            "max_bits": 1021,
            "min_bits": 0,
            "max_refs": 4,
            "min_refs": 0,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 147,
          "function_name": "exec_push_slice_r2"
        }
      ]
    },
    {
      "mnemonic": "SDSKIPFIRST",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Returns all but the first `0 <= l <= 1023` bits of `s`. It is equivalent to `LDSLICEX` `NIP`.",
        "gas": "26",
        "fift": "SDSKIPFIRST",
        "fift_examples": [],
        "opcode": "D721",
        "stack": "s l - s'"
      },
      "bytecode": { "tlb": "#D721", "prefix": "D721", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1462,
          "function_name": "exec_slice_op_args"
        }
      ]
    },
    {
      "mnemonic": "NULLSWAPIFNOT",
      "since_version": 0,
      "doc": {
        "category": "tuple",
        "description": "Pushes a _Null_ under the topmost _Integer_ `x`, but only if `x=0`. May be used for stack alignment after quiet primitives such as `PLDUXQ`.",
        "gas": "26",
        "fift": "NULLSWAPIFNOT",
        "fift_examples": [],
        "opcode": "6FA1",
        "stack": "x - x or null x"
      },
      "bytecode": { "tlb": "#6FA1", "prefix": "6FA1", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "x",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    { "type": "const", "value": null, "value_type": "Null" }
                  ]
                }
              ],
              "else": []
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tupleops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tupleops.cpp",
          "line": 41,
          "function_name": "exec_null_swap_if"
        }
      ]
    },
    {
      "mnemonic": "IF",
      "since_version": 0,
      "doc": {
        "category": "cont_conditional",
        "description": "Performs `EXECUTE` for `c` (i.e., _executes_ `c`), but only if integer `f` is non-zero. Otherwise simply discards both values.",
        "gas": "18",
        "fift": "IF",
        "fift_examples": [
          { "fift": "IF:<{ code }> <{ code }>IF", "description": "Equivalent to `<{ code }> CONT` `IF`." }
        ],
        "opcode": "DE",
        "stack": "f c - "
      },
      "bytecode": { "tlb": "#DE", "prefix": "DE", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Continuation"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": {
        "branches": [
          {
            "type": "variable",
            "var_name": "c",
            "save": {
              "c0": {
                "type": "cc",
                "save": {
                  "c0": { "type": "register", "index": 0 }
                }
              }
            }
          }
        ],
        "nobranch": true
      },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 325,
          "function_name": "exec_if"
        }
      ]
    },
    {
      "mnemonic": "HASHCU",
      "since_version": 0,
      "doc": {
        "category": "app_crypto",
        "description": "Computes the representation hash of a _Cell_ `c` and returns it as a 256-bit unsigned integer `x`. Useful for signing and checking signatures of arbitrary entities represented by a tree of cells.",
        "gas": "26",
        "fift": "HASHCU",
        "fift_examples": [],
        "opcode": "F900",
        "stack": "c - x"
      },
      "bytecode": { "tlb": "#F900", "prefix": "F900", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "compute_hash_cu"
        }
      ]
    },
    {
      "mnemonic": "NULL",
      "since_version": 0,
      "doc": {
        "category": "tuple",
        "description": "Pushes the only value of type _Null_.",
        "gas": "18",
        "fift": "NULL\nPUSHNULL",
        "fift_examples": [],
        "opcode": "6D",
        "stack": " - null"
      },
      "bytecode": { "tlb": "#6D", "prefix": "6D", "operands": [] },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            { "type": "const", "value": null, "value_type": "Null" }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tupleops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tupleops.cpp",
          "line": 28,
          "function_name": "exec_push_null"
        }
      ]
    },
    {
      "mnemonic": "PUSHPOW2DEC",
      "since_version": 0,
      "doc": {
        "category": "const_int",
        "description": "Pushes `2^(xx+1)-1` for `0 <= xx <= 255`.",
        "gas": "26",
        "fift": "[xx+1] PUSHPOW2DEC",
        "fift_examples": [],
        "opcode": "84xx",
        "stack": "- 2^(xx+1)-1"
      },
      "bytecode": {
        "tlb": "#84 xx:uint8",
        "prefix": "84",
        "operands": [
          {
            "name": "x",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 129,
          "function_name": "exec_push_pow2dec"
        }
      ]
    },
    {
      "mnemonic": "PUXCPU",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `s[i] s[j-1] PUXC` `s[k] PUSH`.",
        "gas": "34",
        "fift": "s[i] s[j-1] s[k-1] PUXCPU",
        "fift_examples": [],
        "opcode": "545ijk",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#545 i:uint4 j:uint4 k:uint4",
        "prefix": "545",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "j",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" },
              { "type": "add", "value": 1 }
            ]
          },
          {
            "name": "k",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" },
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 261,
          "function_name": "exec_puxcpu"
        }
      ]
    },
    {
      "mnemonic": "NEGATE",
      "since_version": 0,
      "doc": {
        "category": "arithm_basic",
        "description": "Equivalent to `-1 MULCONST` or to `ZERO SUBR`.\nNotice that it triggers an integer overflow exception if `x=-2^256`.",
        "gas": "18",
        "fift": "NEGATE",
        "fift_examples": [],
        "opcode": "A3",
        "stack": "x - -x"
      },
      "bytecode": { "tlb": "#A3", "prefix": "A3", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 189,
          "function_name": "exec_negate"
        }
      ]
    },
    {
      "mnemonic": "MUL",
      "since_version": 0,
      "doc": {
        "category": "arithm_basic",
        "description": "",
        "gas": "18",
        "fift": "MUL",
        "fift_examples": [],
        "opcode": "A8",
        "stack": "x y - x*y"
      },
      "bytecode": { "tlb": "#A8", "prefix": "A8", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 231,
          "function_name": "exec_mul"
        }
      ]
    },
    {
      "mnemonic": "THROWANY",
      "since_version": 0,
      "doc": {
        "category": "exceptions",
        "description": "Throws exception `0 <= n < 2^16` with parameter zero.\nApproximately equivalent to `ZERO` `SWAP` `THROWARGANY`.",
        "gas": "76",
        "fift": "THROWANY",
        "fift_examples": [],
        "opcode": "F2F0",
        "stack": "n - 0 n"
      },
      "bytecode": { "tlb": "#F2F0", "prefix": "F2F0", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": false },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 1153,
          "function_name": "exec_throw_any"
        }
      ]
    },
    {
      "mnemonic": "XC2PU",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `s[i] s[j] XCHG2` `s[k] PUSH`.",
        "gas": "34",
        "fift": "s[i] s[j] s[k] XC2PU",
        "fift_examples": [],
        "opcode": "541ijk",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#541 i:uint4 j:uint4 k:uint4",
        "prefix": "541",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "j",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "k",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 215,
          "function_name": "exec_xc2pu"
        }
      ]
    },
    {
      "mnemonic": "ISNULL",
      "since_version": 0,
      "doc": {
        "category": "tuple",
        "description": "Checks whether `x` is a _Null_, and returns `-1` or `0` accordingly.",
        "gas": "18",
        "fift": "ISNULL",
        "fift_examples": [],
        "opcode": "6E",
        "stack": "x - ?"
      },
      "bytecode": { "tlb": "#6E", "prefix": "6E", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tupleops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tupleops.cpp",
          "line": 34,
          "function_name": "exec_is_null"
        }
      ]
    },
    {
      "mnemonic": "OR",
      "since_version": 0,
      "doc": {
        "category": "arithm_logical",
        "description": "Bitwise or of two integers.",
        "gas": "18",
        "fift": "OR",
        "fift_examples": [],
        "opcode": "B1",
        "stack": "x y - x|y"
      },
      "bytecode": { "tlb": "#B1", "prefix": "B1", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 778,
          "function_name": "exec_or"
        }
      ]
    },
    {
      "mnemonic": "DICTUGET",
      "since_version": 0,
      "doc": {
        "category": "dict_get",
        "description": "Similar to `DICTIGET`, but with _unsigned_ (big-endian) `n`-bit _Integer_ `i` used as a key.",
        "gas": "",
        "fift": "DICTUGET",
        "fift_examples": [],
        "opcode": "F40E",
        "stack": "i D n - x -1 or 0"
      },
      "bytecode": { "tlb": "#F40E", "prefix": "F40E", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Cell",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                { "value": 0, "stack": [] },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": [
                        "Slice"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 207,
          "function_name": "exec_dict_get"
        }
      ]
    },
    {
      "mnemonic": "REWRITESTDADDR",
      "since_version": 0,
      "doc": {
        "category": "app_addr",
        "description": "Parses _Slice_ `s` containing a valid `MsgAddressInt` (usually a `msg_addr_std`), applies rewriting from the `anycast` (if present) to the same-length prefix of the address, and returns both the workchain `x` and the 256-bit address `y` as integers. If the address is not 256-bit, or if `s` is not a valid serialization of `MsgAddressInt`, throws a cell deserialization exception.",
        "gas": "26",
        "fift": "REWRITESTDADDR",
        "fift_examples": [],
        "opcode": "FA44",
        "stack": "s - x y"
      },
      "bytecode": { "tlb": "#FA44", "prefix": "FA44", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "rewritestdaddr"
        }
      ]
    },
    {
      "mnemonic": "GREATER",
      "since_version": 0,
      "doc": {
        "category": "compare_int",
        "description": "",
        "gas": "18",
        "fift": "GREATER",
        "fift_examples": [],
        "opcode": "BC",
        "stack": "x y - x>y"
      },
      "bytecode": { "tlb": "#BC", "prefix": "BC", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 975,
          "function_name": "exec_cmp"
        }
      ]
    },
    {
      "mnemonic": "DROP2",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `DROP` `DROP`.",
        "gas": "18",
        "fift": "DROP2\n2DROP",
        "fift_examples": [],
        "opcode": "5B",
        "stack": "a b - "
      },
      "bytecode": { "tlb": "#5B", "prefix": "5B", "operands": [] },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 335,
          "function_name": "exec_2drop"
        }
      ]
    },
    {
      "mnemonic": "XCPUXC",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `s1 s[i] XCHG` `s[j] s[k-1] PUXC`.",
        "gas": "34",
        "fift": "s[i] s[j] s[k-1] XCPUXC",
        "fift_examples": [],
        "opcode": "542ijk",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#542 i:uint4 j:uint4 k:uint4",
        "prefix": "542",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "j",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "k",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" },
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 226,
          "function_name": "exec_xcpuxc"
        }
      ]
    },
    {
      "mnemonic": "IFREFELSE",
      "since_version": 0,
      "doc": {
        "category": "cont_conditional",
        "description": "Equivalent to `PUSHREFCONT` `SWAP` `IFELSE`, with the optimization that the cell reference is not actually loaded into a _Slice_ and then converted into an ordinary _Continuation_ if `f=0`. Similar remarks apply to the next two primitives: cells are converted into continuations only when necessary.",
        "gas": "26/126/51",
        "fift": "[ref] IFREFELSE",
        "fift_examples": [],
        "opcode": "E30D",
        "stack": "f c -"
      },
      "bytecode": {
        "tlb": "#E30D c:^Cell",
        "prefix": "E30D",
        "operands": [
          {
            "name": "c",
            "type": "ref",
            "display_hints": [
              { "type": "continuation" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "c2",
              "value_types": [
                "Continuation"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": {
        "branches": [
          {
            "type": "variable",
            "var_name": "c",
            "save": {
              "c0": {
                "type": "cc",
                "save": {
                  "c0": { "type": "register", "index": 0 }
                }
              }
            }
          },
          {
            "type": "variable",
            "var_name": "c2",
            "save": {
              "c0": {
                "type": "cc",
                "save": {
                  "c0": { "type": "register", "index": 0 }
                }
              }
            }
          }
        ],
        "nobranch": false
      },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 193,
          "function_name": "exec_ifref_elseref"
        }
      ]
    },
    {
      "mnemonic": "DIV",
      "since_version": 0,
      "doc": {
        "category": "arithm_div",
        "description": "`q=floor(x/y)`, `r=x-y*q`",
        "gas": "26",
        "fift": "DIV",
        "fift_examples": [],
        "opcode": "A904",
        "stack": "x y - q"
      },
      "bytecode": { "tlb": "#A904", "prefix": "A904", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 266,
          "function_name": "exec_divmod"
        }
      ]
    },
    {
      "mnemonic": "PUSH_LONG",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Pushes a copy of the old `s[ii]` into the stack.\n`0 <= ii <= 255`",
        "gas": "26",
        "fift": "[ii] s() PUSH",
        "fift_examples": [],
        "opcode": "56ii",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#56 ii:uint8",
        "prefix": "56",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "stack" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 118,
          "function_name": "exec_push_l"
        }
      ]
    },
    {
      "mnemonic": "PUSHSLICE",
      "since_version": 0,
      "doc": {
        "category": "const_data",
        "description": "Pushes the slice `slice` into the stack.\n_Details:_ Pushes the (prefix) subslice of `cc.code` consisting of its first `8x+4` bits and no references (i.e., essentially a bitstring), where `0 <= x <= 15`.\nA completion tag is assumed, meaning that all trailing zeroes and the last binary one (if present) are removed from this bitstring.\nIf the original bitstring consists only of zeroes, an empty slice will be pushed.",
        "gas": "22",
        "fift": "[slice] PUSHSLICE\n[slice] SLICE",
        "fift_examples": [],
        "opcode": "8Bxsss",
        "stack": "- s"
      },
      "bytecode": {
        "tlb": "#8B x:(## 4) sss:((8 * x + 4) * Bit)",
        "prefix": "8B",
        "operands": [
          {
            "name": "s",
            "type": "subslice",
            "bits_length_var_size": 4,
            "bits_padding": 4,
            "completion_tag": true,
            "max_bits": 123,
            "min_bits": 0,
            "max_refs": 0,
            "min_refs": 0,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 117,
          "function_name": "exec_push_slice"
        }
      ]
    },
    {
      "mnemonic": "LESS",
      "since_version": 0,
      "doc": {
        "category": "compare_int",
        "description": "Returns `-1` if `x<y`, `0` otherwise.",
        "gas": "18",
        "fift": "LESS",
        "fift_examples": [],
        "opcode": "B9",
        "stack": "x y - x<y"
      },
      "bytecode": { "tlb": "#B9", "prefix": "B9", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 975,
          "function_name": "exec_cmp"
        }
      ]
    },
    {
      "mnemonic": "PUSH3",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `s[i] PUSH` `s[j+1] s[k+1] PUSH2`.",
        "gas": "34",
        "fift": "s[i] s[j] s[k] PUSH3",
        "fift_examples": [],
        "opcode": "547ijk",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#547 i:uint4 j:uint4 k:uint4",
        "prefix": "547",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "j",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "k",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 286,
          "function_name": "exec_push3"
        }
      ]
    },
    {
      "mnemonic": "NOT",
      "since_version": 0,
      "doc": {
        "category": "arithm_logical",
        "description": "Bitwise not of an integer.",
        "gas": "26",
        "fift": "NOT",
        "fift_examples": [],
        "opcode": "B3",
        "stack": "x - ~x"
      },
      "bytecode": { "tlb": "#B3", "prefix": "B3", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 796,
          "function_name": "exec_not"
        }
      ]
    },
    {
      "mnemonic": "UNTIL",
      "since_version": 0,
      "doc": {
        "category": "cont_loops",
        "description": "Executes continuation `c`, then pops an integer `x` from the resulting stack. If `x` is zero, performs another iteration of this loop. The actual implementation of this primitive involves an extraordinary continuation `ec_until` with its arguments set to the body of the loop (continuation `c`) and the original current continuation `cc`. This extraordinary continuation is then saved into the savelist of `c` as `c.c0` and the modified `c` is then executed. The other loop primitives are implemented similarly with the aid of suitable extraordinary continuations.",
        "gas": "18",
        "fift": "UNTIL",
        "fift_examples": [
          { "fift": "UNTIL:<{ code }> <{ code }>UNTIL", "description": "Equivalent to `<{ code }> CONT` `UNTIL`." }
        ],
        "opcode": "E6",
        "stack": "c - "
      },
      "bytecode": { "tlb": "#E6", "prefix": "E6", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Continuation"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": {
        "branches": [
          {
            "type": "variable",
            "var_name": "c",
            "save": {
              "c0": {
                "type": "special",
                "name": "until",
                "args": {
                  "body": { "type": "variable", "var_name": "c" },
                  "after": {
                    "type": "cc",
                    "save": {
                      "c0": { "type": "register", "index": 0 }
                    }
                  }
                }
              }
            }
          }
        ],
        "nobranch": false
      },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 513,
          "function_name": "exec_until"
        }
      ]
    },
    {
      "mnemonic": "THROWANYIFNOT",
      "since_version": 0,
      "doc": {
        "category": "exceptions",
        "description": "Throws exception `0 <= n<2^16` with parameter zero only if `f=0`.",
        "gas": "26/76",
        "fift": "THROWANYIFNOT",
        "fift_examples": [],
        "opcode": "F2F4",
        "stack": "n f - "
      },
      "bytecode": { "tlb": "#F2F4", "prefix": "F2F4", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "f",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 1153,
          "function_name": "exec_throw_any"
        }
      ]
    },
    {
      "mnemonic": "LESSINT",
      "since_version": 0,
      "doc": {
        "category": "compare_int",
        "description": "Returns `-1` if `x<yy`, `0` otherwise.\n`-2^7 <= yy < 2^7`.",
        "gas": "26",
        "fift": "[yy] LESSINT\n[yy-1] LEQINT",
        "fift_examples": [],
        "opcode": "C1yy",
        "stack": "x - x<yy"
      },
      "bytecode": {
        "tlb": "#C1 yy:int8",
        "prefix": "C1",
        "operands": [
          {
            "name": "y",
            "type": "int",
            "size": 8,
            "min_value": -128,
            "max_value": 127,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 992,
          "function_name": "exec_cmp_int"
        }
      ]
    },
    {
      "mnemonic": "NEQINT",
      "since_version": 0,
      "doc": {
        "category": "compare_int",
        "description": "Returns `-1` if `x!=yy`, `0` otherwise.\n`-2^7 <= yy < 2^7`.",
        "gas": "26",
        "fift": "[yy] NEQINT",
        "fift_examples": [],
        "opcode": "C3yy",
        "stack": "x - x!=yy"
      },
      "bytecode": {
        "tlb": "#C3 yy:int8",
        "prefix": "C3",
        "operands": [
          {
            "name": "y",
            "type": "int",
            "size": 8,
            "min_value": -128,
            "max_value": 127,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 992,
          "function_name": "exec_cmp_int"
        }
      ]
    },
    {
      "mnemonic": "SAMEALTSAVE",
      "since_version": 0,
      "doc": {
        "category": "cont_registers",
        "description": "Sets `c1` to `c0`, but first saves the old value of `c1` into the savelist of `c0`.\nEquivalent to `c1 SAVE` `SAMEALT`.",
        "gas": "26",
        "fift": "SAMEALTSAVE",
        "fift_examples": [],
        "opcode": "EDFB",
        "stack": "-"
      },
      "bytecode": { "tlb": "#EDFB", "prefix": "EDFB", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [],
          "registers": [
            { "type": "constant", "index": 0 },
            { "type": "constant", "index": 1 }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            { "type": "constant", "index": 0 },
            { "type": "constant", "index": 1 }
          ]
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 862,
          "function_name": "exec_samealt"
        }
      ]
    },
    {
      "mnemonic": "STIX",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Stores a signed `l`-bit integer `x` into `b` for `0 <= l <= 257`.",
        "gas": "26",
        "fift": "STIX",
        "fift_examples": [],
        "opcode": "CF00",
        "stack": "x b l - b'"
      },
      "bytecode": { "tlb": "#CF00", "prefix": "CF00", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 599,
          "function_name": "exec_store_int_var"
        }
      ]
    },
    {
      "mnemonic": "LEQ",
      "since_version": 0,
      "doc": {
        "category": "compare_int",
        "description": "",
        "gas": "18",
        "fift": "LEQ",
        "fift_examples": [],
        "opcode": "BB",
        "stack": "x y - x<=y"
      },
      "bytecode": { "tlb": "#BB", "prefix": "BB", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 975,
          "function_name": "exec_cmp"
        }
      ]
    },
    {
      "mnemonic": "LSHIFT",
      "since_version": 0,
      "doc": {
        "category": "arithm_logical",
        "description": "`0 <= cc <= 255`",
        "gas": "26",
        "fift": "[cc+1] LSHIFT#",
        "fift_examples": [],
        "opcode": "AAcc",
        "stack": "x - x*2^(cc+1)"
      },
      "bytecode": {
        "tlb": "#AA cc:uint8",
        "prefix": "AA",
        "operands": [
          {
            "name": "c",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 740,
          "function_name": "exec_lshift"
        }
      ]
    },
    {
      "mnemonic": "WHILE",
      "since_version": 0,
      "doc": {
        "category": "cont_loops",
        "description": "Executes `c'` and pops an integer `x` from the resulting stack. If `x` is zero, exists the loop and transfers control to the original `cc`. If `x` is non-zero, executes `c`, and then begins a new iteration.",
        "gas": "18",
        "fift": "WHILE",
        "fift_examples": [
          { "fift": "WHILE:<{ cond }>DO<{ code }>", "description": "Equivalent to `<{ cond }> CONT` `<{ code }> CONT` `WHILE`." }
        ],
        "opcode": "E8",
        "stack": "c' c - "
      },
      "bytecode": { "tlb": "#E8", "prefix": "E8", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c2",
              "value_types": [
                "Continuation"
              ]
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Continuation"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": {
        "branches": [
          {
            "type": "variable",
            "var_name": "c2",
            "save": {
              "c0": {
                "type": "special",
                "name": "while",
                "args": {
                  "cond": { "type": "variable", "var_name": "c2" },
                  "body": { "type": "variable", "var_name": "c" },
                  "after": {
                    "type": "cc",
                    "save": {
                      "c0": { "type": "register", "index": 0 }
                    }
                  }
                }
              }
            }
          }
        ],
        "nobranch": false
      },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 526,
          "function_name": "exec_while"
        }
      ]
    },
    {
      "mnemonic": "SAVE",
      "since_version": 0,
      "doc": {
        "category": "cont_registers",
        "description": "Saves the current value of `c(i)` into the savelist of continuation `c0`. If an entry for `c[i]` is already present in the savelist of `c0`, nothing is done. Equivalent to `c[i] PUSHCTR` `c[i] SETRETCTR`.",
        "gas": "26",
        "fift": "c[i] SAVE\nc[i] SAVECTR",
        "fift_examples": [],
        "opcode": "EDAi",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#EDA i:uint4",
        "prefix": "EDA",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "register" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [],
          "registers": [
            { "type": "variable", "var_name": "i" },
            { "type": "constant", "index": 0 }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            { "type": "constant", "index": 0 }
          ]
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 873,
          "function_name": "exec_savealt_ctr"
        }
      ]
    },
    {
      "mnemonic": "SWAP2",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `2 2 BLKSWAP` or to `s3 s2 XCHG2`.",
        "gas": "18",
        "fift": "SWAP2\n2SWAP",
        "fift_examples": [],
        "opcode": "5A",
        "stack": "a b c d - c d a b"
      },
      "bytecode": { "tlb": "#5A", "prefix": "5A", "operands": [] },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 326,
          "function_name": "exec_2swap"
        }
      ]
    },
    {
      "mnemonic": "EXECUTE",
      "since_version": 0,
      "doc": {
        "category": "cont_basic",
        "description": "_Calls_, or _executes_, continuation `c`.",
        "gas": "18",
        "fift": "EXECUTE\nCALLX",
        "fift_examples": [],
        "opcode": "D8",
        "stack": "c - "
      },
      "bytecode": { "tlb": "#D8", "prefix": "D8", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Continuation"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": {
        "branches": [
          {
            "type": "variable",
            "var_name": "c",
            "save": {
              "c0": {
                "type": "cc",
                "save": {
                  "c0": { "type": "register", "index": 0 }
                }
              }
            }
          }
        ],
        "nobranch": false
      },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 33,
          "function_name": "exec_execute"
        }
      ]
    },
    {
      "mnemonic": "UNTUPLE",
      "since_version": 0,
      "doc": {
        "category": "tuple",
        "description": "Unpacks a _Tuple_ `t=(x_1,...,x_n)` of length equal to `0 <= n <= 15`.\nIf `t` is not a _Tuple_, or if `|t| != n`, a type check exception is thrown.",
        "gas": "26+n",
        "fift": "[n] UNTUPLE",
        "fift_examples": [],
        "opcode": "6F2n",
        "stack": "t - x_1 ... x_n"
      },
      "bytecode": {
        "tlb": "#6F2 n:uint4",
        "prefix": "6F2",
        "operands": [
          {
            "name": "n",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": [
                "Tuple"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "array",
              "name": "tuple_elements",
              "length_var": "n",
              "array_entry": [
                { "type": "simple", "name": "x" }
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tupleops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tupleops.cpp",
          "line": 158,
          "function_name": "exec_untuple"
        }
      ]
    },
    {
      "mnemonic": "MULRSHIFT",
      "since_version": 0,
      "doc": {
        "category": "arithm_div",
        "description": "",
        "gas": "34",
        "fift": "[tt+1] MULRSHIFT#",
        "fift_examples": [],
        "opcode": "A9B4tt",
        "stack": "x y - floor(x*y/2^(tt+1))"
      },
      "bytecode": {
        "tlb": "#A9B4 tt:uint8",
        "prefix": "A9B4",
        "operands": [
          {
            "name": "t",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 231,
          "function_name": "exec_mul"
        }
      ]
    },
    {
      "mnemonic": "DEBUG",
      "since_version": 0,
      "doc": {
        "category": "debug",
        "description": "",
        "gas": "26",
        "fift": "{i*16+j} DEBUG",
        "fift_examples": [],
        "opcode": "FEij",
        "stack": "-"
      },
      "bytecode": {
        "tlb": "#FE i:(#<= 14) j:(## 4)",
        "prefix": "FE",
        "operands_range_check": { "length": 4, "from": 0, "to": 14 },
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 14,
            "display_hints": []
          },
          {
            "name": "j",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "debugops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/debugops.cpp",
          "line": 0,
          "function_name": "exec_debug"
        }
      ]
    },
    {
      "mnemonic": "IFREF",
      "since_version": 0,
      "doc": {
        "category": "cont_conditional",
        "description": "Equivalent to `PUSHREFCONT` `IF`, with the optimization that the cell reference is not actually loaded into a _Slice_ and then converted into an ordinary _Continuation_ if `f=0`.\nGas consumption of this primitive depends on whether `f=0` and whether the reference was loaded before.\nSimilar remarks apply other primitives that accept a continuation as a reference.",
        "gas": "26/126/51",
        "fift": "[ref] IFREF",
        "fift_examples": [],
        "opcode": "E300",
        "stack": "f - "
      },
      "bytecode": {
        "tlb": "#E300 c:^Cell",
        "prefix": "E300",
        "operands": [
          {
            "name": "c",
            "type": "ref",
            "display_hints": [
              { "type": "continuation" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": {
        "branches": [
          {
            "type": "variable",
            "var_name": "c",
            "save": {
              "c0": {
                "type": "cc",
                "save": {
                  "c0": { "type": "register", "index": 0 }
                }
              }
            }
          }
        ],
        "nobranch": true
      },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 369,
          "function_name": "exec_ifret"
        }
      ]
    },
    {
      "mnemonic": "PUSHREFCONT",
      "since_version": 0,
      "doc": {
        "category": "const_data",
        "description": "Similar to `PUSHREFSLICE`, but makes a simple ordinary _Continuation_ out of the cell.",
        "gas": "118/43",
        "fift": "[ref] PUSHREFCONT",
        "fift_examples": [],
        "opcode": "8A",
        "stack": "- cont"
      },
      "bytecode": {
        "tlb": "#8A c:^Cell",
        "prefix": "8A",
        "operands": [
          {
            "name": "c",
            "type": "ref",
            "display_hints": [
              { "type": "continuation" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Continuation"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 32,
          "function_name": "exec_push_ref"
        }
      ]
    },
    {
      "mnemonic": "INDEX",
      "since_version": 0,
      "doc": {
        "category": "tuple",
        "description": "Returns the `k`-th element of a _Tuple_ `t`.\n`0 <= k <= 15`.",
        "gas": "26",
        "fift": "[k] INDEX",
        "fift_examples": [],
        "opcode": "6F1k",
        "stack": "t - x"
      },
      "bytecode": {
        "tlb": "#6F1 k:uint4",
        "prefix": "6F1",
        "operands": [
          {
            "name": "k",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": [
                "Tuple"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            { "type": "simple", "name": "x" }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tupleops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tupleops.cpp",
          "line": 106,
          "function_name": "exec_tuple_index"
        }
      ]
    },
    {
      "mnemonic": "MULDIV",
      "since_version": 0,
      "doc": {
        "category": "arithm_div",
        "description": "`q=floor(x*y/z)`",
        "gas": "26",
        "fift": "MULDIV",
        "fift_examples": [],
        "opcode": "A984",
        "stack": "x y z - q"
      },
      "bytecode": { "tlb": "#A984", "prefix": "A984", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 231,
          "function_name": "exec_mul"
        }
      ]
    },
    {
      "mnemonic": "PUSHREFSLICE",
      "since_version": 0,
      "doc": {
        "category": "const_data",
        "description": "Similar to `PUSHREF`, but converts the cell into a _Slice_.",
        "gas": "118/43",
        "fift": "[ref] PUSHREFSLICE",
        "fift_examples": [],
        "opcode": "89",
        "stack": "- s"
      },
      "bytecode": {
        "tlb": "#89 c:^Cell",
        "prefix": "89",
        "operands": [
          { "name": "c", "type": "ref", "display_hints": [] }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 32,
          "function_name": "exec_push_ref"
        }
      ]
    },
    {
      "mnemonic": "NEQ",
      "since_version": 0,
      "doc": {
        "category": "compare_int",
        "description": "Equivalent to `EQUAL` `NOT`.",
        "gas": "18",
        "fift": "NEQ",
        "fift_examples": [],
        "opcode": "BD",
        "stack": "x y - x!=y"
      },
      "bytecode": { "tlb": "#BD", "prefix": "BD", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 975,
          "function_name": "exec_cmp"
        }
      ]
    },
    {
      "mnemonic": "RSHIFT",
      "since_version": 0,
      "doc": {
        "category": "arithm_logical",
        "description": "`0 <= cc <= 255`",
        "gas": "18",
        "fift": "[cc+1] RSHIFT#",
        "fift_examples": [],
        "opcode": "ABcc",
        "stack": "x - floor(x/2^(cc+1))"
      },
      "bytecode": {
        "tlb": "#AB cc:uint8",
        "prefix": "AB",
        "operands": [
          {
            "name": "c",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 749,
          "function_name": "exec_rshift"
        }
      ]
    },
    {
      "mnemonic": "DICTUSETREF",
      "since_version": 0,
      "doc": {
        "category": "dict_set",
        "description": "Similar to `DICTISETREF`, but with `i` unsigned.",
        "gas": "",
        "fift": "DICTUSETREF",
        "fift_examples": [],
        "opcode": "F417",
        "stack": "c i D n - D'"
      },
      "bytecode": { "tlb": "#F417", "prefix": "F417", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell"
              ]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 271,
          "function_name": "exec_dict_set"
        }
      ]
    },
    {
      "mnemonic": "STUX",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Stores an unsigned `l`-bit integer `x` into `b` for `0 <= l <= 256`.",
        "gas": "26",
        "fift": "STUX",
        "fift_examples": [],
        "opcode": "CF01",
        "stack": "x b l - b'"
      },
      "bytecode": { "tlb": "#CF01", "prefix": "CF01", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 599,
          "function_name": "exec_store_int_var"
        }
      ]
    },
    {
      "mnemonic": "ADDCONST",
      "since_version": 0,
      "doc": {
        "category": "arithm_basic",
        "description": "`-128 <= cc <= 127`.",
        "gas": "26",
        "fift": "[cc] ADDCONST\n[cc] ADDINT\n[-cc] SUBCONST\n[-cc] SUBINT",
        "fift_examples": [],
        "opcode": "A6cc",
        "stack": "x - x+cc"
      },
      "bytecode": {
        "tlb": "#A6 cc:int8",
        "prefix": "A6",
        "operands": [
          {
            "name": "c",
            "type": "int",
            "size": 8,
            "min_value": -128,
            "max_value": 127,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 213,
          "function_name": "exec_add_tinyint8"
        }
      ]
    },
    {
      "mnemonic": "DICTUSETB",
      "since_version": 0,
      "doc": {
        "category": "dict_set_builder",
        "description": "",
        "gas": "",
        "fift": "DICTUSETB",
        "fift_examples": [],
        "opcode": "F443",
        "stack": "b i D n - D'"
      },
      "bytecode": { "tlb": "#F443", "prefix": "F443", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 271,
          "function_name": "exec_dict_set"
        }
      ]
    },
    {
      "mnemonic": "MIN",
      "since_version": 0,
      "doc": {
        "category": "arithm_logical",
        "description": "Computes the minimum of two integers `x` and `y`.",
        "gas": "26",
        "fift": "MIN",
        "fift_examples": [],
        "opcode": "B608",
        "stack": "x y - x or y"
      },
      "bytecode": { "tlb": "#B608", "prefix": "B608", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 914,
          "function_name": "exec_minmax"
        }
      ]
    },
    {
      "mnemonic": "TUCK",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `SWAP` `OVER` or to `s1 s1 XCPU`.",
        "gas": "18",
        "fift": "TUCK",
        "fift_examples": [],
        "opcode": "66",
        "stack": "a b - b a b"
      },
      "bytecode": { "tlb": "#66", "prefix": "66", "operands": [] },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 474,
          "function_name": "exec_tuck"
        }
      ]
    },
    {
      "mnemonic": "DUP2",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `s1 s0 PUSH2`.",
        "gas": "18",
        "fift": "DUP2\n2DUP",
        "fift_examples": [],
        "opcode": "5C",
        "stack": "a b - a b a b"
      },
      "bytecode": { "tlb": "#5C", "prefix": "5C", "operands": [] },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 344,
          "function_name": "exec_2dup"
        }
      ]
    },
    {
      "mnemonic": "IFNOTJMP",
      "since_version": 0,
      "doc": {
        "category": "cont_conditional",
        "description": "Jumps to `c` (similarly to `JMPX`), but only if `f` is zero.",
        "gas": "18",
        "fift": "IFNOTJMP",
        "fift_examples": [
          { "fift": "IFNOTJMP:<{ code }>", "description": "Equivalent to `<{ code }> CONT` `IFNOTJMP`." }
        ],
        "opcode": "E1",
        "stack": "f c - "
      },
      "bytecode": { "tlb": "#E1", "prefix": "E1", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Continuation"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": {
        "branches": [
          { "type": "variable", "var_name": "c" }
        ],
        "nobranch": true
      },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 358,
          "function_name": "exec_ifnot_jmp"
        }
      ]
    },
    {
      "mnemonic": "DICTGET",
      "since_version": 0,
      "doc": {
        "category": "dict_get",
        "description": "Looks up key `k` (represented by a _Slice_, the first `0 <= n <= 1023` data bits of which are used as a key) in dictionary `D` of type `HashmapE(n,X)` with `n`-bit keys.\nOn success, returns the value found as a _Slice_ `x`.",
        "gas": "",
        "fift": "DICTGET",
        "fift_examples": [],
        "opcode": "F40A",
        "stack": "k D n - x -1 or 0"
      },
      "bytecode": { "tlb": "#F40A", "prefix": "F40A", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "k",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                { "value": 0, "stack": [] },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": [
                        "Slice"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 207,
          "function_name": "exec_dict_get"
        }
      ]
    },
    {
      "mnemonic": "IFREFELSEREF",
      "since_version": 0,
      "doc": {
        "category": "cont_conditional",
        "description": "Equivalent to `PUSHREFCONT` `PUSHREFCONT` `IFELSE`.",
        "gas": "126/51",
        "fift": "[ref] [ref] IFREFELSEREF",
        "fift_examples": [],
        "opcode": "E30F",
        "stack": "f -"
      },
      "bytecode": {
        "tlb": "#E30F c1:^Cell c2:^Cell",
        "prefix": "E30F",
        "operands": [
          {
            "name": "c1",
            "type": "ref",
            "display_hints": [
              { "type": "continuation" }
            ]
          },
          {
            "name": "c2",
            "type": "ref",
            "display_hints": [
              { "type": "continuation" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": {
        "branches": [
          {
            "type": "variable",
            "var_name": "c1",
            "save": {
              "c0": {
                "type": "cc",
                "save": {
                  "c0": { "type": "register", "index": 0 }
                }
              }
            }
          },
          {
            "type": "variable",
            "var_name": "c2",
            "save": {
              "c0": {
                "type": "cc",
                "save": {
                  "c0": { "type": "register", "index": 0 }
                }
              }
            }
          }
        ],
        "nobranch": false
      },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 193,
          "function_name": "exec_ifref_elseref"
        }
      ]
    },
    {
      "mnemonic": "PU2XC",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `s[i] PUSH` `SWAP` `s[j] s[k-1] PUXC`.",
        "gas": "34",
        "fift": "s[i] s[j-1] s[k-2] PU2XC",
        "fift_examples": [],
        "opcode": "546ijk",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#546 i:uint4 j:uint4 k:uint4",
        "prefix": "546",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "j",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" },
              { "type": "add", "value": 1 }
            ]
          },
          {
            "name": "k",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" },
              { "type": "add", "value": 2 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 249,
          "function_name": "exec_puxc2"
        }
      ]
    },
    {
      "mnemonic": "DICTUGETREF",
      "since_version": 0,
      "doc": {
        "category": "dict_get",
        "description": "Similar to `DICTIGETREF`, but with an unsigned `n`-bit _Integer_ key `i`.",
        "gas": "",
        "fift": "DICTUGETREF",
        "fift_examples": [],
        "opcode": "F40F",
        "stack": "i D n - c -1 or 0"
      },
      "bytecode": { "tlb": "#F40F", "prefix": "F40F", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Cell",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                { "value": 0, "stack": [] },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "c",
                      "value_types": [
                        "Cell"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 247,
          "function_name": "exec_dict_get_optref"
        }
      ]
    },
    {
      "mnemonic": "XCPU2",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `s[i] XCHG0` `s[j] s[k] PUSH2`.",
        "gas": "34",
        "fift": "s[i] s[j] s[k] XCPU2",
        "fift_examples": [],
        "opcode": "543ijk",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#543 i:uint4 j:uint4 k:uint4",
        "prefix": "543",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "j",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "k",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 215,
          "function_name": "exec_xc2pu"
        }
      ]
    },
    {
      "mnemonic": "NULLSWAPIFNOT2",
      "since_version": 0,
      "doc": {
        "category": "tuple",
        "description": "Pushes two nulls under the topmost _Integer_ `x`, but only if `x=0`.\nEquivalent to `NULLSWAPIFNOT` `NULLSWAPIFNOT`.",
        "gas": "26",
        "fift": "NULLSWAPIFNOT2",
        "fift_examples": [],
        "opcode": "6FA5",
        "stack": "x - x or null null x"
      },
      "bytecode": { "tlb": "#6FA5", "prefix": "6FA5", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "x",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    { "type": "const", "value": null, "value_type": "Null" },
                    { "type": "const", "value": null, "value_type": "Null" }
                  ]
                }
              ],
              "else": []
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tupleops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tupleops.cpp",
          "line": 56,
          "function_name": "exec_null_swap_if_many"
        }
      ]
    },
    {
      "mnemonic": "MULDIVR",
      "since_version": 0,
      "doc": {
        "category": "arithm_div",
        "description": "`q'=round(x*y/z)`",
        "gas": "26",
        "fift": "MULDIVR",
        "fift_examples": [],
        "opcode": "A985",
        "stack": "x y z - q'"
      },
      "bytecode": { "tlb": "#A985", "prefix": "A985", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 231,
          "function_name": "exec_mul"
        }
      ]
    },
    {
      "mnemonic": "IFELSEREF",
      "since_version": 0,
      "doc": {
        "category": "cont_conditional",
        "description": "Equivalent to `PUSHREFCONT` `IFELSE`.",
        "gas": "26/126/51",
        "fift": "[ref] IFELSEREF",
        "fift_examples": [],
        "opcode": "E30E",
        "stack": "f c -"
      },
      "bytecode": {
        "tlb": "#E30E c:^Cell",
        "prefix": "E30E",
        "operands": [
          {
            "name": "c",
            "type": "ref",
            "display_hints": [
              { "type": "continuation" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "c2",
              "value_types": [
                "Continuation"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": {
        "branches": [
          {
            "type": "variable",
            "var_name": "c",
            "save": {
              "c0": {
                "type": "cc",
                "save": {
                  "c0": { "type": "register", "index": 0 }
                }
              }
            }
          },
          {
            "type": "variable",
            "var_name": "c2",
            "save": {
              "c0": {
                "type": "cc",
                "save": {
                  "c0": { "type": "register", "index": 0 }
                }
              }
            }
          }
        ],
        "nobranch": false
      },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 174,
          "function_name": "exec_ifelse_ref"
        }
      ]
    },
    {
      "mnemonic": "IFRET",
      "since_version": 0,
      "doc": {
        "category": "cont_conditional",
        "description": "Performs a `RET`, but only if integer `f` is non-zero. If `f` is a `NaN`, throws an integer overflow exception.",
        "gas": "18",
        "fift": "IFRET\nIFNOT:",
        "fift_examples": [],
        "opcode": "DC",
        "stack": "f - "
      },
      "bytecode": { "tlb": "#DC", "prefix": "DC", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": {
        "branches": [
          { "type": "register", "index": 0 }
        ],
        "nobranch": true
      },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 369,
          "function_name": "exec_ifret"
        }
      ]
    },
    {
      "mnemonic": "IFNOT",
      "since_version": 0,
      "doc": {
        "category": "cont_conditional",
        "description": "Executes continuation `c`, but only if integer `f` is zero. Otherwise simply discards both values.",
        "gas": "18",
        "fift": "IFNOT",
        "fift_examples": [
          { "fift": "IFNOT:<{ code }> <{ code }>IFNOT", "description": "Equivalent to `<{ code }> CONT` `IFNOT`." }
        ],
        "opcode": "DF",
        "stack": "f c - "
      },
      "bytecode": { "tlb": "#DF", "prefix": "DF", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Continuation"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": {
        "branches": [
          {
            "type": "variable",
            "var_name": "c",
            "save": {
              "c0": {
                "type": "cc",
                "save": {
                  "c0": { "type": "register", "index": 0 }
                }
              }
            }
          }
        ],
        "nobranch": true
      },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 336,
          "function_name": "exec_ifnot"
        }
      ]
    },
    {
      "mnemonic": "GETGASFEE",
      "since_version": 6,
      "doc": {
        "category": "app_config",
        "description": "Calculates gas fee",
        "gas": "",
        "fift": "GETGASFEE",
        "fift_examples": [],
        "opcode": "F836",
        "stack": "gas_used is_mc - price"
      },
      "bytecode": { "tlb": "#F836", "prefix": "F836", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "gas_used",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "is_mc",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": [
            { "type": "constant", "index": 7 }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "price",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "get_gas_fee"
        }
      ]
    },
    {
      "mnemonic": "REPEAT",
      "since_version": 0,
      "doc": {
        "category": "cont_loops",
        "description": "Executes continuation `c` `n` times, if integer `n` is non-negative. If `n>=2^31` or `n<-2^31`, generates a range check exception.\nNotice that a `RET` inside the code of `c` works as a `continue`, not as a `break`. One should use either alternative (experimental) loops or alternative `RETALT` (along with a `SETEXITALT` before the loop) to `break` out of a loop.",
        "gas": "18",
        "fift": "REPEAT",
        "fift_examples": [
          { "fift": "REPEAT:<{ code }> <{ code }>REPEAT", "description": "Equivalent to `<{ code }> CONT` `REPEAT`." }
        ],
        "opcode": "E4",
        "stack": "n c - "
      },
      "bytecode": { "tlb": "#E4", "prefix": "E4", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Continuation"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": {
        "branches": [
          {
            "type": "special",
            "name": "repeat",
            "args": {
              "count": "n",
              "body": { "type": "variable", "var_name": "c" },
              "after": {
                "type": "cc",
                "save": {
                  "c0": { "type": "register", "index": 0 }
                }
              }
            }
          }
        ],
        "nobranch": true
      },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 489,
          "function_name": "exec_repeat"
        }
      ]
    },
    {
      "mnemonic": "BBITS",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Returns the number of data bits already stored in _Builder_ `b`.",
        "gas": "26",
        "fift": "BBITS",
        "fift_examples": [],
        "opcode": "CF31",
        "stack": "b - x"
      },
      "bytecode": { "tlb": "#CF31", "prefix": "CF31", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 837,
          "function_name": "exec_int_builder_func"
        }
      ]
    },
    {
      "mnemonic": "RAWRESERVE",
      "since_version": 0,
      "doc": {
        "category": "app_actions",
        "description": "Creates an output action which would reserve exactly `x` nanograms (if `y=0`), at most `x` nanograms (if `y=2`), or all but `x` nanograms (if `y=1` or `y=3`), from the remaining balance of the account. It is roughly equivalent to creating an outbound message carrying `x` nanograms (or `b-x` nanograms, where `b` is the remaining balance) to oneself, so that the subsequent output actions would not be able to spend more money than the remainder. Bit `+2` in `y` means that the external action does not fail if the specified amount cannot be reserved; instead, all remaining balance is reserved. Bit `+8` in `y` means `x:=-x` before performing any further actions. Bit `+4` in `y` means that `x` is increased by the original balance of the current account (before the compute phase), including all extra currencies, before performing any other checks and actions. Currently `x` must be a non-negative integer, and `y` must be in the range `0...15`.",
        "gas": "526",
        "fift": "RAWRESERVE",
        "fift_examples": [],
        "opcode": "FB02",
        "stack": "x y - "
      },
      "bytecode": { "tlb": "#FB02", "prefix": "FB02", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": [
            { "type": "constant", "index": 5 }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            { "type": "constant", "index": 5 }
          ]
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "rawreserve"
        }
      ]
    },
    {
      "mnemonic": "PUXC2",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `s[i] PUSH` `s2 XCHG0` `s[j] s[k] XCHG2`.",
        "gas": "34",
        "fift": "s[i] s[j-1] s[k-1] PUXC2",
        "fift_examples": [],
        "opcode": "544ijk",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#544 i:uint4 j:uint4 k:uint4",
        "prefix": "544",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "j",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" },
              { "type": "add", "value": 1 }
            ]
          },
          {
            "name": "k",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" },
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 249,
          "function_name": "exec_puxc2"
        }
      ]
    },
    {
      "mnemonic": "SETCONTCTR",
      "since_version": 0,
      "doc": {
        "category": "cont_registers",
        "description": "Stores `x` into the savelist of continuation `c` as `c(i)`, and returns the resulting continuation `c'`. Almost all operations with continuations may be expressed in terms of `SETCONTCTR`, `POPCTR`, and `PUSHCTR`.",
        "gas": "26",
        "fift": "c[i] SETCONT\nc[i] SETCONTCTR",
        "fift_examples": [],
        "opcode": "ED6i",
        "stack": "x c - c'"
      },
      "bytecode": {
        "tlb": "#ED6 i:uint4",
        "prefix": "ED6",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "register" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            { "type": "simple", "name": "x" },
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Continuation"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c2",
              "value_types": [
                "Continuation"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 807,
          "function_name": "exec_setcont_ctr"
        }
      ]
    },
    {
      "mnemonic": "STBR",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Concatenates two builders.\nEquivalent to `SWAP` `STB`.",
        "gas": "26",
        "fift": "STBR\nBCONCAT",
        "fift_examples": [],
        "opcode": "CF17",
        "stack": "b b' - b''"
      },
      "bytecode": { "tlb": "#CF17", "prefix": "CF17", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            },
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b3",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 576,
          "function_name": "exec_store_builder_rev"
        }
      ]
    },
    {
      "mnemonic": "SREFS",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Returns the number of references in _Slice_ `s`.",
        "gas": "26",
        "fift": "SREFS",
        "fift_examples": [],
        "opcode": "D74A",
        "stack": "s - r"
      },
      "bytecode": { "tlb": "#D74A", "prefix": "D74A", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "r",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1308,
          "function_name": "exec_slice_bits_refs"
        }
      ]
    },
    {
      "mnemonic": "DICTUSET",
      "since_version": 0,
      "doc": {
        "category": "dict_set",
        "description": "Similar to `DICTISET`, but with `i` an _unsigned_ `n`-bit integer.",
        "gas": "",
        "fift": "DICTUSET",
        "fift_examples": [],
        "opcode": "F416",
        "stack": "x i D n - D'"
      },
      "bytecode": { "tlb": "#F416", "prefix": "F416", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 271,
          "function_name": "exec_dict_set"
        }
      ]
    },
    {
      "mnemonic": "COMMIT",
      "since_version": 0,
      "doc": {
        "category": "app_gas",
        "description": "Commits the current state of registers `c4` (''persistent data'') and `c5` (''actions'') so that the current execution is considered ''successful'' with the saved values even if an exception is thrown later.",
        "gas": "26",
        "fift": "COMMIT",
        "fift_examples": [],
        "opcode": "F80F",
        "stack": "-"
      },
      "bytecode": { "tlb": "#F80F", "prefix": "F80F", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [],
          "registers": [
            { "type": "constant", "index": 4 },
            { "type": "constant", "index": 5 }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            { "type": "special", "name": "cstate" }
          ]
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "commit"
        }
      ]
    },
    {
      "mnemonic": "MULCONST",
      "since_version": 0,
      "doc": {
        "category": "arithm_basic",
        "description": "`-128 <= cc <= 127`.",
        "gas": "26",
        "fift": "[cc] MULCONST\n[cc] MULINT",
        "fift_examples": [],
        "opcode": "A7cc",
        "stack": "x - x*cc"
      },
      "bytecode": {
        "tlb": "#A7 cc:int8",
        "prefix": "A7",
        "operands": [
          {
            "name": "c",
            "type": "int",
            "size": 8,
            "min_value": -128,
            "max_value": 127,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 222,
          "function_name": "exec_mul_tinyint8"
        }
      ]
    },
    {
      "mnemonic": "THROWANYIF",
      "since_version": 0,
      "doc": {
        "category": "exceptions",
        "description": "Throws exception `0 <= n < 2^16` with parameter zero only if `f!=0`.",
        "gas": "26/76",
        "fift": "THROWANYIF",
        "fift_examples": [],
        "opcode": "F2F2",
        "stack": "n f - "
      },
      "bytecode": { "tlb": "#F2F2", "prefix": "F2F2", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "f",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 1153,
          "function_name": "exec_throw_any"
        }
      ]
    },
    {
      "mnemonic": "ADDRAND",
      "since_version": 0,
      "doc": {
        "category": "app_rnd",
        "description": "Mixes unsigned 256-bit _Integer_ `x` into the random seed `r` by setting the random seed to `Sha` of the concatenation of two 32-byte strings: the first with the big-endian representation of the old seed `r`, and the second with the big-endian representation of `x`.",
        "gas": "26",
        "fift": "ADDRAND\nRANDOMIZE",
        "fift_examples": [],
        "opcode": "F815",
        "stack": "x - "
      },
      "bytecode": { "tlb": "#F815", "prefix": "F815", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": [
            { "type": "constant", "index": 7 }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            { "type": "constant", "index": 7 }
          ]
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "add_rand"
        }
      ]
    },
    {
      "mnemonic": "PUSHREF",
      "since_version": 0,
      "doc": {
        "category": "const_data",
        "description": "Pushes the reference `ref` into the stack.\n_Details:_ Pushes the first reference of `cc.code` into the stack as a _Cell_ (and removes this reference from the current continuation).",
        "gas": "18",
        "fift": "[ref] PUSHREF",
        "fift_examples": [],
        "opcode": "88",
        "stack": "- c"
      },
      "bytecode": {
        "tlb": "#88 c:^Cell",
        "prefix": "88",
        "operands": [
          { "name": "c", "type": "ref", "display_hints": [] }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Cell"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 32,
          "function_name": "exec_push_ref"
        }
      ]
    },
    {
      "mnemonic": "PLDDICT",
      "since_version": 0,
      "doc": {
        "category": "dict_serial",
        "description": "Preloads a dictionary `D` from _Slice_ `s`.\nApproximately equivalent to `LDDICT` `DROP`.",
        "gas": "26",
        "fift": "PLDDICT\nPLDOPTREF",
        "fift_examples": [],
        "opcode": "F405",
        "stack": "s - D"
      },
      "bytecode": { "tlb": "#F405", "prefix": "F405", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 148,
          "function_name": "exec_load_dict"
        }
      ]
    },
    {
      "mnemonic": "CONFIGOPTPARAM",
      "since_version": 0,
      "doc": {
        "category": "app_config",
        "description": "Returns the value of the global configuration parameter with integer index `i` as a _Maybe Cell_ `c^?`.\nEquivalent to `CONFIGDICT` `DICTIGETOPTREF`.",
        "gas": "",
        "fift": "CONFIGOPTPARAM",
        "fift_examples": [],
        "opcode": "F833",
        "stack": "i - c^?"
      },
      "bytecode": { "tlb": "#F833", "prefix": "F833", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": [
            { "type": "constant", "index": 7 }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell",
                "Null"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "get_config_opt_param"
        }
      ]
    },
    {
      "mnemonic": "DEC",
      "since_version": 0,
      "doc": {
        "category": "arithm_basic",
        "description": "Equivalent to `-1 ADDCONST`.",
        "gas": "18",
        "fift": "DEC",
        "fift_examples": [],
        "opcode": "A5",
        "stack": "x - x-1"
      },
      "bytecode": { "tlb": "#A5", "prefix": "A5", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 205,
          "function_name": "exec_dec"
        }
      ]
    },
    {
      "mnemonic": "THROW",
      "since_version": 0,
      "doc": {
        "category": "exceptions",
        "description": "For `0 <= n < 2^11`, an encoding of `[n] THROW` for larger values of `n`.",
        "gas": "84",
        "fift": "[n] THROW",
        "fift_examples": [],
        "opcode": "F2C4_n",
        "stack": "- 0 nn"
      },
      "bytecode": {
        "tlb": "#F2C4_ n:uint11",
        "prefix": "F2C4_",
        "operands": [
          {
            "name": "n",
            "type": "uint",
            "size": 11,
            "min_value": 0,
            "max_value": 2047,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": false },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 1130,
          "function_name": "exec_throw_fixed"
        }
      ]
    },
    {
      "mnemonic": "TPUSH",
      "since_version": 0,
      "doc": {
        "category": "tuple",
        "description": "Appends a value `x` to a _Tuple_ `t=(x_1,...,x_n)`, but only if the resulting _Tuple_ `t'=(x_1,...,x_n,x)` is of length at most 255. Otherwise throws a type check exception.",
        "gas": "26+|t'|",
        "fift": "TPUSH\nCOMMA",
        "fift_examples": [],
        "opcode": "6F8C",
        "stack": "t x - t'"
      },
      "bytecode": { "tlb": "#6F8C", "prefix": "6F8C", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": [
                "Tuple"
              ]
            },
            { "type": "simple", "name": "x" }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t2",
              "value_types": [
                "Tuple"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tupleops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tupleops.cpp",
          "line": 296,
          "function_name": "exec_tuple_push"
        }
      ]
    },
    {
      "mnemonic": "GETFORWARDFEE",
      "since_version": 6,
      "doc": {
        "category": "app_config",
        "description": "Calculates forward fee.",
        "gas": "",
        "fift": "GETFORWARDFEE",
        "fift_examples": [],
        "opcode": "F838",
        "stack": "cells bits is_mc - price"
      },
      "bytecode": { "tlb": "#F838", "prefix": "F838", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "cells",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "bits",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "is_mc",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": [
            { "type": "constant", "index": 7 }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "price",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "get_forward_fee"
        }
      ]
    },
    {
      "mnemonic": "REVERSE",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Reverses the order of `s[j+i+1] ... s[j]`.",
        "gas": "26",
        "fift": "[i+2] [j] REVERSE",
        "fift_examples": [],
        "opcode": "5Eij",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#5E i:uint4 j:uint4",
        "prefix": "5E",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": []
          },
          {
            "name": "j",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 362,
          "function_name": "exec_reverse"
        }
      ]
    },
    {
      "mnemonic": "DICTUMIN",
      "since_version": 0,
      "doc": {
        "category": "dict_min",
        "description": "Similar to `DICTMIN`, but returns the key as an unsigned `n`-bit _Integer_ `i`.",
        "gas": "",
        "fift": "DICTUMIN",
        "fift_examples": [],
        "opcode": "F486",
        "stack": "D n - x i -1 or 0"
      },
      "bytecode": { "tlb": "#F486", "prefix": "F486", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                { "value": 0, "stack": [] },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": [
                        "Slice"
                      ]
                    },
                    {
                      "type": "simple",
                      "name": "i",
                      "value_types": [
                        "Integer"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 470,
          "function_name": "exec_dict_getmin"
        }
      ]
    },
    {
      "mnemonic": "TLEN",
      "since_version": 0,
      "doc": {
        "category": "tuple",
        "description": "Returns the length of a _Tuple_.",
        "gas": "26",
        "fift": "TLEN",
        "fift_examples": [],
        "opcode": "6F88",
        "stack": "t - n"
      },
      "bytecode": { "tlb": "#6F88", "prefix": "6F88", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": [
                "Tuple"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tupleops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tupleops.cpp",
          "line": 265,
          "function_name": "exec_tuple_length"
        }
      ]
    },
    {
      "mnemonic": "DICTUGETOPTREF",
      "since_version": 0,
      "doc": {
        "category": "dict_mayberef",
        "description": "`DICTGETOPTREF`, but with `i` an unsigned `n`-bit integer. If the key `i` is out of range, also returns _Null_.",
        "gas": "",
        "fift": "DICTUGETOPTREF",
        "fift_examples": [],
        "opcode": "F46B",
        "stack": "i D n - c^?"
      },
      "bytecode": { "tlb": "#F46B", "prefix": "F46B", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell",
                "Null"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 247,
          "function_name": "exec_dict_get_optref"
        }
      ]
    },
    {
      "mnemonic": "DICTUDEL",
      "since_version": 0,
      "doc": {
        "category": "dict_delete",
        "description": "Similar to `DICTIDEL`, but with `i` an unsigned `n`-bit integer.",
        "gas": "",
        "fift": "DICTUDEL",
        "fift_examples": [],
        "opcode": "F45B",
        "stack": "i D n - D' ?"
      },
      "bytecode": { "tlb": "#F45B", "prefix": "F45B", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": [
                        "Slice",
                        "Null"
                      ]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": [
                        "Slice",
                        "Null"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 374,
          "function_name": "exec_dict_delete"
        }
      ]
    },
    {
      "mnemonic": "MOD",
      "since_version": 0,
      "doc": {
        "category": "arithm_div",
        "description": "",
        "gas": "26",
        "fift": "MOD",
        "fift_examples": [],
        "opcode": "A908",
        "stack": "x y - r"
      },
      "bytecode": { "tlb": "#A908", "prefix": "A908", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 266,
          "function_name": "exec_divmod"
        }
      ]
    },
    {
      "mnemonic": "SDEMPTY",
      "since_version": 0,
      "doc": {
        "category": "compare_other",
        "description": "Checks whether _Slice_ `s` has no bits of data.",
        "gas": "26",
        "fift": "SDEMPTY",
        "fift_examples": [],
        "opcode": "C701",
        "stack": "s - ?"
      },
      "bytecode": { "tlb": "#C701", "prefix": "C701", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 315,
          "function_name": "exec_un_cs_cmp"
        }
      ]
    },
    {
      "mnemonic": "MODPOW2",
      "since_version": 0,
      "doc": {
        "category": "arithm_div",
        "description": "",
        "gas": "34",
        "fift": "[tt+1] MODPOW2#",
        "fift_examples": [],
        "opcode": "A938tt",
        "stack": "x - x mod 2^(tt+1)"
      },
      "bytecode": {
        "tlb": "#A938 tt:uint8",
        "prefix": "A938",
        "operands": [
          {
            "name": "t",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 758,
          "function_name": "exec_pow2"
        }
      ]
    },
    {
      "mnemonic": "DICTUDELGET",
      "since_version": 0,
      "doc": {
        "category": "dict_delete",
        "description": "`DICTDELGET`, but with `i` an unsigned `n`-bit integer.",
        "gas": "",
        "fift": "DICTUDELGET",
        "fift_examples": [],
        "opcode": "F466",
        "stack": "i D n - D' x -1 or D 0"
      },
      "bytecode": { "tlb": "#F466", "prefix": "F466", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": [
                        "Slice",
                        "Null"
                      ]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": [
                        "Slice",
                        "Null"
                      ]
                    },
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": [
                        "Slice"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 401,
          "function_name": "exec_dict_deleteget"
        }
      ]
    },
    {
      "mnemonic": "RAND",
      "since_version": 0,
      "doc": {
        "category": "app_rnd",
        "description": "Generates a new pseudo-random integer `z` in the range `0...y-1` (or `y...-1`, if `y<0`). More precisely, an unsigned random value `x` is generated as in `RAND256U`; then `z:=floor(x*y/2^256)` is computed.\nEquivalent to `RANDU256` `256 MULRSHIFT`.",
        "gas": "26+|c7|+|c1_1|",
        "fift": "RAND",
        "fift_examples": [],
        "opcode": "F811",
        "stack": "y - z"
      },
      "bytecode": { "tlb": "#F811", "prefix": "F811", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": [
            { "type": "constant", "index": 7 }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "z",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": [
            { "type": "constant", "index": 7 }
          ]
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "rand_int"
        }
      ]
    },
    {
      "mnemonic": "MAX",
      "since_version": 0,
      "doc": {
        "category": "arithm_logical",
        "description": "Computes the maximum of two integers `x` and `y`.",
        "gas": "26",
        "fift": "MAX",
        "fift_examples": [],
        "opcode": "B609",
        "stack": "x y - x or y"
      },
      "bytecode": { "tlb": "#B609", "prefix": "B609", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 914,
          "function_name": "exec_minmax"
        }
      ]
    },
    {
      "mnemonic": "LDSLICE",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Cuts the next `cc+1` bits of `s` into a separate _Slice_ `s''`.",
        "gas": "26",
        "fift": "[cc+1] LDSLICE",
        "fift_examples": [],
        "opcode": "D6cc",
        "stack": "s - s'' s'"
      },
      "bytecode": {
        "tlb": "#D6 cc:uint8",
        "prefix": "D6",
        "operands": [
          {
            "name": "c",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s3",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1127,
          "function_name": "exec_load_slice"
        }
      ]
    },
    {
      "mnemonic": "SKIPDICT",
      "since_version": 0,
      "doc": {
        "category": "dict_serial",
        "description": "Equivalent to `LDDICT` `NIP`.",
        "gas": "26",
        "fift": "SKIPDICT\nSKIPOPTREF",
        "fift_examples": [],
        "opcode": "F401",
        "stack": "s - s'"
      },
      "bytecode": { "tlb": "#F401", "prefix": "F401", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 82,
          "function_name": "exec_skip_dict"
        }
      ]
    },
    {
      "mnemonic": "RANDU256",
      "since_version": 0,
      "doc": {
        "category": "app_rnd",
        "description": "Generates a new pseudo-random unsigned 256-bit _Integer_ `x`. The algorithm is as follows: if `r` is the old value of the random seed, considered as a 32-byte array (by constructing the big-endian representation of an unsigned 256-bit integer), then its `sha512(r)` is computed; the first 32 bytes of this hash are stored as the new value `r'` of the random seed, and the remaining 32 bytes are returned as the next random value `x`.",
        "gas": "26+|c7|+|c1_1|",
        "fift": "RANDU256",
        "fift_examples": [],
        "opcode": "F810",
        "stack": "- x"
      },
      "bytecode": { "tlb": "#F810", "prefix": "F810", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [],
          "registers": [
            { "type": "constant", "index": 7 }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": [
            { "type": "constant", "index": 7 }
          ]
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "randu256"
        }
      ]
    },
    {
      "mnemonic": "COMPOSALT",
      "since_version": 0,
      "doc": {
        "category": "cont_registers",
        "description": "Computes the alternative composition `compose1(c, c')`, which has the meaning of ''perform `c`, and, if not successful, perform `c'`'' (if `c` is a boolean circuit). Equivalent to `SWAP` `c1 SETCONT`.",
        "gas": "26",
        "fift": "COMPOSALT\nBOOLOR",
        "fift_examples": [],
        "opcode": "EDF1",
        "stack": "c c' - c''"
      },
      "bytecode": { "tlb": "#EDF1", "prefix": "EDF1", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Continuation"
              ]
            },
            {
              "type": "simple",
              "name": "c2",
              "value_types": [
                "Continuation"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c3",
              "value_types": [
                "Continuation"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 961,
          "function_name": "exec_compos"
        }
      ]
    },
    {
      "mnemonic": "TRY",
      "since_version": 0,
      "doc": {
        "category": "exceptions",
        "description": "Sets `c2` to `c'`, first saving the old value of `c2` both into the savelist of `c'` and into the savelist of the current continuation, which is stored into `c.c0` and `c'.c0`. Then runs `c` similarly to `EXECUTE`. If `c` does not throw any exceptions, the original value of `c2` is automatically restored on return from `c`. If an exception occurs, the execution is transferred to `c'`, but the original value of `c2` is restored in the process, so that `c'` can re-throw the exception by `THROWANY` if it cannot handle it by itself.",
        "gas": "26",
        "fift": "TRY",
        "fift_examples": [
          { "fift": "TRY:<{ code1 }>CATCH<{ code2 }>", "description": "Equivalent to `<{ code1 }> CONT` `<{ code2 }> CONT` `TRY`." }
        ],
        "opcode": "F2FF",
        "stack": "c c' - "
      },
      "bytecode": { "tlb": "#F2FF", "prefix": "F2FF", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Continuation"
              ]
            },
            {
              "type": "simple",
              "name": "c2",
              "value_types": [
                "Continuation"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": {
        "branches": [
          {
            "type": "variable",
            "var_name": "c",
            "save": {
              "c0": {
                "type": "cc",
                "save": {
                  "c0": { "type": "register", "index": 0 },
                  "c1": { "type": "register", "index": 1 },
                  "c2": { "type": "register", "index": 2 }
                }
              },
              "c2": {
                "type": "variable",
                "var_name": "c2",
                "save": {
                  "c0": {
                    "type": "cc",
                    "save": {
                      "c0": { "type": "register", "index": 0 },
                      "c1": { "type": "register", "index": 1 },
                      "c2": { "type": "register", "index": 2 }
                    }
                  },
                  "c2": { "type": "register", "index": 2 }
                }
              }
            }
          }
        ],
        "nobranch": false
      },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 1186,
          "function_name": "exec_try"
        }
      ]
    },
    {
      "mnemonic": "THROW_SHORT",
      "since_version": 0,
      "doc": {
        "category": "exceptions",
        "description": "Throws exception `0 <= n <= 63` with parameter zero.\nIn other words, it transfers control to the continuation in `c2`, pushing `0` and `n` into its stack, and discarding the old stack altogether.",
        "gas": "76",
        "fift": "[n] THROW",
        "fift_examples": [],
        "opcode": "F22_n",
        "stack": " - 0 n"
      },
      "bytecode": {
        "tlb": "#F22_ n:uint6",
        "prefix": "F22_",
        "operands": [
          {
            "name": "n",
            "type": "uint",
            "size": 6,
            "min_value": 0,
            "max_value": 63,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": false },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 1130,
          "function_name": "exec_throw_fixed"
        }
      ]
    },
    {
      "mnemonic": "PLDI",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Preloads a signed `cc+1`-bit integer from _Slice_ `s`.",
        "gas": "34",
        "fift": "[cc+1] PLDI",
        "fift_examples": [],
        "opcode": "D70Acc",
        "stack": "s - x"
      },
      "bytecode": {
        "tlb": "#D70A cc:uint8",
        "prefix": "D70A",
        "operands": [
          {
            "name": "c",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1092,
          "function_name": "exec_load_int_fixed2"
        }
      ]
    },
    {
      "mnemonic": "DICTSETB",
      "since_version": 0,
      "doc": {
        "category": "dict_set_builder",
        "description": "",
        "gas": "",
        "fift": "DICTSETB",
        "fift_examples": [],
        "opcode": "F441",
        "stack": "b k D n - D'"
      },
      "bytecode": { "tlb": "#F441", "prefix": "F441", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 271,
          "function_name": "exec_dict_set"
        }
      ]
    },
    {
      "mnemonic": "SHA256U",
      "since_version": 0,
      "doc": {
        "category": "app_crypto",
        "description": "Computes `Sha` of the data bits of _Slice_ `s`. If the bit length of `s` is not divisible by eight, throws a cell underflow exception. The hash value is returned as a 256-bit unsigned integer `x`.",
        "gas": "26",
        "fift": "SHA256U",
        "fift_examples": [],
        "opcode": "F902",
        "stack": "s - x"
      },
      "bytecode": { "tlb": "#F902", "prefix": "F902", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "sha256u"
        }
      ]
    },
    {
      "mnemonic": "OVER2",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `s3 s2 PUSH2`.",
        "gas": "18",
        "fift": "OVER2\n2OVER",
        "fift_examples": [],
        "opcode": "5D",
        "stack": "a b c d - a b c d a b"
      },
      "bytecode": { "tlb": "#5D", "prefix": "5D", "operands": [] },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 353,
          "function_name": "exec_2over"
        }
      ]
    },
    {
      "mnemonic": "STVARINT16",
      "since_version": 0,
      "doc": {
        "category": "app_currency",
        "description": "Similar to `STVARUINT16`, but serializes a _signed_ _Integer_ `x` in the range `-2^119...2^119-1`.",
        "gas": "26",
        "fift": "STVARINT16",
        "fift_examples": [],
        "opcode": "FA03",
        "stack": "b x - b'"
      },
      "bytecode": { "tlb": "#FA03", "prefix": "FA03", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "stvarint16"
        }
      ]
    },
    {
      "mnemonic": "POW2",
      "since_version": 0,
      "doc": {
        "category": "arithm_logical",
        "description": "`0 <= y <= 1023`\nEquivalent to `ONE` `SWAP` `LSHIFT`.",
        "gas": "18",
        "fift": "POW2",
        "fift_examples": [],
        "opcode": "AE",
        "stack": "y - 2^y"
      },
      "bytecode": { "tlb": "#AE", "prefix": "AE", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 758,
          "function_name": "exec_pow2"
        }
      ]
    },
    {
      "mnemonic": "DICTUGETNEXT",
      "since_version": 0,
      "doc": {
        "category": "dict_next",
        "description": "Similar to `DICTGETNEXT`, but interprets all keys in dictionary `D` as big-endian unsigned `n`-bit integers, and computes the minimal key `i'` that is larger than _Integer_ `i` (which does not necessarily fit into `n` bits, and is not necessarily non-negative).",
        "gas": "",
        "fift": "DICTUGETNEXT",
        "fift_examples": [],
        "opcode": "F47C",
        "stack": "i D n - x' i' -1 or 0"
      },
      "bytecode": { "tlb": "#F47C", "prefix": "F47C", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                { "value": 0, "stack": [] },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x2",
                      "value_types": [
                        "Slice"
                      ]
                    },
                    {
                      "type": "simple",
                      "name": "i2",
                      "value_types": [
                        "Integer"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 523,
          "function_name": "exec_dict_getnear"
        }
      ]
    },
    {
      "mnemonic": "SETCONTVARARGS",
      "since_version": 0,
      "doc": {
        "category": "cont_stack",
        "description": "Similar to `SETCONTARGS`, but with `0 <= r <= 255` and `-1 <= n <= 255` taken from the stack.",
        "gas": "26+s''",
        "fift": "SETCONTVARARGS",
        "fift_examples": [],
        "opcode": "ED11",
        "stack": "x_1 x_2...x_r c r n - c'"
      },
      "bytecode": { "tlb": "#ED11", "prefix": "ED11", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "array",
              "name": "args",
              "length_var": "r",
              "array_entry": [
                { "type": "simple", "name": "x" }
              ]
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Continuation"
              ]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c2",
              "value_types": [
                "Continuation"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 678,
          "function_name": "exec_setcont_varargs"
        }
      ]
    },
    {
      "mnemonic": "SETCODE",
      "since_version": 0,
      "doc": {
        "category": "app_actions",
        "description": "Creates an output action that would change this smart contract code to that given by _Cell_ `c`. Notice that this change will take effect only after the successful termination of the current run of the smart contract.",
        "gas": "526",
        "fift": "SETCODE",
        "fift_examples": [],
        "opcode": "FB04",
        "stack": "c - "
      },
      "bytecode": { "tlb": "#FB04", "prefix": "FB04", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell"
              ]
            }
          ],
          "registers": [
            { "type": "constant", "index": 5 }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            { "type": "constant", "index": 5 }
          ]
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "setcode"
        }
      ]
    },
    {
      "mnemonic": "GETORIGINALFWDFEE",
      "since_version": 6,
      "doc": {
        "category": "app_config",
        "description": "Calculate `fwd_fee * 2^16 / first_frac`. Can be used to get the original `fwd_fee` of the message.",
        "gas": "",
        "fift": "GETORIGINALFWDFEE",
        "fift_examples": [],
        "opcode": "F83A",
        "stack": "fwd_fee is_mc - orig_fwd_fee"
      },
      "bytecode": { "tlb": "#F83A", "prefix": "F83A", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "fwd_fee",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "is_mc",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": [
            { "type": "constant", "index": 7 }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "orig_fwd_fee",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "get_original_fwd_fee"
        }
      ]
    },
    {
      "mnemonic": "SREMPTY",
      "since_version": 0,
      "doc": {
        "category": "compare_other",
        "description": "Checks whether _Slice_ `s` has no references.",
        "gas": "26",
        "fift": "SREMPTY",
        "fift_examples": [],
        "opcode": "C702",
        "stack": "s - ?"
      },
      "bytecode": { "tlb": "#C702", "prefix": "C702", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 316,
          "function_name": "exec_un_cs_cmp"
        }
      ]
    },
    {
      "mnemonic": "CALLXARGS_VAR",
      "since_version": 0,
      "doc": {
        "category": "cont_basic",
        "description": "_Calls_ continuation `c` with `0 <= p <= 15` parameters, expecting an arbitrary number of return values.",
        "gas": "26",
        "fift": "[p] -1 CALLXARGS",
        "fift_examples": [],
        "opcode": "DB0p",
        "stack": "c - "
      },
      "bytecode": {
        "tlb": "#DB0 p:uint4",
        "prefix": "DB0",
        "operands": [
          {
            "name": "p",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "array",
              "name": "args",
              "length_var": "p",
              "array_entry": [
                { "type": "simple", "name": "arg" }
              ]
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Continuation"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": {
        "branches": [
          {
            "type": "variable",
            "var_name": "c",
            "save": {
              "c0": {
                "type": "cc",
                "save": {
                  "c0": { "type": "register", "index": 0 }
                }
              }
            }
          }
        ],
        "nobranch": false
      },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 39,
          "function_name": "exec_callx_args"
        }
      ]
    },
    {
      "mnemonic": "IFNOTJMPREF",
      "since_version": 0,
      "doc": {
        "category": "cont_conditional",
        "description": "Equivalent to `PUSHREFCONT` `IFNOTJMP`.",
        "gas": "26/126/51",
        "fift": "[ref] IFNOTJMPREF",
        "fift_examples": [],
        "opcode": "E303",
        "stack": "f - "
      },
      "bytecode": {
        "tlb": "#E303 c:^Cell",
        "prefix": "E303",
        "operands": [
          {
            "name": "c",
            "type": "ref",
            "display_hints": [
              { "type": "continuation" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": {
        "branches": [
          { "type": "variable", "var_name": "c" }
        ],
        "nobranch": true
      },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 398,
          "function_name": "exec_condsel"
        }
      ]
    },
    {
      "mnemonic": "PLDSLICEX",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Returns the first `0 <= l <= 1023` bits of `s` as `s''`.",
        "gas": "26",
        "fift": "PLDSLICEX",
        "fift_examples": [],
        "opcode": "D719",
        "stack": "s l - s''"
      },
      "bytecode": { "tlb": "#D719", "prefix": "D719", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s3",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1127,
          "function_name": "exec_load_slice"
        }
      ]
    },
    {
      "mnemonic": "SETGASLIMIT",
      "since_version": 0,
      "doc": {
        "category": "app_gas",
        "description": "Sets current gas limit `g_l` to the minimum of `g` and `g_m`, and resets the gas credit `g_c` to zero. If the gas consumed so far (including the present instruction) exceeds the resulting value of `g_l`, an (unhandled) out of gas exception is thrown before setting new gas limits. Notice that `SETGASLIMIT` with an argument `g >= 2^63-1` is equivalent to `ACCEPT`.",
        "gas": "26",
        "fift": "SETGASLIMIT",
        "fift_examples": [],
        "opcode": "F801",
        "stack": "g - "
      },
      "bytecode": { "tlb": "#F801", "prefix": "F801", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "g",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": [
            { "type": "special", "name": "gas" }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            { "type": "special", "name": "gas" }
          ]
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "setgaslimit"
        }
      ]
    },
    {
      "mnemonic": "INDEXVAR",
      "since_version": 0,
      "doc": {
        "category": "tuple",
        "description": "Similar to `k INDEX`, but with `0 <= k <= 254` taken from the stack.",
        "gas": "26",
        "fift": "INDEXVAR",
        "fift_examples": [],
        "opcode": "6F81",
        "stack": "t k - x"
      },
      "bytecode": { "tlb": "#6F81", "prefix": "6F81", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": [
                "Tuple"
              ]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            { "type": "simple", "name": "x" }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tupleops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tupleops.cpp",
          "line": 112,
          "function_name": "exec_tuple_index_var"
        }
      ]
    },
    {
      "mnemonic": "STZEROES",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Stores `n` binary zeroes into _Builder_ `b`.",
        "gas": "26",
        "fift": "STZEROES",
        "fift_examples": [],
        "opcode": "CF40",
        "stack": "b n - b'"
      },
      "bytecode": { "tlb": "#CF40", "prefix": "CF40", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 752,
          "function_name": "exec_store_same"
        }
      ]
    },
    {
      "mnemonic": "LDUX",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Loads an unsigned `l`-bit integer `x` from (the first `l` bits of) `s`, with `0 <= l <= 256`.",
        "gas": "26",
        "fift": "LDUX",
        "fift_examples": [],
        "opcode": "D701",
        "stack": "s l - x s'"
      },
      "bytecode": { "tlb": "#D701", "prefix": "D701", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1080,
          "function_name": "exec_load_int_var"
        }
      ]
    },
    {
      "mnemonic": "DIVC",
      "since_version": 0,
      "doc": {
        "category": "arithm_div",
        "description": "`q''=ceil(x/y)`, `r''=x-y*q''`",
        "gas": "26",
        "fift": "DIVC",
        "fift_examples": [],
        "opcode": "A906",
        "stack": "x y - q''"
      },
      "bytecode": { "tlb": "#A906", "prefix": "A906", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 266,
          "function_name": "exec_divmod"
        }
      ]
    },
    {
      "mnemonic": "STSLICE",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Stores _Slice_ `s` into _Builder_ `b`.",
        "gas": "18",
        "fift": "STSLICE",
        "fift_examples": [],
        "opcode": "CE",
        "stack": "s b - b'"
      },
      "bytecode": { "tlb": "#CE", "prefix": "CE", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 507,
          "function_name": "exec_store_slice"
        }
      ]
    },
    {
      "mnemonic": "CALLDICT_LONG",
      "since_version": 0,
      "doc": {
        "category": "cont_dict",
        "description": "For `0 <= n < 2^14`, an encoding of `[n] CALL` for larger values of `n`.",
        "gas": "",
        "fift": "[n] CALL\n[n] CALLDICT",
        "fift_examples": [],
        "opcode": "F12_n",
        "stack": "- n"
      },
      "bytecode": {
        "tlb": "#F12_ n:uint14",
        "prefix": "F12_",
        "operands": [
          {
            "name": "n",
            "type": "uint",
            "size": 14,
            "min_value": 0,
            "max_value": 16383,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": {
        "branches": [
          {
            "type": "register",
            "index": 3,
            "save": {
              "c0": {
                "type": "cc",
                "save": {
                  "c0": { "type": "register", "index": 0 }
                }
              }
            }
          }
        ],
        "nobranch": false
      },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 1099,
          "function_name": "exec_calldict"
        }
      ]
    },
    {
      "mnemonic": "SPLIT",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Splits the first `0 <= l <= 1023` data bits and first `0 <= r <= 4` references from `s` into `s'`, returning the remainder of `s` as `s''`.",
        "gas": "26",
        "fift": "SPLIT",
        "fift_examples": [],
        "opcode": "D736",
        "stack": "s l r - s' s''"
      },
      "bytecode": { "tlb": "#D736", "prefix": "D736", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "s3",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1250,
          "function_name": "exec_split"
        }
      ]
    },
    {
      "mnemonic": "REWRITEVARADDR",
      "since_version": 0,
      "doc": {
        "category": "app_addr",
        "description": "A variant of `REWRITESTDADDR` that returns the (rewritten) address as a _Slice_ `s`, even if it is not exactly 256 bit long (represented by a `msg_addr_var`).",
        "gas": "26",
        "fift": "REWRITEVARADDR",
        "fift_examples": [],
        "opcode": "FA46",
        "stack": "s - x s'"
      },
      "bytecode": { "tlb": "#FA46", "prefix": "FA46", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "rewritevaraddr"
        }
      ]
    },
    {
      "mnemonic": "CHKSIGNS",
      "since_version": 0,
      "doc": {
        "category": "app_crypto",
        "description": "Checks whether `s` is a valid Ed25519-signature of the data portion of _Slice_ `d` using public key `k`, similarly to `CHKSIGNU`. If the bit length of _Slice_ `d` is not divisible by eight, throws a cell underflow exception. The verification of Ed25519 signatures is the standard one, with `Sha` used to reduce `d` to the 256-bit number that is actually signed.",
        "gas": "26",
        "fift": "CHKSIGNS",
        "fift_examples": [],
        "opcode": "F911",
        "stack": "d s k - ?"
      },
      "bytecode": { "tlb": "#F911", "prefix": "F911", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "d",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "chksigns"
        }
      ]
    },
    {
      "mnemonic": "CDATASIZE",
      "since_version": 0,
      "doc": {
        "category": "app_misc",
        "description": "A non-quiet version of `CDATASIZEQ` that throws a cell overflow exception (8) on failure.",
        "gas": "",
        "fift": "CDATASIZE",
        "fift_examples": [],
        "opcode": "F941",
        "stack": "c n - x y z"
      },
      "bytecode": { "tlb": "#F941", "prefix": "F941", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "cdatasize"
        }
      ]
    },
    {
      "mnemonic": "ABS",
      "since_version": 0,
      "doc": {
        "category": "arithm_logical",
        "description": "Computes the absolute value of an integer `x`.",
        "gas": "26",
        "fift": "ABS",
        "fift_examples": [],
        "opcode": "B60B",
        "stack": "x - |x|"
      },
      "bytecode": { "tlb": "#B60B", "prefix": "B60B", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 936,
          "function_name": "exec_abs"
        }
      ]
    },
    {
      "mnemonic": "LDVARINT16",
      "since_version": 0,
      "doc": {
        "category": "app_currency",
        "description": "Similar to `LDVARUINT16`, but loads a _signed_ _Integer_ `x`.\nApproximately equivalent to `4 LDU` `SWAP` `3 LSHIFT#` `LDIX`.",
        "gas": "26",
        "fift": "LDVARINT16",
        "fift_examples": [],
        "opcode": "FA01",
        "stack": "s - x s'"
      },
      "bytecode": { "tlb": "#FA01", "prefix": "FA01", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "ldvarint16"
        }
      ]
    },
    {
      "mnemonic": "LDIX",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Loads a signed `l`-bit (`0 <= l <= 257`) integer `x` from _Slice_ `s`, and returns the remainder of `s` as `s'`.",
        "gas": "26",
        "fift": "LDIX",
        "fift_examples": [],
        "opcode": "D700",
        "stack": "s l - x s'"
      },
      "bytecode": { "tlb": "#D700", "prefix": "D700", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1080,
          "function_name": "exec_load_int_var"
        }
      ]
    },
    {
      "mnemonic": "MULDIVC",
      "since_version": 0,
      "doc": {
        "category": "arithm_div",
        "description": "`q'=ceil(x*y/z)`",
        "gas": "26",
        "fift": "MULDIVC",
        "fift_examples": [],
        "opcode": "A986",
        "stack": "x y z - q'"
      },
      "bytecode": { "tlb": "#A986", "prefix": "A986", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 231,
          "function_name": "exec_mul"
        }
      ]
    },
    {
      "mnemonic": "DICTUMAX",
      "since_version": 0,
      "doc": {
        "category": "dict_min",
        "description": "Similar to `DICTMAX`, but returns the key as an unsigned `n`-bit _Integer_ `i`.",
        "gas": "",
        "fift": "DICTUMAX",
        "fift_examples": [],
        "opcode": "F48E",
        "stack": "D n - x i -1 or 0"
      },
      "bytecode": { "tlb": "#F48E", "prefix": "F48E", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                { "value": 0, "stack": [] },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": [
                        "Slice"
                      ]
                    },
                    {
                      "type": "simple",
                      "name": "i",
                      "value_types": [
                        "Integer"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 470,
          "function_name": "exec_dict_getmin"
        }
      ]
    },
    {
      "mnemonic": "BLS_G1_ADD",
      "since_version": 4,
      "doc": {
        "category": "app_crypto",
        "description": "Addition on G1.",
        "gas": "3934",
        "fift": "BLS_G1_ADD",
        "fift_examples": [],
        "opcode": "F93010",
        "stack": "x y - x+y"
      },
      "bytecode": { "tlb": "#F93010", "prefix": "F93010", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "bls_g1_add"
        }
      ]
    },
    {
      "mnemonic": "BLS_G1_MUL",
      "since_version": 4,
      "doc": {
        "category": "app_crypto",
        "description": "Multiplies G1 point `x` by scalar `s`. Any `s` is valid, including negative.",
        "gas": "5234",
        "fift": "BLS_G1_MUL",
        "fift_examples": [],
        "opcode": "F93013",
        "stack": "x s - x*s"
      },
      "bytecode": { "tlb": "#F93013", "prefix": "F93013", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "bls_g1_mul"
        }
      ]
    },
    {
      "mnemonic": "DICTUMAXREF",
      "since_version": 0,
      "doc": {
        "category": "dict_min",
        "description": "Similar to `DICTUMAX`, but returns the only reference in the value.",
        "gas": "",
        "fift": "DICTUMAXREF",
        "fift_examples": [],
        "opcode": "F48F",
        "stack": "D n - c i -1 or 0"
      },
      "bytecode": { "tlb": "#F48F", "prefix": "F48F", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                { "value": 0, "stack": [] },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "c",
                      "value_types": [
                        "Cell"
                      ]
                    },
                    {
                      "type": "simple",
                      "name": "i",
                      "value_types": [
                        "Integer"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 470,
          "function_name": "exec_dict_getmin"
        }
      ]
    },
    {
      "mnemonic": "SDPPFXREV",
      "since_version": 0,
      "doc": {
        "category": "compare_other",
        "description": "Checks whether `s'` is a proper prefix of `s`.",
        "gas": "26",
        "fift": "SDPPFXREV",
        "fift_examples": [],
        "opcode": "C70B",
        "stack": "s s' - ?"
      },
      "bytecode": { "tlb": "#C70B", "prefix": "C70B", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 323,
          "function_name": "exec_bin_cs_cmp"
        }
      ]
    },
    {
      "mnemonic": "GETSTORAGEFEE",
      "since_version": 6,
      "doc": {
        "category": "app_config",
        "description": "Calculates storage fees (only current StoragePrices entry is used).",
        "gas": "",
        "fift": "GETSTORAGEFEE",
        "fift_examples": [],
        "opcode": "F837",
        "stack": "cells bits seconds is_mc - price"
      },
      "bytecode": { "tlb": "#F837", "prefix": "F837", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "cells",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "bits",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "seconds",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "is_mc",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": [
            { "type": "constant", "index": 7 }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "price",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "get_storage_fee"
        }
      ]
    },
    {
      "mnemonic": "SDSKIPLAST",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Returns all but the last `0 <= l <= 1023` bits of `s`.",
        "gas": "26",
        "fift": "SDSKIPLAST",
        "fift_examples": [],
        "opcode": "D723",
        "stack": "s l - s'"
      },
      "bytecode": { "tlb": "#D723", "prefix": "D723", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1468,
          "function_name": "exec_slice_op_args"
        }
      ]
    },
    {
      "mnemonic": "HASHEXT_KECCAK256",
      "since_version": 4,
      "doc": {
        "category": "app_crypto",
        "description": "Calculates and returns hash of the concatenation of slices (or builders) `s_1...s_n`.",
        "gas": "1/11 gas per byte",
        "fift": "HASHEXT_KECCAK256",
        "fift_examples": [],
        "opcode": "F90403",
        "stack": "s_1 ... s_n n - h"
      },
      "bytecode": { "tlb": "#F90403", "prefix": "F90403", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "array",
              "name": "input_parts",
              "length_var": "n",
              "array_entry": [
                {
                  "type": "simple",
                  "name": "s",
                  "value_types": [
                    "Slice",
                    "Builder"
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "h",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "hash_ext_keccak256"
        }
      ]
    },
    {
      "mnemonic": "SDCUTLAST",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Returns the last `0 <= l <= 1023` bits of `s`.",
        "gas": "26",
        "fift": "SDCUTLAST",
        "fift_examples": [],
        "opcode": "D722",
        "stack": "s l - s'"
      },
      "bytecode": { "tlb": "#D722", "prefix": "D722", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1465,
          "function_name": "exec_slice_op_args"
        }
      ]
    },
    {
      "mnemonic": "DIVMOD",
      "since_version": 0,
      "doc": {
        "category": "arithm_div",
        "description": "",
        "gas": "26",
        "fift": "DIVMOD",
        "fift_examples": [],
        "opcode": "A90C",
        "stack": "x y - q r"
      },
      "bytecode": { "tlb": "#A90C", "prefix": "A90C", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 266,
          "function_name": "exec_divmod"
        }
      ]
    },
    {
      "mnemonic": "DICTUADDB",
      "since_version": 0,
      "doc": {
        "category": "dict_set_builder",
        "description": "",
        "gas": "",
        "fift": "DICTUADDB",
        "fift_examples": [],
        "opcode": "F453",
        "stack": "b i D n - D' -1 or D 0"
      },
      "bytecode": { "tlb": "#F453", "prefix": "F453", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": [
                        "Slice"
                      ]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": [
                        "Slice"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 271,
          "function_name": "exec_dict_set"
        }
      ]
    },
    {
      "mnemonic": "DICTPUSHCONST",
      "since_version": 0,
      "doc": {
        "category": "dict_special",
        "description": "Pushes a non-empty constant dictionary `D` (as a `Cell^?`) along with its key length `0 <= n <= 1023`, stored as a part of the instruction. The dictionary itself is created from the first of remaining references of the current continuation. In this way, the complete `DICTPUSHCONST` instruction can be obtained by first serializing `xF4A4_`, then the non-empty dictionary itself (one `1` bit and a cell reference), and then the unsigned 10-bit integer `n` (as if by a `STU 10` instruction). An empty dictionary can be pushed by a `NEWDICT` primitive instead.",
        "gas": "34",
        "fift": "[ref] [n] DICTPUSHCONST",
        "fift_examples": [],
        "opcode": "F4A6_n",
        "stack": " - D n"
      },
      "bytecode": {
        "tlb": "#F4A6_ d:^Cell n:uint10",
        "prefix": "F4A6_",
        "operands": [
          {
            "name": "d",
            "type": "ref",
            "display_hints": [
              { "type": "dictionary", "size_var": "n" }
            ]
          },
          {
            "name": "n",
            "type": "uint",
            "size": 10,
            "min_value": 0,
            "max_value": 1023,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 620,
          "function_name": "exec_push_const_dict"
        }
      ]
    },
    {
      "mnemonic": "BLESS",
      "since_version": 0,
      "doc": {
        "category": "cont_create",
        "description": "Transforms a _Slice_ `s` into a simple ordinary continuation `c`, with `c.code=s` and an empty stack and savelist.",
        "gas": "26",
        "fift": "BLESS",
        "fift_examples": [],
        "opcode": "ED1E",
        "stack": "s - c"
      },
      "bytecode": { "tlb": "#ED1E", "prefix": "ED1E", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Continuation"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 733,
          "function_name": "exec_bless"
        }
      ]
    },
    {
      "mnemonic": "CDATASIZEQ",
      "since_version": 0,
      "doc": {
        "category": "app_misc",
        "description": "Recursively computes the count of distinct cells `x`, data bits `y`, and cell references `z` in the dag rooted at _Cell_ `c`, effectively returning the total storage used by this dag taking into account the identification of equal cells. The values of `x`, `y`, and `z` are computed by a depth-first traversal of this dag, with a hash table of visited cell hashes used to prevent visits of already-visited cells. The total count of visited cells `x` cannot exceed non-negative _Integer_ `n`; otherwise the computation is aborted before visiting the `(n+1)`-st cell and a zero is returned to indicate failure. If `c` is _Null_, returns `x=y=z=0`.",
        "gas": "",
        "fift": "CDATASIZEQ",
        "fift_examples": [],
        "opcode": "F940",
        "stack": "c n - x y z -1 or 0"
      },
      "bytecode": { "tlb": "#F940", "prefix": "F940", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                { "value": 0, "stack": [] },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": [
                        "Integer"
                      ]
                    },
                    {
                      "type": "simple",
                      "name": "y",
                      "value_types": [
                        "Integer"
                      ]
                    },
                    {
                      "type": "simple",
                      "name": "z",
                      "value_types": [
                        "Integer"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "cdatasizeq"
        }
      ]
    },
    {
      "mnemonic": "SBITREFS",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Returns both the number of data bits and the number of references in `s`.",
        "gas": "26",
        "fift": "SBITREFS",
        "fift_examples": [],
        "opcode": "D74B",
        "stack": "s - l r"
      },
      "bytecode": { "tlb": "#D74B", "prefix": "D74B", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "l",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1308,
          "function_name": "exec_slice_bits_refs"
        }
      ]
    },
    {
      "mnemonic": "LDREFRTOS",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Equivalent to `LDREF` `SWAP` `CTOS`.",
        "gas": "118/43",
        "fift": "LDREFRTOS",
        "fift_examples": [],
        "opcode": "D5",
        "stack": "s - s' s''"
      },
      "bytecode": { "tlb": "#D5", "prefix": "D5", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "s3",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1026,
          "function_name": "exec_load_ref_rev_to_slice"
        }
      ]
    },
    {
      "mnemonic": "GETPRECOMPILEDGAS",
      "since_version": 6,
      "doc": {
        "category": "app_config",
        "description": "Returns gas usage for the current contract if it is precompiled, `null` otherwise.",
        "gas": "",
        "fift": "GETPRECOMPILEDGAS",
        "fift_examples": [],
        "opcode": "F839",
        "stack": "- x"
      },
      "bytecode": { "tlb": "#F839", "prefix": "F839", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [],
          "registers": [
            { "type": "constant", "index": 7 }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "get_precompiled_gas"
        }
      ]
    },
    {
      "mnemonic": "SDSUBSTR",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Returns `0 <= l' <= 1023` bits of `s` starting from offset `0 <= l <= 1023`, thus extracting a bit substring out of the data of `s`.",
        "gas": "26",
        "fift": "SDSUBSTR",
        "fift_examples": [],
        "opcode": "D724",
        "stack": "s l l' - s'"
      },
      "bytecode": { "tlb": "#D724", "prefix": "D724", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "l2",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1472,
          "function_name": "exec_slice_op_args2"
        }
      ]
    },
    {
      "mnemonic": "STB",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Appends all data from _Builder_ `b'` to _Builder_ `b`.",
        "gas": "26",
        "fift": "STB",
        "fift_examples": [],
        "opcode": "CF13",
        "stack": "b' b - b''"
      },
      "bytecode": { "tlb": "#CF13", "prefix": "CF13", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b3",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 553,
          "function_name": "exec_store_builder"
        }
      ]
    },
    {
      "mnemonic": "DICTUMINREF",
      "since_version": 0,
      "doc": {
        "category": "dict_min",
        "description": "Similar to `DICTUMIN`, but returns the only reference in the value.",
        "gas": "",
        "fift": "DICTUMINREF",
        "fift_examples": [],
        "opcode": "F487",
        "stack": "D n - c i -1 or 0"
      },
      "bytecode": { "tlb": "#F487", "prefix": "F487", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                { "value": 0, "stack": [] },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "c",
                      "value_types": [
                        "Cell"
                      ]
                    },
                    {
                      "type": "simple",
                      "name": "i",
                      "value_types": [
                        "Integer"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 470,
          "function_name": "exec_dict_getmin"
        }
      ]
    },
    {
      "mnemonic": "GETFORWARDFEESIMPLE",
      "since_version": 6,
      "doc": {
        "category": "app_config",
        "description": "Same as `GETFORWARDFEE`, but without lump price (just (`bits*bit_price + cells*cell_price) / 2^16`).",
        "gas": "",
        "fift": "GETFORWARDFEESIMPLE",
        "fift_examples": [],
        "opcode": "F83C",
        "stack": "cells bits is_mc - price"
      },
      "bytecode": { "tlb": "#F83C", "prefix": "F83C", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "cells",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "bits",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "is_mc",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": [
            { "type": "constant", "index": 7 }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "price",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "get_forward_fee_simple"
        }
      ]
    },
    {
      "mnemonic": "DICTUGETJMP",
      "since_version": 0,
      "doc": {
        "category": "dict_special",
        "description": "Similar to `DICTIGETJMP`, but performs `DICTUGET` instead of `DICTIGET`.",
        "gas": "",
        "fift": "DICTUGETJMP",
        "fift_examples": [],
        "opcode": "F4A1",
        "stack": "i D n - "
      },
      "bytecode": { "tlb": "#F4A1", "prefix": "F4A1", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": {
        "branches": [
          { "type": "variable", "var_name": "x" }
        ],
        "nobranch": false
      },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 593,
          "function_name": "exec_dict_get_exec"
        }
      ]
    },
    {
      "mnemonic": "XCTOS",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Transforms an ordinary or exotic cell into a _Slice_, as if it were an ordinary cell. A flag is returned indicating whether `c` is exotic. If that be the case, its type can later be deserialized from the first eight bits of `s`.",
        "gas": "",
        "fift": "XCTOS",
        "fift_examples": [],
        "opcode": "D739",
        "stack": "c - s ?"
      },
      "bytecode": { "tlb": "#D739", "prefix": "D739", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "flag",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 881,
          "function_name": "exec_cell_to_slice_maybe_special"
        }
      ]
    },
    {
      "mnemonic": "DICTIGETREF",
      "since_version": 0,
      "doc": {
        "category": "dict_get",
        "description": "Combines `DICTIGET` with `DICTGETREF`: it uses signed `n`-bit _Integer_ `i` as a key and returns a _Cell_ instead of a _Slice_ on success.",
        "gas": "",
        "fift": "DICTIGETREF",
        "fift_examples": [],
        "opcode": "F40D",
        "stack": "i D n - c -1 or 0"
      },
      "bytecode": { "tlb": "#F40D", "prefix": "F40D", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Cell",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                { "value": 0, "stack": [] },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "c",
                      "value_types": [
                        "Cell"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 247,
          "function_name": "exec_dict_get_optref"
        }
      ]
    },
    {
      "mnemonic": "GASCONSUMED",
      "since_version": 4,
      "doc": {
        "category": "app_gas",
        "description": "Returns gas consumed by VM so far (including this instruction).",
        "gas": "26",
        "fift": "GASCONSUMED",
        "fift_examples": [],
        "opcode": "F807",
        "stack": "- g_c"
      },
      "bytecode": { "tlb": "#F807", "prefix": "F807", "operands": [] },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "g_c",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": [
            { "type": "special", "name": "gas" }
          ]
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "gasconsumed"
        }
      ]
    },
    {
      "mnemonic": "CALLXARGS",
      "since_version": 0,
      "doc": {
        "category": "cont_basic",
        "description": "_Calls_ continuation `c` with `p` parameters and expecting `r` return values\n`0 <= p <= 15`, `0 <= r <= 15`",
        "gas": "26",
        "fift": "[p] [r] CALLXARGS",
        "fift_examples": [],
        "opcode": "DApr",
        "stack": "c - "
      },
      "bytecode": {
        "tlb": "#DA p:uint4 r:uint4",
        "prefix": "DA",
        "operands": [
          {
            "name": "p",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": []
          },
          {
            "name": "r",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "array",
              "name": "args",
              "length_var": "p",
              "array_entry": [
                { "type": "simple", "name": "arg" }
              ]
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Continuation"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": {
        "branches": [
          {
            "type": "variable",
            "var_name": "c",
            "save": {
              "c0": {
                "type": "cc",
                "save": {
                  "c0": { "type": "register", "index": 0 }
                }
              }
            }
          }
        ],
        "nobranch": false
      },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 39,
          "function_name": "exec_callx_args"
        }
      ]
    },
    {
      "mnemonic": "DICTIGET",
      "since_version": 0,
      "doc": {
        "category": "dict_get",
        "description": "Similar to `DICTGET`, but with a signed (big-endian) `n`-bit _Integer_ `i` as a key. If `i` does not fit into `n` bits, returns `0`. If `i` is a `NaN`, throws an integer overflow exception.",
        "gas": "",
        "fift": "DICTIGET",
        "fift_examples": [],
        "opcode": "F40C",
        "stack": "i D n - x -1 or 0"
      },
      "bytecode": { "tlb": "#F40C", "prefix": "F40C", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Cell",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                { "value": 0, "stack": [] },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": [
                        "Slice"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 207,
          "function_name": "exec_dict_get"
        }
      ]
    },
    {
      "mnemonic": "PFXDICTGETQ",
      "since_version": 0,
      "doc": {
        "category": "dict_special",
        "description": "Looks up the unique prefix of _Slice_ `s` present in the prefix code dictionary represented by `Cell^?` `D` and `0 <= n <= 1023`. If found, the prefix of `s` is returned as `s'`, and the corresponding value (also a _Slice_) as `x`. The remainder of `s` is returned as a _Slice_ `s''`. If no prefix of `s` is a key in prefix code dictionary `D`, returns the unchanged `s` and a zero flag to indicate failure.",
        "gas": "",
        "fift": "PFXDICTGETQ",
        "fift_examples": [],
        "opcode": "F4A8",
        "stack": "s D n - s' x s'' -1 or s 0"
      },
      "bytecode": { "tlb": "#F4A8", "prefix": "F4A8", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "s",
                      "value_types": [
                        "Slice"
                      ]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "s2",
                      "value_types": [
                        "Slice"
                      ]
                    },
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": [
                        "Slice"
                      ]
                    },
                    {
                      "type": "simple",
                      "name": "s3",
                      "value_types": [
                        "Slice"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 658,
          "function_name": "exec_pfx_dict_get"
        }
      ]
    },
    {
      "mnemonic": "SETRAND",
      "since_version": 0,
      "doc": {
        "category": "app_rnd",
        "description": "Sets the random seed to unsigned 256-bit _Integer_ `x`.",
        "gas": "26+|c7|+|c1_1|",
        "fift": "SETRAND",
        "fift_examples": [],
        "opcode": "F814",
        "stack": "x - "
      },
      "bytecode": { "tlb": "#F814", "prefix": "F814", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": [
            { "type": "constant", "index": 7 }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            { "type": "constant", "index": 7 }
          ]
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "set_rand"
        }
      ]
    },
    {
      "mnemonic": "DICTUGETPREVEQ",
      "since_version": 0,
      "doc": {
        "category": "dict_next",
        "description": "Similar to `DICTGETPREVEQ`, but interprets keys a unsigned `n`-bit integers.",
        "gas": "",
        "fift": "DICTUGETPREVEQ",
        "fift_examples": [],
        "opcode": "F47F",
        "stack": "i D n - x' i' -1 or 0"
      },
      "bytecode": { "tlb": "#F47F", "prefix": "F47F", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                { "value": 0, "stack": [] },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x2",
                      "value_types": [
                        "Slice"
                      ]
                    },
                    {
                      "type": "simple",
                      "name": "i2",
                      "value_types": [
                        "Integer"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 523,
          "function_name": "exec_dict_getnear"
        }
      ]
    },
    {
      "mnemonic": "XOR",
      "since_version": 0,
      "doc": {
        "category": "arithm_logical",
        "description": "Bitwise xor of two integers.",
        "gas": "18",
        "fift": "XOR",
        "fift_examples": [],
        "opcode": "B2",
        "stack": "x y - x xor y"
      },
      "bytecode": { "tlb": "#B2", "prefix": "B2", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 787,
          "function_name": "exec_xor"
        }
      ]
    },
    {
      "mnemonic": "ECRECOVER",
      "since_version": 4,
      "doc": {
        "category": "app_crypto",
        "description": "Recovers the public key from a secp256k1 signature, identical to Bitcoin/Ethereum operations. Takes a 32-byte hash as `uint256 hash` and a 65-byte signature as `uint8 v`, `uint256 r`, and `uint256 s`. In TON, the `v` value is strictly 0 or 1; no extra flags or extended values are supported. If the public key cannot be recovered, the instruction returns `0`. On success, it returns the recovered 65-byte public key as `uint8 h`, `uint256 x1`, and `uint256 x2`, followed by `-1`.",
        "gas": "1526",
        "fift": "ECRECOVER",
        "fift_examples": [],
        "opcode": "F912",
        "stack": "hash v r s - 0 or h x1 x2 -1"
      },
      "bytecode": { "tlb": "#F912", "prefix": "F912", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "hash",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "v",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                { "value": 0, "stack": [] },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "h",
                      "value_types": [
                        "Integer"
                      ]
                    },
                    {
                      "type": "simple",
                      "name": "x1",
                      "value_types": [
                        "Integer"
                      ]
                    },
                    {
                      "type": "simple",
                      "name": "x2",
                      "value_types": [
                        "Integer"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "ecrecover"
        }
      ]
    },
    {
      "mnemonic": "IFNOTREF",
      "since_version": 0,
      "doc": {
        "category": "cont_conditional",
        "description": "Equivalent to `PUSHREFCONT` `IFNOT`.",
        "gas": "26/126/51",
        "fift": "[ref] IFNOTREF",
        "fift_examples": [],
        "opcode": "E301",
        "stack": "f - "
      },
      "bytecode": {
        "tlb": "#E301 c:^Cell",
        "prefix": "E301",
        "operands": [
          {
            "name": "c",
            "type": "ref",
            "display_hints": [
              { "type": "continuation" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": {
        "branches": [
          {
            "type": "variable",
            "var_name": "c",
            "save": {
              "c0": {
                "type": "cc",
                "save": {
                  "c0": { "type": "register", "index": 0 }
                }
              }
            }
          }
        ],
        "nobranch": true
      },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 377,
          "function_name": "exec_ifnotret"
        }
      ]
    },
    {
      "mnemonic": "DICTIGETOPTREF",
      "since_version": 0,
      "doc": {
        "category": "dict_mayberef",
        "description": "`DICTGETOPTREF`, but with `i` a signed `n`-bit integer. If the key `i` is out of range, also returns _Null_.",
        "gas": "",
        "fift": "DICTIGETOPTREF",
        "fift_examples": [],
        "opcode": "F46A",
        "stack": "i D n - c^?"
      },
      "bytecode": { "tlb": "#F46A", "prefix": "F46A", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell",
                "Null"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 247,
          "function_name": "exec_dict_get_optref"
        }
      ]
    },
    {
      "mnemonic": "DICTMIN",
      "since_version": 0,
      "doc": {
        "category": "dict_min",
        "description": "Computes the minimal key `k` (represented by a _Slice_ with `n` data bits) in dictionary `D`, and returns `k` along with the associated value `x`.",
        "gas": "",
        "fift": "DICTMIN",
        "fift_examples": [],
        "opcode": "F482",
        "stack": "D n - x k -1 or 0"
      },
      "bytecode": { "tlb": "#F482", "prefix": "F482", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                { "value": 0, "stack": [] },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": [
                        "Slice"
                      ]
                    },
                    {
                      "type": "simple",
                      "name": "k",
                      "value_types": [
                        "Slice"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 470,
          "function_name": "exec_dict_getmin"
        }
      ]
    },
    {
      "mnemonic": "DICTGETREF",
      "since_version": 0,
      "doc": {
        "category": "dict_get",
        "description": "Similar to `DICTGET`, but with a `LDREF` `ENDS` applied to `x` on success.\nThis operation is useful for dictionaries of type `HashmapE(n,^Y)`.",
        "gas": "",
        "fift": "DICTGETREF",
        "fift_examples": [],
        "opcode": "F40B",
        "stack": "k D n - c -1 or 0"
      },
      "bytecode": { "tlb": "#F40B", "prefix": "F40B", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "k",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                { "value": 0, "stack": [] },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "c",
                      "value_types": [
                        "Cell"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 247,
          "function_name": "exec_dict_get_optref"
        }
      ]
    },
    {
      "mnemonic": "PFXDICTSET",
      "since_version": 0,
      "doc": {
        "category": "dict_prefix",
        "description": "",
        "gas": "",
        "fift": "PFXDICTSET",
        "fift_examples": [],
        "opcode": "F470",
        "stack": "x k D n - D' -1 or D 0"
      },
      "bytecode": { "tlb": "#F470", "prefix": "F470", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": [
                        "Slice",
                        "Null"
                      ]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": [
                        "Slice",
                        "Null"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 566,
          "function_name": "exec_pfx_dict_set"
        }
      ]
    },
    {
      "mnemonic": "MULDIVMOD",
      "since_version": 0,
      "doc": {
        "category": "arithm_div",
        "description": "`q=floor(x*y/z)`, `r=x*y-z*q`",
        "gas": "26",
        "fift": "MULDIVMOD",
        "fift_examples": [],
        "opcode": "A98C",
        "stack": "x y z - q r"
      },
      "bytecode": { "tlb": "#A98C", "prefix": "A98C", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 231,
          "function_name": "exec_mul"
        }
      ]
    },
    {
      "mnemonic": "PLDUX",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Preloads an unsigned `l`-bit integer from `s`, for `0 <= l <= 256`.",
        "gas": "26",
        "fift": "PLDUX",
        "fift_examples": [],
        "opcode": "D703",
        "stack": "s l - x"
      },
      "bytecode": { "tlb": "#D703", "prefix": "D703", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1092,
          "function_name": "exec_load_int_fixed2"
        }
      ]
    },
    {
      "mnemonic": "TPOP",
      "since_version": 0,
      "doc": {
        "category": "tuple",
        "description": "Detaches the last element `x=x_n` from a non-empty _Tuple_ `t=(x_1,...,x_n)`, and returns both the resulting _Tuple_ `t'=(x_1,...,x_{n-1})` and the original last element `x`.",
        "gas": "26+|t'|",
        "fift": "TPOP",
        "fift_examples": [],
        "opcode": "6F8D",
        "stack": "t - t' x"
      },
      "bytecode": { "tlb": "#6F8D", "prefix": "6F8D", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": [
                "Tuple"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t2",
              "value_types": [
                "Tuple"
              ]
            },
            { "type": "simple", "name": "x" }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tupleops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tupleops.cpp",
          "line": 308,
          "function_name": "exec_tuple_pop"
        }
      ]
    },
    {
      "mnemonic": "BLS_G1_NEG",
      "since_version": 4,
      "doc": {
        "category": "app_crypto",
        "description": "Negation on G1.",
        "gas": "784",
        "fift": "BLS_G1_NEG",
        "fift_examples": [],
        "opcode": "F93012",
        "stack": "x - -x"
      },
      "bytecode": { "tlb": "#F93012", "prefix": "F93012", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "bls_g1_neg"
        }
      ]
    },
    {
      "mnemonic": "BLS_PAIRING",
      "since_version": 4,
      "doc": {
        "category": "app_crypto",
        "description": "Given G1 points `x_i` and G2 points `y_i`, calculates and multiply pairings of `x_i,y_i`. Returns true if the result is the multiplicative identity in FP12, false otherwise. Returns false if `n=0`.",
        "gas": "20034+n*11800",
        "fift": "BLS_PAIRING",
        "fift_examples": [],
        "opcode": "F93030",
        "stack": "x_1 y_1 ... x_n y_n n - bool"
      },
      "bytecode": { "tlb": "#F93030", "prefix": "F93030", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "array",
              "name": "components",
              "length_var": "n",
              "array_entry": [
                {
                  "type": "simple",
                  "name": "x",
                  "value_types": [
                    "Slice"
                  ]
                },
                {
                  "type": "simple",
                  "name": "y",
                  "value_types": [
                    "Slice"
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "bls_pairing"
        }
      ]
    },
    {
      "mnemonic": "UBITSIZE",
      "since_version": 0,
      "doc": {
        "category": "arithm_logical",
        "description": "Computes smallest `c >= 0` such that `x` fits into a `c`-bit unsigned integer (`0 <= x < 2^c`), or throws a range check exception.",
        "gas": "26",
        "fift": "UBITSIZE",
        "fift_examples": [],
        "opcode": "B603",
        "stack": "x - c"
      },
      "bytecode": { "tlb": "#B603", "prefix": "B603", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 856,
          "function_name": "exec_bitsize"
        }
      ]
    },
    {
      "mnemonic": "JMPX",
      "since_version": 0,
      "doc": {
        "category": "cont_basic",
        "description": "_Jumps_, or transfers control, to continuation `c`.\nThe remainder of the previous current continuation `cc` is discarded.",
        "gas": "18",
        "fift": "JMPX",
        "fift_examples": [],
        "opcode": "D9",
        "stack": "c - "
      },
      "bytecode": { "tlb": "#D9", "prefix": "D9", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Continuation"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": {
        "branches": [
          { "type": "variable", "var_name": "c" }
        ],
        "nobranch": false
      },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 53,
          "function_name": "exec_jmpx"
        }
      ]
    },
    {
      "mnemonic": "DICTIGETJMP",
      "since_version": 0,
      "doc": {
        "category": "dict_special",
        "description": "Similar to `DICTIGET`, but with `x` `BLESS`ed into a continuation with a subsequent `JMPX` to it on success. On failure, does nothing. This is useful for implementing `switch`/`case` constructions.",
        "gas": "",
        "fift": "DICTIGETJMP",
        "fift_examples": [],
        "opcode": "F4A0",
        "stack": "i D n - "
      },
      "bytecode": { "tlb": "#F4A0", "prefix": "F4A0", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": {
        "branches": [
          { "type": "variable", "var_name": "x" }
        ],
        "nobranch": false
      },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 593,
          "function_name": "exec_dict_get_exec"
        }
      ]
    },
    {
      "mnemonic": "DICTUREPLACEB",
      "since_version": 0,
      "doc": {
        "category": "dict_set_builder",
        "description": "",
        "gas": "",
        "fift": "DICTUREPLACEB",
        "fift_examples": [],
        "opcode": "F44B",
        "stack": "b i D n - D' -1 or D 0"
      },
      "bytecode": { "tlb": "#F44B", "prefix": "F44B", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": [
                        "Slice"
                      ]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": [
                        "Slice"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 271,
          "function_name": "exec_dict_set"
        }
      ]
    },
    {
      "mnemonic": "PREPAREDICT",
      "since_version": 0,
      "doc": {
        "category": "cont_dict",
        "description": "Equivalent to `n PUSHINT` `c3 PUSHCTR`, for `0 <= n < 2^14`.\nIn this way, `[n] CALL` is approximately equivalent to `[n] PREPARE` `EXECUTE`, and `[n] JMP` is approximately equivalent to `[n] PREPARE` `JMPX`.\nOne might use, for instance, `CALLXARGS` or `CALLCC` instead of `EXECUTE` here.",
        "gas": "",
        "fift": "[n] PREPARE\n[n] PREPAREDICT",
        "fift_examples": [],
        "opcode": "F1A_n",
        "stack": " - n c"
      },
      "bytecode": {
        "tlb": "#F1A_ n:uint14",
        "prefix": "F1A_",
        "operands": [
          {
            "name": "n",
            "type": "uint",
            "size": 14,
            "min_value": 0,
            "max_value": 16383,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [],
          "registers": [
            { "type": "constant", "index": 3 }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Continuation"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 1113,
          "function_name": "exec_preparedict"
        }
      ]
    },
    {
      "mnemonic": "DICTISETREF",
      "since_version": 0,
      "doc": {
        "category": "dict_set",
        "description": "Similar to `DICTSETREF`, but with the key a signed `n`-bit integer as in `DICTISET`.",
        "gas": "",
        "fift": "DICTISETREF",
        "fift_examples": [],
        "opcode": "F415",
        "stack": "c i D n - D'"
      },
      "bytecode": { "tlb": "#F415", "prefix": "F415", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell"
              ]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 271,
          "function_name": "exec_dict_set"
        }
      ]
    },
    {
      "mnemonic": "SDLEXCMP",
      "since_version": 0,
      "doc": {
        "category": "compare_other",
        "description": "Compares the data of `s` lexicographically with the data of `s'`, returning `-1`, 0, or 1 depending on the result.",
        "gas": "26",
        "fift": "SDLEXCMP",
        "fift_examples": [],
        "opcode": "C704",
        "stack": "s s' - x"
      },
      "bytecode": { "tlb": "#C704", "prefix": "C704", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 318,
          "function_name": "exec_ibin_cs_cmp"
        }
      ]
    },
    {
      "mnemonic": "HASHEXT_SHA256",
      "since_version": 4,
      "doc": {
        "category": "app_crypto",
        "description": "Calculates and returns hash of the concatenation of slices (or builders) `s_1...s_n`.",
        "gas": "1/33 gas per byte",
        "fift": "HASHEXT_SHA256",
        "fift_examples": [],
        "opcode": "F90400",
        "stack": "s_1 ... s_n n - h"
      },
      "bytecode": { "tlb": "#F90400", "prefix": "F90400", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "array",
              "name": "input_parts",
              "length_var": "n",
              "array_entry": [
                {
                  "type": "simple",
                  "name": "s",
                  "value_types": [
                    "Slice",
                    "Builder"
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "h",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "hash_ext_sha256"
        }
      ]
    },
    {
      "mnemonic": "DICTUREMMIN",
      "since_version": 0,
      "doc": {
        "category": "dict_min",
        "description": "Similar to `DICTREMMIN`, but returns the key as an unsigned `n`-bit _Integer_ `i`.",
        "gas": "",
        "fift": "DICTUREMMIN",
        "fift_examples": [],
        "opcode": "F496",
        "stack": "D n - D' x i -1 or D 0"
      },
      "bytecode": { "tlb": "#F496", "prefix": "F496", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": [
                        "Slice",
                        "Null"
                      ]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": [
                        "Slice",
                        "Null"
                      ]
                    },
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": [
                        "Slice"
                      ]
                    },
                    {
                      "type": "simple",
                      "name": "i",
                      "value_types": [
                        "Integer"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 470,
          "function_name": "exec_dict_getmin"
        }
      ]
    },
    {
      "mnemonic": "DICTUSETGET",
      "since_version": 0,
      "doc": {
        "category": "dict_set",
        "description": "`DICTISETGET`, but with `i` an unsigned `n`-bit integer.",
        "gas": "",
        "fift": "DICTUSETGET",
        "fift_examples": [],
        "opcode": "F41E",
        "stack": "x i D n - D' y -1 or D' 0"
      },
      "bytecode": { "tlb": "#F41E", "prefix": "F41E", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": [
                        "Slice"
                      ]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": [
                        "Slice"
                      ]
                    },
                    {
                      "type": "simple",
                      "name": "y",
                      "value_types": [
                        "Slice"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 271,
          "function_name": "exec_dict_set"
        }
      ]
    },
    {
      "mnemonic": "DICTUREMMINREF",
      "since_version": 0,
      "doc": {
        "category": "dict_min",
        "description": "Similar to `DICTUREMMIN`, but returns the only reference in the value.",
        "gas": "",
        "fift": "DICTUREMMINREF",
        "fift_examples": [],
        "opcode": "F497",
        "stack": "D n - D' c i -1 or D 0"
      },
      "bytecode": { "tlb": "#F497", "prefix": "F497", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": [
                        "Slice",
                        "Null"
                      ]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": [
                        "Slice",
                        "Null"
                      ]
                    },
                    {
                      "type": "simple",
                      "name": "c",
                      "value_types": [
                        "Cell"
                      ]
                    },
                    {
                      "type": "simple",
                      "name": "i",
                      "value_types": [
                        "Integer"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 470,
          "function_name": "exec_dict_getmin"
        }
      ]
    },
    {
      "mnemonic": "PARSEMSGADDR",
      "since_version": 0,
      "doc": {
        "category": "app_addr",
        "description": "Decomposes _Slice_ `s` containing a valid `MsgAddress` into a _Tuple_ `t` with separate fields of this `MsgAddress`. If `s` is not a valid `MsgAddress`, a cell deserialization exception is thrown.",
        "gas": "26",
        "fift": "PARSEMSGADDR",
        "fift_examples": [],
        "opcode": "FA42",
        "stack": "s - t"
      },
      "bytecode": { "tlb": "#FA42", "prefix": "FA42", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": [
                "Tuple"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "parsemsgaddr"
        }
      ]
    },
    {
      "mnemonic": "SETINDEXVAR",
      "since_version": 0,
      "doc": {
        "category": "tuple",
        "description": "Similar to `k SETINDEX`, but with `0 <= k <= 254` taken from the stack.",
        "gas": "26+|t'|",
        "fift": "SETINDEXVAR",
        "fift_examples": [],
        "opcode": "6F85",
        "stack": "t x k - t'"
      },
      "bytecode": { "tlb": "#6F85", "prefix": "6F85", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": [
                "Tuple"
              ]
            },
            { "type": "simple", "name": "x" },
            {
              "type": "simple",
              "name": "k",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t2",
              "value_types": [
                "Tuple"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tupleops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tupleops.cpp",
          "line": 229,
          "function_name": "exec_tuple_set_index_var"
        }
      ]
    },
    {
      "mnemonic": "NOP",
      "since_version": 0,
      "doc": {
        "category": "stack_basic",
        "description": "Does nothing.",
        "gas": "18",
        "fift": "NOP",
        "fift_examples": [],
        "opcode": "00",
        "stack": "-"
      },
      "bytecode": { "tlb": "#00", "prefix": "00", "operands": [] },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 28,
          "function_name": "exec_nop"
        }
      ]
    },
    {
      "mnemonic": "EXPLODEVAR",
      "since_version": 0,
      "doc": {
        "category": "tuple",
        "description": "Similar to `n EXPLODE`, but with `0 <= n <= 255` taken from the stack.",
        "gas": "26+m",
        "fift": "EXPLODEVAR",
        "fift_examples": [],
        "opcode": "6F84",
        "stack": "t n - x_1 ... x_m m"
      },
      "bytecode": { "tlb": "#6F84", "prefix": "6F84", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": [
                "Tuple"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "array",
              "name": "tuple_elements",
              "length_var": "m",
              "array_entry": [
                { "type": "simple", "name": "x" }
              ]
            },
            {
              "type": "simple",
              "name": "m",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tupleops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tupleops.cpp",
          "line": 202,
          "function_name": "exec_explode_tuple_var"
        }
      ]
    },
    {
      "mnemonic": "CDEPTH",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Returns the depth of _Cell_ `c`. If `c` has no references, then `x=0`; otherwise `x` is one plus the maximum of depths of cells referred to from `c`. If `c` is a _Null_ instead of a _Cell_, returns zero.",
        "gas": "26",
        "fift": "CDEPTH",
        "fift_examples": [],
        "opcode": "D765",
        "stack": "c - x"
      },
      "bytecode": { "tlb": "#D765", "prefix": "D765", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1378,
          "function_name": "exec_cell_depth"
        }
      ]
    },
    {
      "mnemonic": "LDMSGADDRQ",
      "since_version": 0,
      "doc": {
        "category": "app_addr",
        "description": "A quiet version of `LDMSGADDR`: on success, pushes an extra `-1`; on failure, pushes the original `s` and a zero.",
        "gas": "26",
        "fift": "LDMSGADDRQ",
        "fift_examples": [],
        "opcode": "FA41",
        "stack": "s - s' s'' -1 or s 0"
      },
      "bytecode": { "tlb": "#FA41", "prefix": "FA41", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "s",
                      "value_types": [
                        "Slice"
                      ]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "s2",
                      "value_types": [
                        "Slice"
                      ]
                    },
                    {
                      "type": "simple",
                      "name": "s3",
                      "value_types": [
                        "Slice"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "ldmsgaddrq"
        }
      ]
    },
    {
      "mnemonic": "UFITSX",
      "since_version": 0,
      "doc": {
        "category": "arithm_logical",
        "description": "Checks whether `x` is a `c`-bit unsigned integer for `0 <= c <= 1023`.",
        "gas": "26/76",
        "fift": "UFITSX",
        "fift_examples": [],
        "opcode": "B601",
        "stack": "x c - x"
      },
      "bytecode": { "tlb": "#B601", "prefix": "B601", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 843,
          "function_name": "exec_ufits"
        }
      ]
    },
    {
      "mnemonic": "LSHIFT_VAR",
      "since_version": 0,
      "doc": {
        "category": "arithm_logical",
        "description": "`0 <= y <= 1023`",
        "gas": "18",
        "fift": "LSHIFT",
        "fift_examples": [],
        "opcode": "AC",
        "stack": "x y - x*2^y"
      },
      "bytecode": { "tlb": "#AC", "prefix": "AC", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 722,
          "function_name": "exec_lshift_tinyint8"
        }
      ]
    },
    {
      "mnemonic": "SDATASIZE",
      "since_version": 0,
      "doc": {
        "category": "app_misc",
        "description": "A non-quiet version of `SDATASIZEQ` that throws a cell overflow exception (8) on failure.",
        "gas": "",
        "fift": "SDATASIZE",
        "fift_examples": [],
        "opcode": "F943",
        "stack": "s n - x y z"
      },
      "bytecode": { "tlb": "#F943", "prefix": "F943", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "sdatasize"
        }
      ]
    },
    {
      "mnemonic": "RSHIFTR",
      "since_version": 0,
      "doc": {
        "category": "arithm_div",
        "description": "",
        "gas": "34",
        "fift": "[tt+1] RSHIFTR#",
        "fift_examples": [],
        "opcode": "A935tt",
        "stack": "x - round(x/2^(tt+1))"
      },
      "bytecode": {
        "tlb": "#A935 tt:uint8",
        "prefix": "A935",
        "operands": [
          {
            "name": "t",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 749,
          "function_name": "exec_rshift"
        }
      ]
    },
    {
      "mnemonic": "STSLICECONST",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Stores a constant subslice `sss`.\n_Details:_ `sss` consists of `0 <= x <= 3` references and up to `8y+2` data bits, with `0 <= y <= 7`. Completion bit is assumed.\nNote that the assembler can replace `STSLICECONST` with `PUSHSLICE` `STSLICER` if the slice is too big.",
        "gas": "24",
        "fift": "[slice] STSLICECONST",
        "fift_examples": [],
        "opcode": "CFC0_xysss",
        "stack": "b - b'"
      },
      "bytecode": {
        "tlb": "#CFC0_ x:(## 2) y:(## 3) c:(x * ^Cell) sss:((8 * y + 2) * Bit)",
        "prefix": "CFC0_",
        "operands": [
          {
            "name": "s",
            "type": "subslice",
            "bits_length_var_size": 3,
            "refs_length_var_size": 2,
            "bits_padding": 2,
            "refs_add": 0,
            "completion_tag": true,
            "max_bits": 57,
            "min_bits": 0,
            "max_refs": 3,
            "min_refs": 0,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 507,
          "function_name": "exec_store_slice"
        }
      ]
    },
    {
      "mnemonic": "SETLIBCODE",
      "since_version": 0,
      "doc": {
        "category": "app_actions",
        "description": "Creates an output action that would modify the collection of this smart contract libraries by adding or removing library with code given in _Cell_ `c`. If `x=0`, the library is actually removed if it was previously present in the collection (if not, this action does nothing). If `x=1`, the library is added as a private library, and if `x=2`, the library is added as a public library (and becomes available to all smart contracts if the current smart contract resides in the masterchain); if the library was present in the collection before, its public/private status is changed according to `x`. Values of `x` other than `0...2` are invalid.",
        "gas": "526",
        "fift": "SETLIBCODE",
        "fift_examples": [],
        "opcode": "FB06",
        "stack": "c x - "
      },
      "bytecode": { "tlb": "#FB06", "prefix": "FB06", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell"
              ]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": [
            { "type": "constant", "index": 5 }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            { "type": "constant", "index": 5 }
          ]
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "setlibcode"
        }
      ]
    },
    {
      "mnemonic": "ISNAN",
      "since_version": 0,
      "doc": {
        "category": "compare_int",
        "description": "Checks whether `x` is a `NaN`.",
        "gas": "18",
        "fift": "ISNAN",
        "fift_examples": [],
        "opcode": "C4",
        "stack": "x - x=NaN"
      },
      "bytecode": { "tlb": "#C4", "prefix": "C4", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 1007,
          "function_name": "exec_is_nan"
        }
      ]
    },
    {
      "mnemonic": "RSHIFT_VAR",
      "since_version": 0,
      "doc": {
        "category": "arithm_logical",
        "description": "`0 <= y <= 1023`",
        "gas": "18",
        "fift": "RSHIFT",
        "fift_examples": [],
        "opcode": "AD",
        "stack": "x y - floor(x/2^y)"
      },
      "bytecode": { "tlb": "#AD", "prefix": "AD", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 731,
          "function_name": "exec_rshift_tinyint8"
        }
      ]
    },
    {
      "mnemonic": "PREVMCBLOCKS",
      "since_version": 4,
      "doc": {
        "category": "app_config",
        "description": "Retrives `last_mc_blocks` part of PrevBlocksInfo from c7 (parameter 13).",
        "gas": "",
        "fift": "PREVMCBLOCKS",
        "fift_examples": [],
        "opcode": "F83400",
        "stack": "- t"
      },
      "bytecode": { "tlb": "#F83400", "prefix": "F83400", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [],
          "registers": [
            { "type": "constant", "index": 7 }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": [
                "Tuple"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "prev_mc_blocks"
        }
      ]
    },
    {
      "mnemonic": "PUSHNAN",
      "since_version": 0,
      "doc": {
        "category": "const_int",
        "description": "Pushes a `NaN`.",
        "gas": "26",
        "fift": "PUSHNAN",
        "fift_examples": [],
        "opcode": "83FF",
        "stack": "- NaN"
      },
      "bytecode": { "tlb": "#83FF", "prefix": "83FF", "operands": [] },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            { "type": "const", "value_type": "Integer", "value": null }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 120,
          "function_name": "exec_push_nan"
        }
      ]
    },
    {
      "mnemonic": "SETINDEX",
      "since_version": 0,
      "doc": {
        "category": "tuple",
        "description": "Computes _Tuple_ `t'` that differs from `t` only at position `t'_{k+1}`, which is set to `x`.\n`0 <= k <= 15`\nIf `k >= |t|`, throws a range check exception.",
        "gas": "26+|t|",
        "fift": "[k] SETINDEX",
        "fift_examples": [],
        "opcode": "6F5k",
        "stack": "t x - t'"
      },
      "bytecode": {
        "tlb": "#6F5 k:uint4",
        "prefix": "6F5",
        "operands": [
          {
            "name": "k",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": [
                "Tuple"
              ]
            },
            { "type": "simple", "name": "x" }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t2",
              "value_types": [
                "Tuple"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tupleops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tupleops.cpp",
          "line": 222,
          "function_name": "exec_tuple_set_index"
        }
      ]
    },
    {
      "mnemonic": "DICTUGETPREV",
      "since_version": 0,
      "doc": {
        "category": "dict_next",
        "description": "Similar to `DICTGETPREV`, but interprets keys as unsigned `n`-bit integers.",
        "gas": "",
        "fift": "DICTUGETPREV",
        "fift_examples": [],
        "opcode": "F47E",
        "stack": "i D n - x' i' -1 or 0"
      },
      "bytecode": { "tlb": "#F47E", "prefix": "F47E", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                { "value": 0, "stack": [] },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x2",
                      "value_types": [
                        "Slice"
                      ]
                    },
                    {
                      "type": "simple",
                      "name": "i2",
                      "value_types": [
                        "Integer"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 523,
          "function_name": "exec_dict_getnear"
        }
      ]
    },
    {
      "mnemonic": "DICTIMIN",
      "since_version": 0,
      "doc": {
        "category": "dict_min",
        "description": "Similar to `DICTMIN`, but computes the minimal key `i` under the assumption that all keys are big-endian signed `n`-bit integers. Notice that the key and value returned may differ from those computed by `DICTMIN` and `DICTUMIN`.",
        "gas": "",
        "fift": "DICTIMIN",
        "fift_examples": [],
        "opcode": "F484",
        "stack": "D n - x i -1 or 0"
      },
      "bytecode": { "tlb": "#F484", "prefix": "F484", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                { "value": 0, "stack": [] },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": [
                        "Slice"
                      ]
                    },
                    {
                      "type": "simple",
                      "name": "i",
                      "value_types": [
                        "Integer"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 470,
          "function_name": "exec_dict_getmin"
        }
      ]
    },
    {
      "mnemonic": "QTLEN",
      "since_version": 0,
      "doc": {
        "category": "tuple",
        "description": "Similar to `TLEN`, but returns `-1` if `t` is not a _Tuple_.",
        "gas": "26",
        "fift": "QTLEN",
        "fift_examples": [],
        "opcode": "6F89",
        "stack": "t - n or -1"
      },
      "bytecode": { "tlb": "#6F89", "prefix": "6F89", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": [
                "Tuple"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tupleops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tupleops.cpp",
          "line": 273,
          "function_name": "exec_tuple_length_quiet"
        }
      ]
    },
    {
      "mnemonic": "SENDMSG",
      "since_version": 4,
      "doc": {
        "category": "app_actions",
        "description": "Creates an output action and returns a fee for creating a message. Mode has the same effect as in the case of `SENDRAWMSG`. Additionally `+1024` means - do not create an action, only estimate fee. Other modes affect the fee calculation as follows: `+64` substitutes the entire balance of the incoming message as an outcoming value (slightly inaccurate, gas expenses that cannot be estimated before the computation is completed are not taken into account), `+128` substitutes the value of the entire balance of the contract before the start of the computation phase (slightly inaccurate, since gas expenses that cannot be estimated before the completion of the computation phase are not taken into account).",
        "gas": "526",
        "fift": "SENDMSG",
        "fift_examples": [],
        "opcode": "FB08",
        "stack": "c x - fee"
      },
      "bytecode": { "tlb": "#FB08", "prefix": "FB08", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell"
              ]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": [
            { "type": "constant", "index": 5 }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "fee",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": [
            { "type": "constant", "index": 5 }
          ]
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "sendmsg"
        }
      ]
    },
    {
      "mnemonic": "DICTUADD",
      "since_version": 0,
      "doc": {
        "category": "dict_set",
        "description": "`DICTADD`, but with `i` an unsigned `n`-bit integer.",
        "gas": "",
        "fift": "DICTUADD",
        "fift_examples": [],
        "opcode": "F436",
        "stack": "x i D n - D' -1 or D 0"
      },
      "bytecode": { "tlb": "#F436", "prefix": "F436", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": [
                        "Slice"
                      ]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": [
                        "Slice"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 271,
          "function_name": "exec_dict_set"
        }
      ]
    },
    {
      "mnemonic": "IFRETALT",
      "since_version": 0,
      "doc": {
        "category": "cont_conditional",
        "description": "Performs `RETALT` if integer `f!=0`.",
        "gas": "26",
        "fift": "IFRETALT",
        "fift_examples": [],
        "opcode": "E308",
        "stack": "f -"
      },
      "bytecode": { "tlb": "#E308", "prefix": "E308", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": {
        "branches": [
          { "type": "register", "index": 1 }
        ],
        "nobranch": true
      },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 421,
          "function_name": "exec_ifretalt"
        }
      ]
    },
    {
      "mnemonic": "PREVKEYBLOCK",
      "since_version": 4,
      "doc": {
        "category": "app_config",
        "description": "Retrives `prev_key_block` part of PrevBlocksInfo from c7 (parameter 13).",
        "gas": "",
        "fift": "PREVKEYBLOCK",
        "fift_examples": [],
        "opcode": "F83401",
        "stack": "- t"
      },
      "bytecode": { "tlb": "#F83401", "prefix": "F83401", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [],
          "registers": [
            { "type": "constant", "index": 7 }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": [
                "Tuple"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "prev_key_block"
        }
      ]
    },
    {
      "mnemonic": "MULRSHIFTR",
      "since_version": 0,
      "doc": {
        "category": "arithm_div",
        "description": "",
        "gas": "34",
        "fift": "[tt+1] MULRSHIFTR#",
        "fift_examples": [],
        "opcode": "A9B5tt",
        "stack": "x y - round(x*y/2^(tt+1))"
      },
      "bytecode": {
        "tlb": "#A9B5 tt:uint8",
        "prefix": "A9B5",
        "operands": [
          {
            "name": "t",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 231,
          "function_name": "exec_mul"
        }
      ]
    },
    {
      "mnemonic": "DICTISET",
      "since_version": 0,
      "doc": {
        "category": "dict_set",
        "description": "Similar to `DICTSET`, but with the key represented by a (big-endian) signed `n`-bit integer `i`. If `i` does not fit into `n` bits, a range check exception is generated.",
        "gas": "",
        "fift": "DICTISET",
        "fift_examples": [],
        "opcode": "F414",
        "stack": "x i D n - D'"
      },
      "bytecode": { "tlb": "#F414", "prefix": "F414", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 271,
          "function_name": "exec_dict_set"
        }
      ]
    },
    {
      "mnemonic": "DICTGETOPTREF",
      "since_version": 0,
      "doc": {
        "category": "dict_mayberef",
        "description": "A variant of `DICTGETREF` that returns _Null_ instead of the value `c^?` if the key `k` is absent from dictionary `D`.",
        "gas": "",
        "fift": "DICTGETOPTREF",
        "fift_examples": [],
        "opcode": "F469",
        "stack": "k D n - c^?"
      },
      "bytecode": { "tlb": "#F469", "prefix": "F469", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "k",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell",
                "Null"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 247,
          "function_name": "exec_dict_get_optref"
        }
      ]
    },
    {
      "mnemonic": "CMP",
      "since_version": 0,
      "doc": {
        "category": "compare_int",
        "description": "Computes the sign of `x-y`:\n`-1` if `x<y`, `0` if `x=y`, `1` if `x>y`.\nNo integer overflow can occur here unless `x` or `y` is a `NaN`.",
        "gas": "18",
        "fift": "CMP",
        "fift_examples": [],
        "opcode": "BF",
        "stack": "x y - sgn(x-y)"
      },
      "bytecode": { "tlb": "#BF", "prefix": "BF", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 975,
          "function_name": "exec_cmp"
        }
      ]
    },
    {
      "mnemonic": "RIST255_MUL",
      "since_version": 4,
      "doc": {
        "category": "app_crypto",
        "description": "Multiplies point `x` by a scalar `n`. Any `n` is valid, including negative.",
        "gas": "2026",
        "fift": "RIST255_MUL",
        "fift_examples": [],
        "opcode": "F924",
        "stack": "x n - x*n"
      },
      "bytecode": { "tlb": "#F924", "prefix": "F924", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "rist255_mul"
        }
      ]
    },
    {
      "mnemonic": "SDCUTFIRST",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Returns the first `0 <= l <= 1023` bits of `s`. It is equivalent to `PLDSLICEX`.",
        "gas": "26",
        "fift": "SDCUTFIRST",
        "fift_examples": [],
        "opcode": "D720",
        "stack": "s l - s'"
      },
      "bytecode": { "tlb": "#D720", "prefix": "D720", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1459,
          "function_name": "exec_slice_op_args"
        }
      ]
    },
    {
      "mnemonic": "SDEPTH",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Returns the depth of _Slice_ `s`. If `s` has no references, then `x=0`; otherwise `x` is one plus the maximum of depths of cells referred to from `s`.",
        "gas": "26",
        "fift": "SDEPTH",
        "fift_examples": [],
        "opcode": "D764",
        "stack": "s - x"
      },
      "bytecode": { "tlb": "#D764", "prefix": "D764", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1386,
          "function_name": "exec_slice_depth"
        }
      ]
    },
    {
      "mnemonic": "STONES",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Stores `n` binary ones into _Builder_ `b`.",
        "gas": "26",
        "fift": "STONES",
        "fift_examples": [],
        "opcode": "CF41",
        "stack": "b n - b'"
      },
      "bytecode": { "tlb": "#CF41", "prefix": "CF41", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 752,
          "function_name": "exec_store_same"
        }
      ]
    },
    {
      "mnemonic": "HASHEXTA_SHA256",
      "since_version": 4,
      "doc": {
        "category": "app_crypto",
        "description": "Calculates hash of the concatenation of slices (or builders) `s_1...s_n`. Appends the resulting hash to a builder `b`.",
        "gas": "1/33 gas per byte",
        "fift": "HASHEXTA_SHA256",
        "fift_examples": [],
        "opcode": "F90600",
        "stack": "b s_1 ... s_n n - b'"
      },
      "bytecode": { "tlb": "#F90600", "prefix": "F90600", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            },
            {
              "type": "array",
              "name": "input_parts",
              "length_var": "n",
              "array_entry": [
                {
                  "type": "simple",
                  "name": "s",
                  "value_types": [
                    "Slice",
                    "Builder"
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "hash_exta_sha256"
        }
      ]
    },
    {
      "mnemonic": "RIST255_MULBASE",
      "since_version": 4,
      "doc": {
        "category": "app_crypto",
        "description": "Multiplies the generator point `g` by a scalar `n`. Any `n` is valid, including negative.",
        "gas": "776",
        "fift": "RIST255_MULBASE",
        "fift_examples": [],
        "opcode": "F925",
        "stack": "n - g*n"
      },
      "bytecode": { "tlb": "#F925", "prefix": "F925", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "rist255_mulbase"
        }
      ]
    },
    {
      "mnemonic": "GETGLOBVAR",
      "since_version": 0,
      "doc": {
        "category": "app_global",
        "description": "Returns the `k`-th global variable for `0 <= k < 255`.\nEquivalent to `c7 PUSHCTR` `SWAP` `INDEXVARQ`.",
        "gas": "26",
        "fift": "GETGLOBVAR",
        "fift_examples": [],
        "opcode": "F840",
        "stack": "k - x"
      },
      "bytecode": { "tlb": "#F840", "prefix": "F840", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "k",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": [
            { "type": "constant", "index": 7 }
          ]
        },
        "outputs": {
          "stack": [
            { "type": "simple", "name": "x" }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "get_global_var"
        }
      ]
    },
    {
      "mnemonic": "DICTIDEL",
      "since_version": 0,
      "doc": {
        "category": "dict_delete",
        "description": "A version of `DICTDEL` with the key represented by a signed `n`-bit _Integer_ `i`. If `i` does not fit into `n` bits, simply returns `D` `0` (''key not found, dictionary unmodified'').",
        "gas": "",
        "fift": "DICTIDEL",
        "fift_examples": [],
        "opcode": "F45A",
        "stack": "i D n - D' ?"
      },
      "bytecode": { "tlb": "#F45A", "prefix": "F45A", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": [
                        "Slice",
                        "Null"
                      ]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": [
                        "Slice",
                        "Null"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 374,
          "function_name": "exec_dict_delete"
        }
      ]
    },
    {
      "mnemonic": "SDBEGINSQ",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "A quiet version of `SDBEGINS`.",
        "gas": "31",
        "fift": "[slice] SDBEGINSQ",
        "fift_examples": [],
        "opcode": "D72E_xsss",
        "stack": "s - s'' -1 or s 0"
      },
      "bytecode": {
        "tlb": "#D72E_ x:(## 7) sss:((8 * x + 3) * Bit)",
        "prefix": "D72E_",
        "operands": [
          {
            "name": "s",
            "type": "subslice",
            "bits_length_var_size": 7,
            "bits_padding": 3,
            "completion_tag": true,
            "max_bits": 1018,
            "min_bits": 0,
            "max_refs": 0,
            "min_refs": 0,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "s",
                      "value_types": [
                        "Slice"
                      ]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "s3",
                      "value_types": [
                        "Slice"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1212,
          "function_name": "exec_slice_begins_with_const"
        }
      ]
    },
    {
      "mnemonic": "SCUTLAST",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Returns the last `0 <= l <= 1023` data bits and last `0 <= r <= 4` references of `s`.",
        "gas": "26",
        "fift": "SCUTLAST",
        "fift_examples": [],
        "opcode": "D732",
        "stack": "s l r - s'"
      },
      "bytecode": { "tlb": "#D732", "prefix": "D732", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1488,
          "function_name": "exec_slice_op_args2"
        }
      ]
    },
    {
      "mnemonic": "DICTUDELGETREF",
      "since_version": 0,
      "doc": {
        "category": "dict_delete",
        "description": "`DICTDELGETREF`, but with `i` an unsigned `n`-bit integer.",
        "gas": "",
        "fift": "DICTUDELGETREF",
        "fift_examples": [],
        "opcode": "F467",
        "stack": "i D n - D' c -1 or D 0"
      },
      "bytecode": { "tlb": "#F467", "prefix": "F467", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": [
                        "Slice",
                        "Null"
                      ]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": [
                        "Slice",
                        "Null"
                      ]
                    },
                    {
                      "type": "simple",
                      "name": "c",
                      "value_types": [
                        "Cell"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 401,
          "function_name": "exec_dict_deleteget"
        }
      ]
    },
    {
      "mnemonic": "PLDDICTQ",
      "since_version": 0,
      "doc": {
        "category": "dict_serial",
        "description": "A quiet version of `PLDDICT`.",
        "gas": "26",
        "fift": "PLDDICTQ",
        "fift_examples": [],
        "opcode": "F407",
        "stack": "s - D -1 or 0"
      },
      "bytecode": { "tlb": "#F407", "prefix": "F407", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                { "value": 0, "stack": [] },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": [
                        "Slice",
                        "Null"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 148,
          "function_name": "exec_load_dict"
        }
      ]
    },
    {
      "mnemonic": "DICTDELGET",
      "since_version": 0,
      "doc": {
        "category": "dict_delete",
        "description": "Deletes `n`-bit key, represented by a _Slice_ `k`, from dictionary `D`. If the key is present, returns the modified dictionary `D'`, the original value `x` associated with the key `k` (represented by a _Slice_), and the success flag `-1`. Otherwise, returns the original dictionary `D` and `0`.",
        "gas": "",
        "fift": "DICTDELGET",
        "fift_examples": [],
        "opcode": "F462",
        "stack": "k D n - D' x -1 or D 0"
      },
      "bytecode": { "tlb": "#F462", "prefix": "F462", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "k",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": [
                        "Slice",
                        "Null"
                      ]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": [
                        "Slice",
                        "Null"
                      ]
                    },
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": [
                        "Slice"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 401,
          "function_name": "exec_dict_deleteget"
        }
      ]
    },
    {
      "mnemonic": "GETGASFEESIMPLE",
      "since_version": 6,
      "doc": {
        "category": "app_config",
        "description": "Same as `GETGASFEE`, but without flat price (just `(gas_used * price) / 2^16)`.",
        "gas": "",
        "fift": "GETGASFEESIMPLE",
        "fift_examples": [],
        "opcode": "F83B",
        "stack": "gas_used is_mc - price"
      },
      "bytecode": { "tlb": "#F83B", "prefix": "F83B", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "gas_used",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "is_mc",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": [
            { "type": "constant", "index": 7 }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "price",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "get_gas_fee_simple"
        }
      ]
    },
    {
      "mnemonic": "RSHIFTC",
      "since_version": 0,
      "doc": {
        "category": "arithm_div",
        "description": "",
        "gas": "34",
        "fift": "[tt+1] RSHIFTC#",
        "fift_examples": [],
        "opcode": "A936tt",
        "stack": "x - ceil(x/2^(tt+1))"
      },
      "bytecode": {
        "tlb": "#A936 tt:uint8",
        "prefix": "A936",
        "operands": [
          {
            "name": "t",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 749,
          "function_name": "exec_rshift"
        }
      ]
    },
    {
      "mnemonic": "SDPFXREV",
      "since_version": 0,
      "doc": {
        "category": "compare_other",
        "description": "Checks whether `s'` is a prefix of `s`, equivalent to `SWAP` `SDPFX`.",
        "gas": "26",
        "fift": "SDPFXREV",
        "fift_examples": [],
        "opcode": "C709",
        "stack": "s s' - ?"
      },
      "bytecode": { "tlb": "#C709", "prefix": "C709", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 321,
          "function_name": "exec_bin_cs_cmp"
        }
      ]
    },
    {
      "mnemonic": "QMUL",
      "since_version": 0,
      "doc": {
        "category": "arithm_quiet",
        "description": "",
        "gas": "26",
        "fift": "QMUL",
        "fift_examples": [],
        "opcode": "B7A8",
        "stack": "x y - x*y"
      },
      "bytecode": { "tlb": "#B7A8", "prefix": "B7A8", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 231,
          "function_name": "exec_mul"
        }
      ]
    },
    {
      "mnemonic": "QMULDIVMOD",
      "since_version": 0,
      "doc": {
        "category": "arithm_quiet",
        "description": "",
        "gas": "34",
        "fift": "QMULDIVMOD",
        "fift_examples": [],
        "opcode": "B7A98C",
        "stack": "x y z - q r"
      },
      "bytecode": { "tlb": "#B7A98C", "prefix": "B7A98C", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 231,
          "function_name": "exec_mul"
        }
      ]
    },
    {
      "mnemonic": "DICTIGETNEXT",
      "since_version": 0,
      "doc": {
        "category": "dict_next",
        "description": "Similar to `DICTGETNEXT`, but interprets all keys in dictionary `D` as big-endian signed `n`-bit integers, and computes the minimal key `i'` that is larger than _Integer_ `i` (which does not necessarily fit into `n` bits).",
        "gas": "",
        "fift": "DICTIGETNEXT",
        "fift_examples": [],
        "opcode": "F478",
        "stack": "i D n - x' i' -1 or 0"
      },
      "bytecode": { "tlb": "#F478", "prefix": "F478", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                { "value": 0, "stack": [] },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x2",
                      "value_types": [
                        "Slice"
                      ]
                    },
                    {
                      "type": "simple",
                      "name": "i2",
                      "value_types": [
                        "Integer"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 523,
          "function_name": "exec_dict_getnear"
        }
      ]
    },
    {
      "mnemonic": "DICTSET",
      "since_version": 0,
      "doc": {
        "category": "dict_set",
        "description": "Sets the value associated with `n`-bit key `k` (represented by a _Slice_ as in `DICTGET`) in dictionary `D` (also represented by a _Slice_) to value `x` (again a _Slice_), and returns the resulting dictionary as `D'`.",
        "gas": "",
        "fift": "DICTSET",
        "fift_examples": [],
        "opcode": "F412",
        "stack": "x k D n - D'"
      },
      "bytecode": { "tlb": "#F412", "prefix": "F412", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 271,
          "function_name": "exec_dict_set"
        }
      ]
    },
    {
      "mnemonic": "LDULE4",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Loads a little-endian unsigned 32-bit integer.",
        "gas": "26",
        "fift": "LDULE4",
        "fift_examples": [],
        "opcode": "D751",
        "stack": "s - x s'"
      },
      "bytecode": { "tlb": "#D751", "prefix": "D751", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 971,
          "function_name": "exec_load_int_fixed"
        }
      ]
    },
    {
      "mnemonic": "DICTSETREF",
      "since_version": 0,
      "doc": {
        "category": "dict_set",
        "description": "Similar to `DICTSET`, but with the value set to a reference to _Cell_ `c`.",
        "gas": "",
        "fift": "DICTSETREF",
        "fift_examples": [],
        "opcode": "F413",
        "stack": "c k D n - D'"
      },
      "bytecode": { "tlb": "#F413", "prefix": "F413", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell"
              ]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 271,
          "function_name": "exec_dict_set"
        }
      ]
    },
    {
      "mnemonic": "DICTUADDREF",
      "since_version": 0,
      "doc": {
        "category": "dict_set",
        "description": "`DICTADDREF`, but with `i` an unsigned `n`-bit integer.",
        "gas": "",
        "fift": "DICTUADDREF",
        "fift_examples": [],
        "opcode": "F437",
        "stack": "c i D n - D' -1 or D 0"
      },
      "bytecode": { "tlb": "#F437", "prefix": "F437", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell"
              ]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": [
                        "Slice"
                      ]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": [
                        "Slice"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 271,
          "function_name": "exec_dict_set"
        }
      ]
    },
    {
      "mnemonic": "GLOBALID",
      "since_version": 4,
      "doc": {
        "category": "app_config",
        "description": "Retrieves `global_id` from 19 network config.",
        "gas": "",
        "fift": "GLOBALID",
        "fift_examples": [],
        "opcode": "F835",
        "stack": "- i"
      },
      "bytecode": { "tlb": "#F835", "prefix": "F835", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [],
          "registers": [
            { "type": "constant", "index": 7 }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "get_global_id"
        }
      ]
    },
    {
      "mnemonic": "SDCNTTRAIL1",
      "since_version": 0,
      "doc": {
        "category": "compare_other",
        "description": "Returns the number of trailing ones in `s`.",
        "gas": "26",
        "fift": "SDCNTTRAIL1",
        "fift_examples": [],
        "opcode": "C713",
        "stack": "s - n"
      },
      "bytecode": { "tlb": "#C713", "prefix": "C713", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 331,
          "function_name": "exec_iun_cs_cmp"
        }
      ]
    },
    {
      "mnemonic": "STBREF",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Equivalent to `SWAP` `STBREFR`.",
        "gas": "526",
        "fift": "STBREF",
        "fift_examples": [],
        "opcode": "CF11",
        "stack": "b' b - b''"
      },
      "bytecode": { "tlb": "#CF11", "prefix": "CF11", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "child",
              "value_types": [
                "Builder"
              ]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 461,
          "function_name": "exec_store_builder_as_ref"
        }
      ]
    },
    {
      "mnemonic": "JMPXDATA",
      "since_version": 0,
      "doc": {
        "category": "cont_basic",
        "description": "Similar to `CALLCC`, but the remainder of the current continuation (the old value of `cc`) is converted into a _Slice_ before pushing it into the stack of `c`.",
        "gas": "26",
        "fift": "JMPXDATA",
        "fift_examples": [],
        "opcode": "DB35",
        "stack": "c - "
      },
      "bytecode": { "tlb": "#DB35", "prefix": "DB35", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Continuation"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": {
        "branches": [
          { "type": "variable", "var_name": "c" }
        ],
        "nobranch": false
      },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 96,
          "function_name": "exec_jmpx_data"
        }
      ]
    },
    {
      "mnemonic": "ENDXC",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "If `x!=0`, creates a _special_ or _exotic_ cell from _Builder_ `b`.\nThe type of the exotic cell must be stored in the first 8 bits of `b`.\nIf `x=0`, it is equivalent to `ENDC`. Otherwise some validity checks on the data and references of `b` are performed before creating the exotic cell.",
        "gas": "526",
        "fift": "ENDXC",
        "fift_examples": [],
        "opcode": "CF23",
        "stack": "b x - c"
      },
      "bytecode": { "tlb": "#CF23", "prefix": "CF23", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 349,
          "function_name": "exec_builder_to_special_cell"
        }
      ]
    },
    {
      "mnemonic": "LSHIFTDIVC",
      "since_version": 0,
      "doc": {
        "category": "arithm_div",
        "description": "",
        "gas": "26",
        "fift": "[tt+1] LSHIFT#DIVC",
        "fift_examples": [],
        "opcode": "A9D6tt",
        "stack": "x y - ceil(2^(tt+1)*x/y)"
      },
      "bytecode": {
        "tlb": "#A9D6 tt:uint8",
        "prefix": "A9D6",
        "operands": [
          {
            "name": "t",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 740,
          "function_name": "exec_lshift"
        }
      ]
    },
    {
      "mnemonic": "HASHEXT_SHA512",
      "since_version": 4,
      "doc": {
        "category": "app_crypto",
        "description": "Calculates and returns hash of the concatenation of slices (or builders) `s_1...s_n`.",
        "gas": "1/16 gas per byte",
        "fift": "HASHEXT_SHA512",
        "fift_examples": [],
        "opcode": "F90401",
        "stack": "s_1 ... s_n n - h1 h2"
      },
      "bytecode": { "tlb": "#F90401", "prefix": "F90401", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "array",
              "name": "input_parts",
              "length_var": "n",
              "array_entry": [
                {
                  "type": "simple",
                  "name": "s",
                  "value_types": [
                    "Slice",
                    "Builder"
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "h1",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "h2",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "hash_ext_sha512"
        }
      ]
    },
    {
      "mnemonic": "RIST255_FROMHASH",
      "since_version": 4,
      "doc": {
        "category": "app_crypto",
        "description": "Deterministically generates a valid point `x` from a 512-bit hash (given as two 256-bit integers).",
        "gas": "626",
        "fift": "RIST255_FROMHASH",
        "fift_examples": [],
        "opcode": "F920",
        "stack": "h1 h2 - x"
      },
      "bytecode": { "tlb": "#F920", "prefix": "F920", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "h1",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "h2",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "rist255_fromhash"
        }
      ]
    },
    {
      "mnemonic": "RIST255_PUSHL",
      "since_version": 4,
      "doc": {
        "category": "app_crypto",
        "description": "Pushes integer l=2^252+27742317777372353535851937790883648493, which is the order of the group.",
        "gas": "26",
        "fift": "RIST255_PUSHL",
        "fift_examples": [],
        "opcode": "F926",
        "stack": "- l"
      },
      "bytecode": { "tlb": "#F926", "prefix": "F926", "operands": [] },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "rist255_pushl"
        }
      ]
    },
    {
      "mnemonic": "RIST255_SUB",
      "since_version": 4,
      "doc": {
        "category": "app_crypto",
        "description": "Subtraction of two points on curve.",
        "gas": "626",
        "fift": "RIST255_SUB",
        "fift_examples": [],
        "opcode": "F923",
        "stack": "x y - x-y"
      },
      "bytecode": { "tlb": "#F923", "prefix": "F923", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "rist255_sub"
        }
      ]
    },
    {
      "mnemonic": "DICTIMINREF",
      "since_version": 0,
      "doc": {
        "category": "dict_min",
        "description": "Similar to `DICTIMIN`, but returns the only reference in the value.",
        "gas": "",
        "fift": "DICTIMINREF",
        "fift_examples": [],
        "opcode": "F485",
        "stack": "D n - c i -1 or 0"
      },
      "bytecode": { "tlb": "#F485", "prefix": "F485", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                { "value": 0, "stack": [] },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "c",
                      "value_types": [
                        "Cell"
                      ]
                    },
                    {
                      "type": "simple",
                      "name": "i",
                      "value_types": [
                        "Integer"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 470,
          "function_name": "exec_dict_getmin"
        }
      ]
    },
    {
      "mnemonic": "PLDUZ",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Preloads the first `32(c+1)` bits of _Slice_ `s` into an unsigned integer `x`, for `0 <= c <= 7`. If `s` is shorter than necessary, missing bits are assumed to be zero. This operation is intended to be used along with `IFBITJMP` and similar instructions.",
        "gas": "26",
        "fift": "[32(c+1)] PLDUZ",
        "fift_examples": [],
        "opcode": "D714_c",
        "stack": "s - s x"
      },
      "bytecode": {
        "tlb": "#D714_ c:uint3",
        "prefix": "D714_",
        "operands": [
          {
            "name": "c",
            "type": "uint",
            "size": 3,
            "min_value": 0,
            "max_value": 7,
            "display_hints": [
              { "type": "plduz" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1092,
          "function_name": "exec_load_int_fixed2"
        }
      ]
    },
    {
      "mnemonic": "DICTIGETJMPZ",
      "since_version": 0,
      "doc": {
        "category": "dict_special",
        "description": "A variant of `DICTIGETJMP` that returns index `i` on failure.",
        "gas": "",
        "fift": "DICTIGETJMPZ",
        "fift_examples": [],
        "opcode": "F4BC",
        "stack": "i D n - i or nothing"
      },
      "bytecode": { "tlb": "#F4BC", "prefix": "F4BC", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": {
        "branches": [
          { "type": "variable", "var_name": "x" }
        ],
        "nobranch": false
      },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 593,
          "function_name": "exec_dict_get_exec"
        }
      ]
    },
    {
      "mnemonic": "THROWARG",
      "since_version": 0,
      "doc": {
        "category": "exceptions",
        "description": "Throws exception `0 <= n <  2^11` with parameter `x`, by copying `x` and `n` into the stack of `c2` and transferring control to `c2`.",
        "gas": "84",
        "fift": "[n] THROWARG",
        "fift_examples": [],
        "opcode": "F2CC_n",
        "stack": "x - x nn"
      },
      "bytecode": {
        "tlb": "#F2CC_ n:uint11",
        "prefix": "F2CC_",
        "operands": [
          {
            "name": "n",
            "type": "uint",
            "size": 11,
            "min_value": 0,
            "max_value": 2047,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            { "type": "simple", "name": "x" }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": false },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 1140,
          "function_name": "exec_throw_arg_fixed"
        }
      ]
    },
    {
      "mnemonic": "DICTIADDREF",
      "since_version": 0,
      "doc": {
        "category": "dict_set",
        "description": "`DICTADDREF`, but with `i` a signed `n`-bit integer.",
        "gas": "",
        "fift": "DICTIADDREF",
        "fift_examples": [],
        "opcode": "F435",
        "stack": "c i D n - D' -1 or D 0"
      },
      "bytecode": { "tlb": "#F435", "prefix": "F435", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell"
              ]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": [
                        "Slice"
                      ]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": [
                        "Slice"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 271,
          "function_name": "exec_dict_set"
        }
      ]
    },
    {
      "mnemonic": "PUSHSLICE_REFS",
      "since_version": 0,
      "doc": {
        "category": "const_data",
        "description": "Pushes the slice `slice` into the stack.\n_Details:_ Pushes the (prefix) subslice of `cc.code` consisting of its first `1 <= r+1 <= 4` references and up to first `8xx+1` bits of data, with `0 <= xx <= 31`.\nA completion tag is also assumed.",
        "gas": "25",
        "fift": "[slice] PUSHSLICE\n[slice] SLICE",
        "fift_examples": [],
        "opcode": "8Crxxssss",
        "stack": "- s"
      },
      "bytecode": {
        "tlb": "#8C r:(## 2) xx:(## 5) c:((r + 1) * ^Cell) ssss:((8 * xx + 1) * Bit)",
        "prefix": "8C",
        "operands": [
          {
            "name": "slice",
            "type": "subslice",
            "bits_length_var_size": 5,
            "refs_length_var_size": 2,
            "bits_padding": 1,
            "refs_add": 1,
            "completion_tag": true,
            "max_bits": 248,
            "min_bits": 0,
            "max_refs": 4,
            "min_refs": 1,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 129,
          "function_name": "exec_push_slice_r"
        }
      ]
    },
    {
      "mnemonic": "DICTIGETPREVEQ",
      "since_version": 0,
      "doc": {
        "category": "dict_next",
        "description": "Similar to `DICTGETPREVEQ`, but interprets keys as signed `n`-bit integers.",
        "gas": "",
        "fift": "DICTIGETPREVEQ",
        "fift_examples": [],
        "opcode": "F47B",
        "stack": "i D n - x' i' -1 or 0"
      },
      "bytecode": { "tlb": "#F47B", "prefix": "F47B", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                { "value": 0, "stack": [] },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x2",
                      "value_types": [
                        "Slice"
                      ]
                    },
                    {
                      "type": "simple",
                      "name": "i2",
                      "value_types": [
                        "Integer"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 523,
          "function_name": "exec_dict_getnear"
        }
      ]
    },
    {
      "mnemonic": "PLDSLICE",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Returns the first `0 < cc+1 <= 256` bits of `s` as `s''`.",
        "gas": "34",
        "fift": "[cc+1] PLDSLICE",
        "fift_examples": [],
        "opcode": "D71Dcc",
        "stack": "s - s''"
      },
      "bytecode": {
        "tlb": "#D71D cc:uint8",
        "prefix": "D71D",
        "operands": [
          {
            "name": "c",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s3",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1139,
          "function_name": "exec_load_slice_fixed2"
        }
      ]
    },
    {
      "mnemonic": "DICTADDB",
      "since_version": 0,
      "doc": {
        "category": "dict_set_builder",
        "description": "",
        "gas": "",
        "fift": "DICTADDB",
        "fift_examples": [],
        "opcode": "F451",
        "stack": "b k D n - D' -1 or D 0"
      },
      "bytecode": { "tlb": "#F451", "prefix": "F451", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": [
                        "Slice"
                      ]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": [
                        "Slice"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 271,
          "function_name": "exec_dict_set"
        }
      ]
    },
    {
      "mnemonic": "LSHIFTDIVR",
      "since_version": 0,
      "doc": {
        "category": "arithm_div",
        "description": "",
        "gas": "34",
        "fift": "[tt+1] LSHIFT#DIVR",
        "fift_examples": [],
        "opcode": "A9D5tt",
        "stack": "x y - round(2^(tt+1)*x/y)"
      },
      "bytecode": {
        "tlb": "#A9D5 tt:uint8",
        "prefix": "A9D5",
        "operands": [
          {
            "name": "t",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 740,
          "function_name": "exec_lshift"
        }
      ]
    },
    {
      "mnemonic": "RUNVM",
      "since_version": 4,
      "doc": {
        "category": "cont_basic",
        "description": "Runs child VM with code `code` and stack `x_1...x_n`. Returns the resulting stack `x'_1...x'_m` and exitcode. Other arguments and return values are enabled by flags.",
        "gas": "",
        "fift": "flags RUNVM",
        "fift_examples": [],
        "opcode": "DB4fff",
        "stack": "x_1 ... x_n n code [r] [c4] [c7] [g_l] [g_m] - x'_1 ... x'_m exitcode [data'] [c4'] [c5] [g_c]"
      },
      "bytecode": {
        "tlb": "#DB4 flags:(## 12)",
        "prefix": "DB4",
        "operands": [
          {
            "name": "flags",
            "type": "uint",
            "size": 12,
            "min_value": 0,
            "max_value": 4095,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 33,
          "function_name": "exec_execute"
        }
      ]
    },
    {
      "mnemonic": "MULRSHIFTRMOD",
      "since_version": 0,
      "doc": {
        "category": "arithm_div",
        "description": "",
        "gas": "34",
        "fift": "MULRSHIFTR#MOD",
        "fift_examples": [],
        "opcode": "A9BD",
        "stack": "x y - q=round(x*y/2^(tt+1)) r=xy-q*2^(tt+1)"
      },
      "bytecode": {
        "tlb": "#A9BD",
        "prefix": "A9BD",
        "operands": [
          {
            "name": "t",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 231,
          "function_name": "exec_mul"
        }
      ]
    },
    {
      "mnemonic": "LSHIFTDIVMODR_VAR",
      "since_version": 0,
      "doc": {
        "category": "arithm_div",
        "description": "",
        "gas": "26",
        "fift": "LSHIFTDIVMODR",
        "fift_examples": [],
        "opcode": "A9CD",
        "stack": "x y z - q=round(2^z*x/y) r=2^z*x-q*y"
      },
      "bytecode": { "tlb": "#A9CD", "prefix": "A9CD", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 266,
          "function_name": "exec_divmod"
        }
      ]
    },
    {
      "mnemonic": "RSHIFTR_VAR",
      "since_version": 0,
      "doc": {
        "category": "arithm_div",
        "description": "",
        "gas": "26",
        "fift": "RSHIFTR",
        "fift_examples": [],
        "opcode": "A925",
        "stack": "x y - round(x/2^y)"
      },
      "bytecode": { "tlb": "#A925", "prefix": "A925", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 749,
          "function_name": "exec_rshift"
        }
      ]
    },
    {
      "mnemonic": "UFITS",
      "since_version": 0,
      "doc": {
        "category": "arithm_logical",
        "description": "Checks whether `x` is a `cc+1`-bit unsigned integer for `0 <= cc <= 255` (i.e., whether `0 <= x < 2^(cc+1)`).",
        "gas": "26/76",
        "fift": "[cc+1] UFITS",
        "fift_examples": [],
        "opcode": "B5cc",
        "stack": "x - x"
      },
      "bytecode": {
        "tlb": "#B5 cc:uint8",
        "prefix": "B5",
        "operands": [
          {
            "name": "c",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 817,
          "function_name": "exec_ufits_tinyint8"
        }
      ]
    },
    {
      "mnemonic": "DIVR",
      "since_version": 0,
      "doc": {
        "category": "arithm_div",
        "description": "`q'=round(x/y)`, `r'=x-y*q'`",
        "gas": "26",
        "fift": "DIVR",
        "fift_examples": [],
        "opcode": "A905",
        "stack": "x y - q'"
      },
      "bytecode": { "tlb": "#A905", "prefix": "A905", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 266,
          "function_name": "exec_divmod"
        }
      ]
    },
    {
      "mnemonic": "SGN",
      "since_version": 0,
      "doc": {
        "category": "compare_int",
        "description": "Computes the sign of an integer `x`:\n`-1` if `x<0`, `0` if `x=0`, `1` if `x>0`.",
        "gas": "18",
        "fift": "SGN",
        "fift_examples": [],
        "opcode": "B8",
        "stack": "x - sgn(x)"
      },
      "bytecode": { "tlb": "#B8", "prefix": "B8", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 961,
          "function_name": "exec_sgn"
        }
      ]
    },
    {
      "mnemonic": "STUR",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Equivalent to `SWAP` `[cc+1] STU`.",
        "gas": "34",
        "fift": "[cc+1] STUR",
        "fift_examples": [],
        "opcode": "CF0Bcc",
        "stack": "b x - b'"
      },
      "bytecode": {
        "tlb": "#CF0B cc:uint8",
        "prefix": "CF0B",
        "operands": [
          {
            "name": "c",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 407,
          "function_name": "exec_store_int"
        }
      ]
    },
    {
      "mnemonic": "SDBEGINS",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Checks whether `s` begins with constant bitstring `sss` of length `8x+3` (with continuation bit assumed), where `0 <= x <= 127`, and removes `sss` from `s` on success.",
        "gas": "31",
        "fift": "[slice] SDBEGINS",
        "fift_examples": [],
        "opcode": "D72A_xsss",
        "stack": "s - s''"
      },
      "bytecode": {
        "tlb": "#D72A_ x:(## 7) sss:((8 * x + 3) * Bit)",
        "prefix": "D72A_",
        "operands": [
          {
            "name": "s",
            "type": "subslice",
            "bits_length_var_size": 7,
            "bits_padding": 3,
            "completion_tag": true,
            "max_bits": 1018,
            "min_bits": 0,
            "max_refs": 0,
            "min_refs": 0,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s3",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1212,
          "function_name": "exec_slice_begins_with_const"
        }
      ]
    },
    {
      "mnemonic": "SDFIRST",
      "since_version": 0,
      "doc": {
        "category": "compare_other",
        "description": "Checks whether the first bit of _Slice_ `s` is a one.",
        "gas": "26",
        "fift": "SDFIRST",
        "fift_examples": [],
        "opcode": "C703",
        "stack": "s - ?"
      },
      "bytecode": { "tlb": "#C703", "prefix": "C703", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 317,
          "function_name": "exec_un_cs_cmp"
        }
      ]
    },
    {
      "mnemonic": "RIST255_VALIDATE",
      "since_version": 4,
      "doc": {
        "category": "app_crypto",
        "description": "Checks that integer `x` is a valid representation of some curve point. Throws range_chk on error.",
        "gas": "226",
        "fift": "RIST255_VALIDATE",
        "fift_examples": [],
        "opcode": "F921",
        "stack": "x -"
      },
      "bytecode": { "tlb": "#F921", "prefix": "F921", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "rist255_validate"
        }
      ]
    },
    {
      "mnemonic": "BCHKBITSQ_VAR",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Checks whether `x` bits can be stored into `b`, `0 <= x <= 1023`.",
        "gas": "26",
        "fift": "BCHKBITSQ",
        "fift_examples": [],
        "opcode": "CF3D",
        "stack": "b x - ?"
      },
      "bytecode": { "tlb": "#CF3D", "prefix": "CF3D", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 723,
          "function_name": "exec_builder_chk_bits"
        }
      ]
    },
    {
      "mnemonic": "DICTGETNEXTEQ",
      "since_version": 0,
      "doc": {
        "category": "dict_next",
        "description": "Similar to `DICTGETNEXT`, but computes the minimal key `k'` that is lexicographically greater than or equal to `k`.",
        "gas": "",
        "fift": "DICTGETNEXTEQ",
        "fift_examples": [],
        "opcode": "F475",
        "stack": "k D n - x' k' -1 or 0"
      },
      "bytecode": { "tlb": "#F475", "prefix": "F475", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "k",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                { "value": 0, "stack": [] },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x2",
                      "value_types": [
                        "Slice"
                      ]
                    },
                    {
                      "type": "simple",
                      "name": "k2",
                      "value_types": [
                        "Slice"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 523,
          "function_name": "exec_dict_getnear"
        }
      ]
    },
    {
      "mnemonic": "STULE4",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Stores a little-endian unsigned 32-bit integer.",
        "gas": "26",
        "fift": "STULE4",
        "fift_examples": [],
        "opcode": "CF29",
        "stack": "x b - b'"
      },
      "bytecode": { "tlb": "#CF29", "prefix": "CF29", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 407,
          "function_name": "exec_store_int"
        }
      ]
    },
    {
      "mnemonic": "DICTDEL",
      "since_version": 0,
      "doc": {
        "category": "dict_delete",
        "description": "Deletes `n`-bit key, represented by a _Slice_ `k`, from dictionary `D`. If the key is present, returns the modified dictionary `D'` and the success flag `-1`. Otherwise, returns the original dictionary `D` and `0`.",
        "gas": "",
        "fift": "DICTDEL",
        "fift_examples": [],
        "opcode": "F459",
        "stack": "k D n - D' -1 or D 0"
      },
      "bytecode": { "tlb": "#F459", "prefix": "F459", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "k",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": [
                        "Slice",
                        "Null"
                      ]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": [
                        "Slice",
                        "Null"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 374,
          "function_name": "exec_dict_delete"
        }
      ]
    },
    {
      "mnemonic": "DICTUGETNEXTEQ",
      "since_version": 0,
      "doc": {
        "category": "dict_next",
        "description": "Similar to `DICTGETNEXTEQ`, but interprets keys as unsigned `n`-bit integers.",
        "gas": "",
        "fift": "DICTUGETNEXTEQ",
        "fift_examples": [],
        "opcode": "F47D",
        "stack": "i D n - x' i' -1 or 0"
      },
      "bytecode": { "tlb": "#F47D", "prefix": "F47D", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                { "value": 0, "stack": [] },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x2",
                      "value_types": [
                        "Slice"
                      ]
                    },
                    {
                      "type": "simple",
                      "name": "i2",
                      "value_types": [
                        "Integer"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 523,
          "function_name": "exec_dict_getnear"
        }
      ]
    },
    {
      "mnemonic": "IFNOTRETALT",
      "since_version": 0,
      "doc": {
        "category": "cont_conditional",
        "description": "Performs `RETALT` if integer `f=0`.",
        "gas": "26",
        "fift": "IFNOTRETALT",
        "fift_examples": [],
        "opcode": "E309",
        "stack": "f -"
      },
      "bytecode": { "tlb": "#E309", "prefix": "E309", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": {
        "branches": [
          { "type": "register", "index": 1 }
        ],
        "nobranch": true
      },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 429,
          "function_name": "exec_ifnotretalt"
        }
      ]
    },
    {
      "mnemonic": "LDUXQ",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Quiet version of `LDUX`.",
        "gas": "26",
        "fift": "LDUXQ",
        "fift_examples": [],
        "opcode": "D705",
        "stack": "s l - x s' -1 or s 0"
      },
      "bytecode": { "tlb": "#D705", "prefix": "D705", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "s",
                      "value_types": [
                        "Slice"
                      ]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": [
                        "Integer"
                      ]
                    },
                    {
                      "type": "simple",
                      "name": "s2",
                      "value_types": [
                        "Slice"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1080,
          "function_name": "exec_load_int_var"
        }
      ]
    },
    {
      "mnemonic": "DICTMAX",
      "since_version": 0,
      "doc": {
        "category": "dict_min",
        "description": "Computes the maximal key `k` (represented by a _Slice_ with `n` data bits) in dictionary `D`, and returns `k` along with the associated value `x`.",
        "gas": "",
        "fift": "DICTMAX",
        "fift_examples": [],
        "opcode": "F48A",
        "stack": "D n - x k -1 or 0"
      },
      "bytecode": { "tlb": "#F48A", "prefix": "F48A", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                { "value": 0, "stack": [] },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": [
                        "Slice"
                      ]
                    },
                    {
                      "type": "simple",
                      "name": "k",
                      "value_types": [
                        "Slice"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 470,
          "function_name": "exec_dict_getmin"
        }
      ]
    },
    {
      "mnemonic": "STIR",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Equivalent to `SWAP` `[cc+1] STI`.",
        "gas": "34",
        "fift": "[cc+1] STIR",
        "fift_examples": [],
        "opcode": "CF0Acc",
        "stack": "b x - b'"
      },
      "bytecode": {
        "tlb": "#CF0A cc:uint8",
        "prefix": "CF0A",
        "operands": [
          {
            "name": "c",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 407,
          "function_name": "exec_store_int"
        }
      ]
    },
    {
      "mnemonic": "SDCNTLEAD0",
      "since_version": 0,
      "doc": {
        "category": "compare_other",
        "description": "Returns the number of leading zeroes in `s`.",
        "gas": "26",
        "fift": "SDCNTLEAD0",
        "fift_examples": [],
        "opcode": "C710",
        "stack": "s - n"
      },
      "bytecode": { "tlb": "#C710", "prefix": "C710", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 328,
          "function_name": "exec_iun_cs_cmp"
        }
      ]
    },
    {
      "mnemonic": "AGAINEND",
      "since_version": 0,
      "doc": {
        "category": "cont_loops",
        "description": "Similar to `AGAIN`, but performed with respect to the current continuation `cc`.",
        "gas": "18",
        "fift": "AGAINEND\nAGAIN:",
        "fift_examples": [],
        "opcode": "EB",
        "stack": "-"
      },
      "bytecode": { "tlb": "#EB", "prefix": "EB", "operands": [] },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": {
        "branches": [
          {
            "type": "special",
            "name": "again",
            "args": {
              "body": { "type": "cc" }
            }
          }
        ],
        "nobranch": false
      },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 550,
          "function_name": "exec_again_end"
        }
      ]
    },
    {
      "mnemonic": "DICTISETB",
      "since_version": 0,
      "doc": {
        "category": "dict_set_builder",
        "description": "",
        "gas": "",
        "fift": "DICTISETB",
        "fift_examples": [],
        "opcode": "F442",
        "stack": "b i D n - D'"
      },
      "bytecode": { "tlb": "#F442", "prefix": "F442", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 271,
          "function_name": "exec_dict_set"
        }
      ]
    },
    {
      "mnemonic": "DICTIREPLACE",
      "since_version": 0,
      "doc": {
        "category": "dict_set",
        "description": "`DICTREPLACE`, but with `i` a signed `n`-bit integer.",
        "gas": "",
        "fift": "DICTIREPLACE",
        "fift_examples": [],
        "opcode": "F424",
        "stack": "x i D n - D' -1 or D 0"
      },
      "bytecode": { "tlb": "#F424", "prefix": "F424", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": [
                        "Slice",
                        "Null"
                      ]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": [
                        "Slice"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 271,
          "function_name": "exec_dict_set"
        }
      ]
    },
    {
      "mnemonic": "PUSHNEGPOW2",
      "since_version": 0,
      "doc": {
        "category": "const_int",
        "description": "Pushes `-2^(xx+1)` for `0 <= xx <= 255`.",
        "gas": "26",
        "fift": "[xx+1] PUSHNEGPOW2",
        "fift_examples": [],
        "opcode": "85xx",
        "stack": "- -2^(xx+1)"
      },
      "bytecode": {
        "tlb": "#85 xx:uint8",
        "prefix": "85",
        "operands": [
          {
            "name": "x",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 139,
          "function_name": "exec_push_negpow2"
        }
      ]
    },
    {
      "mnemonic": "STREFR",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Equivalent to `SWAP` `STREF`.",
        "gas": "26",
        "fift": "STREFR",
        "fift_examples": [],
        "opcode": "CF14",
        "stack": "b c - b'"
      },
      "bytecode": { "tlb": "#CF14", "prefix": "CF14", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 438,
          "function_name": "exec_store_ref_rev"
        }
      ]
    },
    {
      "mnemonic": "BLS_G1_MULTIEXP",
      "since_version": 4,
      "doc": {
        "category": "app_crypto",
        "description": "Calculates `x_1*s_1+...+x_n*s_n` for G1 points `x_i` and scalars `s_i`. Returns zero point if `n=0`. Any `s_i` is valid, including negative.",
        "gas": "11409+n*630+n/floor(max(log2(n),4))*8820",
        "fift": "BLS_G1_MULTIEXP",
        "fift_examples": [],
        "opcode": "F93014",
        "stack": "x_1 s_1 ... x_n s_n n - x_1*s_1+...+x_n*s_n"
      },
      "bytecode": { "tlb": "#F93014", "prefix": "F93014", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "array",
              "name": "components",
              "length_var": "n",
              "array_entry": [
                {
                  "type": "simple",
                  "name": "x",
                  "value_types": [
                    "Slice"
                  ]
                },
                {
                  "type": "simple",
                  "name": "s",
                  "value_types": [
                    "Integer"
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "bls_g1_multiexp"
        }
      ]
    },
    {
      "mnemonic": "REWRITESTDADDRQ",
      "since_version": 0,
      "doc": {
        "category": "app_addr",
        "description": "A quiet version of primitive `REWRITESTDADDR`.",
        "gas": "26",
        "fift": "REWRITESTDADDRQ",
        "fift_examples": [],
        "opcode": "FA45",
        "stack": "s - x y -1 or 0"
      },
      "bytecode": { "tlb": "#FA45", "prefix": "FA45", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                { "value": 0, "stack": [] },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": [
                        "Integer"
                      ]
                    },
                    {
                      "type": "simple",
                      "name": "y",
                      "value_types": [
                        "Integer"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "rewritestdaddrq"
        }
      ]
    },
    {
      "mnemonic": "DICTIGETPREV",
      "since_version": 0,
      "doc": {
        "category": "dict_next",
        "description": "Similar to `DICTGETPREV`, but interprets keys as signed `n`-bit integers.",
        "gas": "",
        "fift": "DICTIGETPREV",
        "fift_examples": [],
        "opcode": "F47A",
        "stack": "i D n - x' i' -1 or 0"
      },
      "bytecode": { "tlb": "#F47A", "prefix": "F47A", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": [
                "Slice",
                "Null"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                { "value": 0, "stack": [] },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x2",
                      "value_types": [
                        "Slice"
                      ]
                    },
                    {
                      "type": "simple",
                      "name": "i2",
                      "value_types": [
                        "Integer"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "dictops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/dictops.cpp",
          "line": 523,
          "function_name": "exec_dict_getnear"
        }
      ]
    },
    {
      "mnemonic": "P256_CHKSIGNU",
      "since_version": 4,
      "doc": {
        "category": "app_crypto",
        "description": "Checks seck256r1-signature `sig` of a number `h` (a 256-bit unsigned integer, usually computed as the hash of some data) and public key `k`. Returns -1 on success, 0 on failure. Public key is a 33-byte slice (encoded according to Sec. 2.3.4 point 2 of [SECG SEC 1](https://www.secg.org/sec1-v2.pdf)). Signature `sig` is a 64-byte slice (two 256-bit unsigned integers `r` and `s`).",
        "gas": "3526",
        "fift": "P256_CHKSIGNU",
        "fift_examples": [],
        "opcode": "F914",
        "stack": "h sig k - ?"
      },
      "bytecode": { "tlb": "#F914", "prefix": "F914", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "d",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "sig",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tonops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tonops.cpp",
          "line": 0,
          "function_name": "p256_chksignu"
        }
      ]
    },
    {
      "mnemonic": "SETCONTARGS_N",
      "since_version": 0,
      "doc": {
        "category": "cont_stack",
        "description": "Pushes `0 <= r <= 15` values `x_1...x_r` into the stack of (a copy of) the continuation `c`, starting with `x_1`. When `n` is 15 (-1 in Fift notation), does nothing with `c.nargs`. For `0 <= n <= 14`, sets `c.nargs` to the final size of the stack of `c'` plus `n`. In other words, transforms `c` into a _closure_ or a _partially applied function_, with `0 <= n <= 14` arguments missing.",
        "gas": "26+s''",
        "fift": "[r] [n] SETCONTARGS",
        "fift_examples": [],
        "opcode": "ECrn",
        "stack": "x_1 x_2...x_r c - c'"
      },
      "bytecode": {
        "tlb": "#EC r:uint4 n:uint4",
        "prefix": "EC",
        "operands": [
          {
            "name": "r",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": []
          },
          {
            "name": "n",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "optional_nargs" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "array",
              "name": "args",
              "length_var": "r",
              "array_entry": [
                { "type": "simple", "name": "x" }
              ]
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Continuation"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c2",
              "value_types": [
                "Continuation"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 665,
          "function_name": "exec_setcontargs"
        }
      ]
    },
    {
      "mnemonic": "BLKSWX",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Pops integers `i`,`j` from the stack, then performs `[i] [j] BLKSWAP`.",
        "gas": "18",
        "fift": "BLKSWX",
        "fift_examples": [],
        "opcode": "63",
        "stack": ""
      },
      "bytecode": { "tlb": "#63", "prefix": "63", "operands": [] },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 436,
          "function_name": "exec_blkswap_x"
        }
      ]
    },
    {
      "mnemonic": "INDEXQ",
      "since_version": 0,
      "doc": {
        "category": "tuple",
        "description": "Returns the `k`-th element of a _Tuple_ `t`, where `0 <= k <= 15`. In other words, returns `x_{k+1}` if `t=(x_1,...,x_n)`. If `k>=n`, or if `t` is _Null_, returns a _Null_ instead of `x`.",
        "gas": "26",
        "fift": "[k] INDEXQ",
        "fift_examples": [],
        "opcode": "6F6k",
        "stack": "t - x"
      },
      "bytecode": {
        "tlb": "#6F6 k:uint4",
        "prefix": "6F6",
        "operands": [
          {
            "name": "k",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": [
                "Tuple",
                "Null"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            { "type": "simple", "name": "x" }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tupleops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tupleops.cpp",
          "line": 124,
          "function_name": "exec_tuple_quiet_index"
        }
      ]
    },
    {
      "mnemonic": "XLOAD",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Loads an exotic cell `c` and returns an ordinary cell `c'`. If `c` is already ordinary, does nothing. If `c` cannot be loaded, throws an exception.",
        "gas": "",
        "fift": "XLOAD",
        "fift_examples": [],
        "opcode": "D73A",
        "stack": "c - c'"
      },
      "bytecode": { "tlb": "#D73A", "prefix": "D73A", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c2",
              "value_types": [
                "Cell"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 891,
          "function_name": "exec_load_special_cell"
        }
      ]
    }
  ],
  "aliases": []
}
