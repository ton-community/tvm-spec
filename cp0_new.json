{
  "$schema": "./schema.json",
  "instructions": [
    {
      "mnemonic": "XCHG_0I",
      "since_version": 0,
      "doc": {
        "category": "stack_basic",
        "description": "Interchanges `s0` with `s[i]`, `1 <= i <= 15`.",
        "gas": "18",
        "fift": "s[i] XCHG0",
        "fift_examples": [],
        "opcode": "0i",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#0 i:(## 4) {1 <= i}",
        "prefix": "0",
        "operands_range_check": { "length": 4, "from": 1, "to": 15 },
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 1,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 43,
          "function_name": "exec_xchg0"
        }
      ]
    },
    {
      "mnemonic": "PUSH",
      "since_version": 0,
      "doc": {
        "category": "stack_basic",
        "description": "Pushes a copy of the old `s[i]` into the stack.",
        "gas": "18",
        "fift": "s[i] PUSH",
        "fift_examples": [],
        "opcode": "2i",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#2 i:uint4",
        "prefix": "2",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 109,
          "function_name": "exec_push"
        }
      ]
    },
    {
      "mnemonic": "LDU",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Loads an unsigned `cc+1`-bit integer `x` from _Slice_ `s`.",
        "gas": "26",
        "fift": "[cc+1] LDU",
        "fift_examples": [],
        "opcode": "D3cc",
        "stack": "s - x s'"
      },
      "bytecode": {
        "tlb": "#D3 cc:uint8",
        "prefix": "D3",
        "operands": [
          {
            "name": "c",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 971,
          "function_name": "exec_load_int_fixed"
        }
      ]
    },
    {
      "mnemonic": "PUSHINT_LONG",
      "since_version": 0,
      "doc": {
        "category": "const_int",
        "description": "Pushes integer `xxx`.\n_Details:_ 5-bit `0 <= l <= 30` determines the length `n=8l+19` of signed big-endian integer `xxx`.\nThe total length of this instruction is `l+4` bytes or `n+13=8l+32` bits.",
        "gas": "23",
        "fift": "[xxx] PUSHINT\n[xxx] INT",
        "fift_examples": [],
        "opcode": "82lxxx",
        "stack": "- xxx"
      },
      "bytecode": {
        "tlb": "#82 l:(## 5) xxx:(int (8 * l + 19))",
        "prefix": "82",
        "operands_range_check": { "length": 5, "from": 0, "to": 30 },
        "operands": [
          { "name": "x", "type": "pushint_long" }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 76,
          "function_name": "exec_push_int"
        }
      ]
    },
    {
      "mnemonic": "EQUAL",
      "since_version": 0,
      "doc": {
        "category": "compare_int",
        "description": "Returns `-1` if `x=y`, `0` otherwise.",
        "gas": "18",
        "fift": "EQUAL",
        "fift_examples": [],
        "opcode": "BA",
        "stack": "x y - x=y"
      },
      "bytecode": { "tlb": "#BA", "prefix": "BA", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 975,
          "function_name": "exec_cmp"
        }
      ]
    },
    {
      "mnemonic": "THROWIFNOT",
      "since_version": 0,
      "doc": {
        "category": "exceptions",
        "description": "For `0 <= n < 2^11`, an encoding of `[n] THROWIFNOT` for larger values of `n`.",
        "gas": "34/84",
        "fift": "[n] THROWIFNOT",
        "fift_examples": [],
        "opcode": "F2E4_n",
        "stack": "f - "
      },
      "bytecode": {
        "tlb": "#F2E4_ n:uint11",
        "prefix": "F2E4_",
        "operands": [
          {
            "name": "n",
            "type": "uint",
            "size": 11,
            "min_value": 0,
            "max_value": 2047,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 1130,
          "function_name": "exec_throw_fixed"
        }
      ]
    },
    {
      "mnemonic": "PUSHINT_16",
      "since_version": 0,
      "doc": {
        "category": "const_int",
        "description": "Pushes integer `xxxx`. `-2^15 <= xx < 2^15`.",
        "gas": "34",
        "fift": "[xxxx] PUSHINT\n[xxxx] INT",
        "fift_examples": [],
        "opcode": "81xxxx",
        "stack": "- xxxx"
      },
      "bytecode": {
        "tlb": "#81 xxxx:int16",
        "prefix": "81",
        "operands": [
          {
            "name": "x",
            "type": "int",
            "size": 16,
            "min_value": -32768,
            "max_value": 32767,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 61,
          "function_name": "exec_push_smallint"
        }
      ]
    },
    {
      "mnemonic": "POP",
      "since_version": 0,
      "doc": {
        "category": "stack_basic",
        "description": "Pops the old `s0` value into the old `s[i]`.",
        "gas": "18",
        "fift": "s[i] POP",
        "fift_examples": [],
        "opcode": "3i",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#3 i:uint4",
        "prefix": "3",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 143,
          "function_name": "exec_pop"
        }
      ]
    },
    {
      "mnemonic": "PUSHCONT_SHORT",
      "since_version": 0,
      "doc": {
        "category": "const_data",
        "description": "Pushes a continuation made from `builder`.\n_Details:_ Pushes an `x`-byte continuation for `0 <= x <= 15`.",
        "gas": "18",
        "fift": "[builder] PUSHCONT\n[builder] CONT",
        "fift_examples": [
          { "fift": "<{ code }> PUSHCONT <{ code }> CONT CONT:<{ code }>", "description": "Pushes a continuation with code `code`. Note that the assembler can replace `PUSHCONT` with `PUSHREFCONT` in certain situations (e.g. if there's not enough space in the current continuation)." }
        ],
        "opcode": "9xccc",
        "stack": "- c"
      },
      "bytecode": {
        "tlb": "#9 x:(## 4) ssss:((8 * x) * Bit)",
        "prefix": "9",
        "operands": [
          {
            "name": "s",
            "type": "subslice",
            "bits_length_var_size": 4,
            "bits_padding": 0,
            "completion_tag": false,
            "max_bits": 120,
            "min_bits": 0,
            "max_refs": 0,
            "min_refs": 0,
            "display_hints": [
              { "type": "continuation" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Continuation"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 165,
          "function_name": "exec_push_cont"
        }
      ]
    },
    {
      "mnemonic": "STU",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Stores an unsigned `cc+1`-bit integer `x` into _Builder_ `b`. In all other respects it is similar to `STI`.",
        "gas": "26",
        "fift": "[cc+1] STU",
        "fift_examples": [],
        "opcode": "CBcc",
        "stack": "x b - b'"
      },
      "bytecode": {
        "tlb": "#CB cc:uint8",
        "prefix": "CB",
        "operands": [
          {
            "name": "c",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 407,
          "function_name": "exec_store_int"
        }
      ]
    },
    {
      "mnemonic": "PUSHINT_4",
      "since_version": 0,
      "doc": {
        "category": "const_int",
        "description": "Pushes integer `x` into the stack. `-5 <= x <= 10`.\nHere `i` equals four lower-order bits of `x` (`i=x mod 16`).",
        "gas": "18",
        "fift": "[x] PUSHINT\n[x] INT",
        "fift_examples": [],
        "opcode": "7i",
        "stack": "- x"
      },
      "bytecode": {
        "tlb": "#7 i:uint4",
        "prefix": "7",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "pushint4" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 31,
          "function_name": "exec_push_tinyint4"
        }
      ]
    },
    {
      "mnemonic": "CTOS",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Converts a _Cell_ into a _Slice_. Notice that `c` must be either an ordinary cell, or an exotic cell which is automatically _loaded_ to yield an ordinary cell `c'`, converted into a _Slice_ afterwards.",
        "gas": "118/43",
        "fift": "CTOS",
        "fift_examples": [],
        "opcode": "D0",
        "stack": "c - s"
      },
      "bytecode": { "tlb": "#D0", "prefix": "D0", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 873,
          "function_name": "exec_cell_to_slice"
        }
      ]
    },
    {
      "mnemonic": "NEWC",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Creates a new empty _Builder_.",
        "gas": "18",
        "fift": "NEWC",
        "fift_examples": [],
        "opcode": "C8",
        "stack": "- b"
      },
      "bytecode": { "tlb": "#C8", "prefix": "C8", "operands": [] },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 334,
          "function_name": "exec_new_builder"
        }
      ]
    },
    {
      "mnemonic": "XCHG_1I",
      "since_version": 0,
      "doc": {
        "category": "stack_basic",
        "description": "Interchanges `s1` with `s[i]`, `2 <= i <= 15`.",
        "gas": "18",
        "fift": "s1 s[i] XCHG",
        "fift_examples": [],
        "opcode": "1i",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#1 i:(## 4) {2 <= i}",
        "prefix": "1",
        "operands_range_check": { "length": 4, "from": 2, "to": 15 },
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 2,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 83,
          "function_name": "exec_xchg1"
        }
      ]
    },
    {
      "mnemonic": "ENDC",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Converts a _Builder_ into an ordinary _Cell_.",
        "gas": "518",
        "fift": "ENDC",
        "fift_examples": [],
        "opcode": "C9",
        "stack": "b - c"
      },
      "bytecode": { "tlb": "#C9", "prefix": "C9", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 341,
          "function_name": "exec_builder_to_cell"
        }
      ]
    },
    {
      "mnemonic": "STSLICER",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Equivalent to `SWAP` `STSLICE`.",
        "gas": "26",
        "fift": "STSLICER",
        "fift_examples": [],
        "opcode": "CF16",
        "stack": "b s - b'"
      },
      "bytecode": { "tlb": "#CF16", "prefix": "CF16", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            },
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 530,
          "function_name": "exec_store_slice_rev"
        }
      ]
    },
    {
      "mnemonic": "XCHG_0I_LONG",
      "since_version": 0,
      "doc": {
        "category": "stack_basic",
        "description": "Interchanges `s0` with `s[ii]`, `0 <= ii <= 255`.",
        "gas": "26",
        "fift": "s0 [ii] s() XCHG",
        "fift_examples": [],
        "opcode": "11ii",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#11 ii:uint8",
        "prefix": "11",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "stack" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 52,
          "function_name": "exec_xchg0_l"
        }
      ]
    },
    {
      "mnemonic": "LDREF",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Loads a cell reference `c` from `s`.",
        "gas": "18",
        "fift": "LDREF",
        "fift_examples": [],
        "opcode": "D4",
        "stack": "s - c s'"
      },
      "bytecode": { "tlb": "#D4", "prefix": "D4", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell"
              ]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1003,
          "function_name": "exec_load_ref"
        }
      ]
    },
    {
      "mnemonic": "THROWIFNOT_SHORT",
      "since_version": 0,
      "doc": {
        "category": "exceptions",
        "description": "Throws exception `0 <= n <= 63` with parameter zero only if integer `f=0`.",
        "gas": "26/76",
        "fift": "[n] THROWIFNOT",
        "fift_examples": [],
        "opcode": "F2A_n",
        "stack": "f - "
      },
      "bytecode": {
        "tlb": "#F2A_ n:uint6",
        "prefix": "F2A_",
        "operands": [
          {
            "name": "n",
            "type": "uint",
            "size": 6,
            "min_value": 0,
            "max_value": 63,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 1130,
          "function_name": "exec_throw_fixed"
        }
      ]
    },
    {
      "mnemonic": "ROTREV",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `2 1 BLKSWAP` or to `s2 s2 XCHG2`.",
        "gas": "18",
        "fift": "ROTREV\n-ROT",
        "fift_examples": [],
        "opcode": "59",
        "stack": "a b c - c a b"
      },
      "bytecode": { "tlb": "#59", "prefix": "59", "operands": [] },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 317,
          "function_name": "exec_rotrev"
        }
      ]
    },
    {
      "mnemonic": "INC",
      "since_version": 0,
      "doc": {
        "category": "arithm_basic",
        "description": "Equivalent to `1 ADDCONST`.",
        "gas": "18",
        "fift": "INC",
        "fift_examples": [],
        "opcode": "A4",
        "stack": "x - x+1"
      },
      "bytecode": { "tlb": "#A4", "prefix": "A4", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 197,
          "function_name": "exec_inc"
        }
      ]
    },
    {
      "mnemonic": "THROWIF_SHORT",
      "since_version": 0,
      "doc": {
        "category": "exceptions",
        "description": "Throws exception `0 <= n <= 63` with  parameter zero only if integer `f!=0`.",
        "gas": "26/76",
        "fift": "[n] THROWIF",
        "fift_examples": [],
        "opcode": "F26_n",
        "stack": "f - "
      },
      "bytecode": {
        "tlb": "#F26_ n:uint6",
        "prefix": "F26_",
        "operands": [
          {
            "name": "n",
            "type": "uint",
            "size": 6,
            "min_value": 0,
            "max_value": 63,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 1130,
          "function_name": "exec_throw_fixed"
        }
      ]
    },
    {
      "mnemonic": "GEQ",
      "since_version": 0,
      "doc": {
        "category": "compare_int",
        "description": "Equivalent to `LESS` `NOT`.",
        "gas": "18",
        "fift": "GEQ",
        "fift_examples": [],
        "opcode": "BE",
        "stack": "x y - x>=y"
      },
      "bytecode": { "tlb": "#BE", "prefix": "BE", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 975,
          "function_name": "exec_cmp"
        }
      ]
    },
    {
      "mnemonic": "LDSLICEX",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Loads the first `0 <= l <= 1023` bits from _Slice_ `s` into a separate _Slice_ `s''`, returning the remainder of `s` as `s'`.",
        "gas": "26",
        "fift": "LDSLICEX",
        "fift_examples": [],
        "opcode": "D718",
        "stack": "s l - s'' s'"
      },
      "bytecode": { "tlb": "#D718", "prefix": "D718", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s3",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1127,
          "function_name": "exec_load_slice"
        }
      ]
    },
    {
      "mnemonic": "XCHG2",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `s1 s[i] XCHG` `s[j] XCHG0`.",
        "gas": "26",
        "fift": "s[i] s[j] XCHG2",
        "fift_examples": [],
        "opcode": "50ij",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#50 i:uint4 j:uint4",
        "prefix": "50",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "j",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 163,
          "function_name": "exec_xchg2"
        }
      ]
    },
    {
      "mnemonic": "PLDREFIDX",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Returns the `n`-th cell reference of _Slice_ `s`, where `0 <= n <= 3`.",
        "gas": "26",
        "fift": "[n] PLDREFIDX",
        "fift_examples": [],
        "opcode": "D74E_n",
        "stack": "s - c"
      },
      "bytecode": {
        "tlb": "#D74E_ n:uint2",
        "prefix": "D74E_",
        "operands": [
          {
            "name": "n",
            "type": "uint",
            "size": 2,
            "min_value": 0,
            "max_value": 3,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1092,
          "function_name": "exec_load_int_fixed2"
        }
      ]
    },
    {
      "mnemonic": "STREF",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Stores a reference to _Cell_ `c` into _Builder_ `b`.",
        "gas": "18",
        "fift": "STREF",
        "fift_examples": [],
        "opcode": "CC",
        "stack": "c b - b'"
      },
      "bytecode": { "tlb": "#CC", "prefix": "CC", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell"
              ]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 415,
          "function_name": "exec_store_ref"
        }
      ]
    },
    {
      "mnemonic": "XCHG_IJ",
      "since_version": 0,
      "doc": {
        "category": "stack_basic",
        "description": "Interchanges `s[i]` with `s[j]`, `1 <= i < j <= 15`.",
        "gas": "26",
        "fift": "s[i] s[j] XCHG",
        "fift_examples": [],
        "opcode": "10ij",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#10 i:(## 4) j:(## 4) {1 <= i} {i + 1 <= j}",
        "prefix": "10",
        "operands_range_check": { "length": 4, "from": 1, "to": 15 },
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 1,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "j",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 61,
          "function_name": "exec_xchg"
        }
      ]
    },
    {
      "mnemonic": "PUSHCONT",
      "since_version": 0,
      "doc": {
        "category": "const_data",
        "description": "Pushes a continuation made from `builder`.\n_Details:_ Pushes the simple ordinary continuation `cccc` made from the first `0 <= r <= 3` references and the first `0 <= xx <= 127` bytes of `cc.code`.",
        "gas": "26",
        "fift": "[builder] PUSHCONT\n[builder] CONT",
        "fift_examples": [],
        "opcode": "8F_rxxcccc",
        "stack": "- c"
      },
      "bytecode": {
        "tlb": "#8F_ r:(## 2) xx:(## 7) c:(r * ^Cell) ssss:((8 * xx) * Bit)",
        "prefix": "8F_",
        "operands": [
          {
            "name": "s",
            "type": "subslice",
            "bits_length_var_size": 7,
            "refs_length_var_size": 2,
            "bits_padding": 0,
            "refs_add": 0,
            "completion_tag": false,
            "max_bits": 1016,
            "min_bits": 0,
            "max_refs": 3,
            "min_refs": 0,
            "display_hints": [
              { "type": "continuation" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Continuation"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 165,
          "function_name": "exec_push_cont"
        }
      ]
    },
    {
      "mnemonic": "BLKDROP2",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Drops `i` stack elements under the top `j` elements.\n`1 <= i <= 15`, `0 <= j <= 15`\nEquivalent to `[i+j] 0 REVERSE` `[i] BLKDROP` `[j] 0 REVERSE`.",
        "gas": "26",
        "fift": "[i] [j] BLKDROP2",
        "fift_examples": [],
        "opcode": "6Cij",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#6C i:(## 4) j:uint4 {1 <= i}",
        "prefix": "6C",
        "operands_range_check": { "length": 4, "from": 1, "to": 15 },
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 1,
            "max_value": 15,
            "display_hints": []
          },
          {
            "name": "j",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 380,
          "function_name": "exec_blkdrop2"
        }
      ]
    },
    {
      "mnemonic": "PUSHPOW2",
      "since_version": 0,
      "doc": {
        "category": "const_int",
        "description": "(Quietly) pushes `2^(xx+1)` for `0 <= xx <= 255`.\n`2^256` is a `NaN`.",
        "gas": "26",
        "fift": "[xx+1] PUSHPOW2",
        "fift_examples": [],
        "opcode": "83xx",
        "stack": "- 2^(xx+1)"
      },
      "bytecode": {
        "tlb": "#83 xx:uint8",
        "prefix": "83",
        "operands_range_check": { "length": 8, "from": 0, "to": 254 },
        "operands": [
          {
            "name": "x",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 254,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 110,
          "function_name": "exec_push_pow2"
        }
      ]
    },
    {
      "mnemonic": "PUSHINT_8",
      "since_version": 0,
      "doc": {
        "category": "const_int",
        "description": "Pushes integer `xx`. `-128 <= xx <= 127`.",
        "gas": "26",
        "fift": "[xx] PUSHINT\n[xx] INT",
        "fift_examples": [],
        "opcode": "80xx",
        "stack": "- xx"
      },
      "bytecode": {
        "tlb": "#80 xx:int8",
        "prefix": "80",
        "operands": [
          {
            "name": "x",
            "type": "int",
            "size": 8,
            "min_value": -128,
            "max_value": 127,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 46,
          "function_name": "exec_push_tinyint8"
        }
      ]
    },
    {
      "mnemonic": "EQINT",
      "since_version": 0,
      "doc": {
        "category": "compare_int",
        "description": "Returns `-1` if `x=yy`, `0` otherwise.\n`-2^7 <= yy < 2^7`.",
        "gas": "26",
        "fift": "[yy] EQINT",
        "fift_examples": [],
        "opcode": "C0yy",
        "stack": "x - x=yy"
      },
      "bytecode": {
        "tlb": "#C0 yy:int8",
        "prefix": "C0",
        "operands": [
          {
            "name": "y",
            "type": "int",
            "size": 8,
            "min_value": -128,
            "max_value": 127,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 992,
          "function_name": "exec_cmp_int"
        }
      ]
    },
    {
      "mnemonic": "BLKDROP",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `DROP` performed `i` times.",
        "gas": "26",
        "fift": "[i] BLKDROP",
        "fift_examples": [],
        "opcode": "5F0i",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#5F0 i:uint4",
        "prefix": "5F0",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 371,
          "function_name": "exec_blkdrop"
        }
      ]
    },
    {
      "mnemonic": "ROT",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `1 2 BLKSWAP` or to `s2 s1 XCHG2`.",
        "gas": "18",
        "fift": "ROT",
        "fift_examples": [],
        "opcode": "58",
        "stack": "a b c - b c a"
      },
      "bytecode": { "tlb": "#58", "prefix": "58", "operands": [] },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 308,
          "function_name": "exec_rot"
        }
      ]
    },
    {
      "mnemonic": "SBITS",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Returns the number of data bits in _Slice_ `s`.",
        "gas": "26",
        "fift": "SBITS",
        "fift_examples": [],
        "opcode": "D749",
        "stack": "s - l"
      },
      "bytecode": { "tlb": "#D749", "prefix": "D749", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "l",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1308,
          "function_name": "exec_slice_bits_refs"
        }
      ]
    },
    {
      "mnemonic": "PUXC",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `s[i] PUSH` `SWAP` `s[j] XCHG0`.",
        "gas": "26",
        "fift": "s[i] s[j-1] PUXC",
        "fift_examples": [],
        "opcode": "52ij",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#52 i:uint4 j:uint4",
        "prefix": "52",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "j",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" },
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 183,
          "function_name": "exec_puxc"
        }
      ]
    },
    {
      "mnemonic": "AND",
      "since_version": 0,
      "doc": {
        "category": "arithm_logical",
        "description": "Bitwise and of two signed integers `x` and `y`, sign-extended to infinity.",
        "gas": "18",
        "fift": "AND",
        "fift_examples": [],
        "opcode": "B0",
        "stack": "x y - x&y"
      },
      "bytecode": { "tlb": "#B0", "prefix": "B0", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 769,
          "function_name": "exec_and"
        }
      ]
    },
    {
      "mnemonic": "PLDU",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Preloads an unsigned `cc+1`-bit integer from `s`.",
        "gas": "34",
        "fift": "[cc+1] PLDU",
        "fift_examples": [],
        "opcode": "D70Bcc",
        "stack": "s - x"
      },
      "bytecode": {
        "tlb": "#D70B cc:uint8",
        "prefix": "D70B",
        "operands": [
          {
            "name": "c",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1092,
          "function_name": "exec_load_int_fixed2"
        }
      ]
    },
    {
      "mnemonic": "STI",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Stores a signed `cc+1`-bit integer `x` into _Builder_ `b` for `0 <= cc <= 255`, throws a range check exception if `x` does not fit into `cc+1` bits.",
        "gas": "26",
        "fift": "[cc+1] STI",
        "fift_examples": [],
        "opcode": "CAcc",
        "stack": "x b - b'"
      },
      "bytecode": {
        "tlb": "#CA cc:uint8",
        "prefix": "CA",
        "operands": [
          {
            "name": "c",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 407,
          "function_name": "exec_store_int"
        }
      ]
    },
    {
      "mnemonic": "ADD",
      "since_version": 0,
      "doc": {
        "category": "arithm_basic",
        "description": "",
        "gas": "18",
        "fift": "ADD",
        "fift_examples": [],
        "opcode": "A0",
        "stack": "x y - x+y"
      },
      "bytecode": { "tlb": "#A0", "prefix": "A0", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 162,
          "function_name": "exec_add"
        }
      ]
    },
    {
      "mnemonic": "BLKSWAP",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Permutes two blocks `s[j+i+1] ... s[j+1]` and `s[j] ... s0`.\n`0 <= i,j <= 15`\nEquivalent to `[i+1] [j+1] REVERSE` `[j+1] 0 REVERSE` `[i+j+2] 0 REVERSE`.",
        "gas": "26",
        "fift": "[i+1] [j+1] BLKSWAP",
        "fift_examples": [],
        "opcode": "55ij",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#55 i:uint4 j:uint4",
        "prefix": "55",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" },
              { "type": "add", "value": 1 }
            ]
          },
          {
            "name": "j",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" },
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 299,
          "function_name": "exec_blkswap"
        }
      ]
    },
    {
      "mnemonic": "THROWIF",
      "since_version": 0,
      "doc": {
        "category": "exceptions",
        "description": "For `0 <= n < 2^11`, an encoding of `[n] THROWIF` for larger values of `n`.",
        "gas": "34/84",
        "fift": "[n] THROWIF",
        "fift_examples": [],
        "opcode": "F2D4_n",
        "stack": "f - "
      },
      "bytecode": {
        "tlb": "#F2D4_ n:uint11",
        "prefix": "F2D4_",
        "operands": [
          {
            "name": "n",
            "type": "uint",
            "size": 11,
            "min_value": 0,
            "max_value": 2047,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 1130,
          "function_name": "exec_throw_fixed"
        }
      ]
    },
    {
      "mnemonic": "SUB",
      "since_version": 0,
      "doc": {
        "category": "arithm_basic",
        "description": "",
        "gas": "18",
        "fift": "SUB",
        "fift_examples": [],
        "opcode": "A1",
        "stack": "x y - x-y"
      },
      "bytecode": { "tlb": "#A1", "prefix": "A1", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 171,
          "function_name": "exec_sub"
        }
      ]
    },
    {
      "mnemonic": "XCHG3",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `s2 s[i] XCHG` `s1 s[j] XCHG` `s[k] XCHG0`.",
        "gas": "26",
        "fift": "s[i] s[j] s[k] XCHG3",
        "fift_examples": [],
        "opcode": "4ijk",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#4 i:uint4 j:uint4 k:uint4",
        "prefix": "4",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "j",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "k",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 204,
          "function_name": "exec_xchg3"
        }
      ]
    },
    {
      "mnemonic": "LDI",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Loads (i.e., parses) a signed `cc+1`-bit integer `x` from _Slice_ `s`, and returns the remainder of `s` as `s'`.",
        "gas": "26",
        "fift": "[cc+1] LDI",
        "fift_examples": [],
        "opcode": "D2cc",
        "stack": "s - x s'"
      },
      "bytecode": {
        "tlb": "#D2 cc:uint8",
        "prefix": "D2",
        "operands": [
          {
            "name": "c",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 971,
          "function_name": "exec_load_int_fixed"
        }
      ]
    },
    {
      "mnemonic": "SDEQ",
      "since_version": 0,
      "doc": {
        "category": "compare_other",
        "description": "Checks whether the data parts of `s` and `s'` coincide, equivalent to `SDLEXCMP` `ISZERO`.",
        "gas": "26",
        "fift": "SDEQ",
        "fift_examples": [],
        "opcode": "C705",
        "stack": "s s' - ?"
      },
      "bytecode": { "tlb": "#C705", "prefix": "C705", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 319,
          "function_name": "reg_bin_cs_cmp"
        }
      ]
    },
    {
      "mnemonic": "PUSH2",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `s[i] PUSH` `s[j+1] PUSH`.",
        "gas": "26",
        "fift": "s[i] s[j] PUSH2",
        "fift_examples": [],
        "opcode": "53ij",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#53 i:uint4 j:uint4",
        "prefix": "53",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "j",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 194,
          "function_name": "exec_push2"
        }
      ]
    },
    {
      "mnemonic": "ENDS",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Removes a _Slice_ `s` from the stack, and throws an exception if it is not empty.",
        "gas": "18/68",
        "fift": "ENDS",
        "fift_examples": [],
        "opcode": "D1",
        "stack": "s - "
      },
      "bytecode": { "tlb": "#D1", "prefix": "D1", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 936,
          "function_name": "exec_slice_chk_empty"
        }
      ]
    },
    {
      "mnemonic": "POP_LONG",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Pops the old `s0` value into the old `s[ii]`.\n`0 <= ii <= 255`",
        "gas": "26",
        "fift": "[ii] s() POP",
        "fift_examples": [],
        "opcode": "57ii",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#57 ii:uint8",
        "prefix": "57",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "stack" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 152,
          "function_name": "exec_pop_l"
        }
      ]
    },
    {
      "mnemonic": "XCPU",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `s[i] XCHG0` `s[j] PUSH`.",
        "gas": "26",
        "fift": "s[i] s[j] XCPU",
        "fift_examples": [],
        "opcode": "51ij",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#51 i:uint4 j:uint4",
        "prefix": "51",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "j",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 173,
          "function_name": "exec_xcpu"
        }
      ]
    },
    {
      "mnemonic": "GTINT",
      "since_version": 0,
      "doc": {
        "category": "compare_int",
        "description": "Returns `-1` if `x>yy`, `0` otherwise.\n`-2^7 <= yy < 2^7`.",
        "gas": "26",
        "fift": "[yy] GTINT\n[yy+1] GEQINT",
        "fift_examples": [],
        "opcode": "C2yy",
        "stack": "x - x>yy"
      },
      "bytecode": {
        "tlb": "#C2 yy:int8",
        "prefix": "C2",
        "operands": [
          {
            "name": "y",
            "type": "int",
            "size": 8,
            "min_value": -128,
            "max_value": 127,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 992,
          "function_name": "exec_cmp_int"
        }
      ]
    },
    {
      "mnemonic": "SEMPTY",
      "since_version": 0,
      "doc": {
        "category": "compare_other",
        "description": "Checks whether a _Slice_ `s` is empty (i.e., contains no bits of data and no cell references).",
        "gas": "26",
        "fift": "SEMPTY",
        "fift_examples": [],
        "opcode": "C700",
        "stack": "s - ?"
      },
      "bytecode": { "tlb": "#C700", "prefix": "C700", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 314,
          "function_name": "reg_un_cs_cmp"
        }
      ]
    },
    {
      "mnemonic": "TUPLE",
      "since_version": 0,
      "doc": {
        "category": "tuple",
        "description": "Creates a new _Tuple_ `t=(x_1, ... ,x_n)` containing `n` values `x_1`,..., `x_n`.\n`0 <= n <= 15`",
        "gas": "26+n",
        "fift": "[n] TUPLE",
        "fift_examples": [],
        "opcode": "6F0n",
        "stack": "x_1 ... x_n - t"
      },
      "bytecode": {
        "tlb": "#6F0 n:uint4",
        "prefix": "6F0",
        "operands": [
          {
            "name": "n",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "array",
              "name": "tuple_elements",
              "length_var": "n",
              "array_entry": [
                { "type": "simple", "name": "x" }
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": [
                "Tuple"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tupleops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tupleops.cpp",
          "line": 88,
          "function_name": "exec_mktuple"
        }
      ]
    },
    {
      "mnemonic": "PUSHSLICE_LONG",
      "since_version": 0,
      "doc": {
        "category": "const_data",
        "description": "Pushes the slice `slice` into the stack.\n_Details:_ Pushes the subslice of `cc.code` consisting of `0 <= r <= 4` references and up to `8xx+6` bits of data, with `0 <= xx <= 127`.\nA completion tag is assumed.",
        "gas": "28",
        "fift": "[slice] PUSHSLICE\n[slice] SLICE",
        "fift_examples": [
          { "fift": "x{} PUSHSLICE x{ABCD1234} PUSHSLICE b{01101} PUSHSLICE", "description": "Examples of `PUSHSLICE`. `x{}` is an empty slice. `x{...}` is a hexadecimal literal. `b{...}` is a binary literal. More on slice literals [here](https://github.com/Piterden/TON-docs/blob/master/Fift.%20A%20Brief%20Introduction.md#user-content-51-slice-literals). Note that the assembler can replace `PUSHSLICE` with `PUSHREFSLICE` in certain situations (e.g. if there's not enough space in the current continuation)." },
          { "fift": "<b x{AB12} s, b> PUSHREF <b x{AB12} s, b> PUSHREFSLICE", "description": "Examples of `PUSHREF` and `PUSHREFSLICE`. More on building cells in fift [here](https://github.com/Piterden/TON-docs/blob/master/Fift.%20A%20Brief%20Introduction.md#user-content-52-builder-primitives)." }
        ],
        "opcode": "8Drxxsssss",
        "stack": "- s"
      },
      "bytecode": {
        "tlb": "#8D r:(#<= 4) xx:(## 7) c:(r * ^Cell) ssss:((8 * xx + 6) * Bit)",
        "prefix": "8D",
        "operands_range_check": { "length": 3, "from": 0, "to": 4 },
        "operands": [
          {
            "name": "slice",
            "type": "subslice",
            "bits_length_var_size": 7,
            "refs_length_var_size": 3,
            "bits_padding": 6,
            "refs_add": 0,
            "completion_tag": true,
            "max_bits": 1021,
            "min_bits": 0,
            "max_refs": 4,
            "min_refs": 0,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 117,
          "function_name": "exec_push_slice"
        }
      ]
    },
    {
      "mnemonic": "SDSKIPFIRST",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Returns all but the first `0 <= l <= 1023` bits of `s`. It is equivalent to `LDSLICEX` `NIP`.",
        "gas": "26",
        "fift": "SDSKIPFIRST",
        "fift_examples": [],
        "opcode": "D721",
        "stack": "s l - s'"
      },
      "bytecode": { "tlb": "#D721", "prefix": "D721", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1462,
          "function_name": "exec_slice_op_args"
        }
      ]
    },
    {
      "mnemonic": "NULLSWAPIFNOT",
      "since_version": 0,
      "doc": {
        "category": "tuple",
        "description": "Pushes a _Null_ under the topmost _Integer_ `x`, but only if `x=0`. May be used for stack alignment after quiet primitives such as `PLDUXQ`.",
        "gas": "26",
        "fift": "NULLSWAPIFNOT",
        "fift_examples": [],
        "opcode": "6FA1",
        "stack": "x - x or null x"
      },
      "bytecode": { "tlb": "#6FA1", "prefix": "6FA1", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "x",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    { "type": "const", "value": null, "value_type": "Null" }
                  ]
                }
              ],
              "else": []
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tupleops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tupleops.cpp",
          "line": 41,
          "function_name": "exec_null_swap_if"
        }
      ]
    },
    {
      "mnemonic": "NULL",
      "since_version": 0,
      "doc": {
        "category": "tuple",
        "description": "Pushes the only value of type _Null_.",
        "gas": "18",
        "fift": "NULL\nPUSHNULL",
        "fift_examples": [],
        "opcode": "6D",
        "stack": " - null"
      },
      "bytecode": { "tlb": "#6D", "prefix": "6D", "operands": [] },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            { "type": "const", "value": null, "value_type": "Null" }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tupleops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tupleops.cpp",
          "line": 28,
          "function_name": "exec_push_null"
        }
      ]
    },
    {
      "mnemonic": "PUSHPOW2DEC",
      "since_version": 0,
      "doc": {
        "category": "const_int",
        "description": "Pushes `2^(xx+1)-1` for `0 <= xx <= 255`.",
        "gas": "26",
        "fift": "[xx+1] PUSHPOW2DEC",
        "fift_examples": [],
        "opcode": "84xx",
        "stack": "- 2^(xx+1)-1"
      },
      "bytecode": {
        "tlb": "#84 xx:uint8",
        "prefix": "84",
        "operands": [
          {
            "name": "x",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 129,
          "function_name": "exec_push_pow2dec"
        }
      ]
    },
    {
      "mnemonic": "PUXCPU",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `s[i] s[j-1] PUXC` `s[k] PUSH`.",
        "gas": "34",
        "fift": "s[i] s[j-1] s[k-1] PUXCPU",
        "fift_examples": [],
        "opcode": "545ijk",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#545 i:uint4 j:uint4 k:uint4",
        "prefix": "545",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "j",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" },
              { "type": "add", "value": 1 }
            ]
          },
          {
            "name": "k",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" },
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 261,
          "function_name": "exec_puxcpu"
        }
      ]
    },
    {
      "mnemonic": "NEGATE",
      "since_version": 0,
      "doc": {
        "category": "arithm_basic",
        "description": "Equivalent to `-1 MULCONST` or to `ZERO SUBR`.\nNotice that it triggers an integer overflow exception if `x=-2^256`.",
        "gas": "18",
        "fift": "NEGATE",
        "fift_examples": [],
        "opcode": "A3",
        "stack": "x - -x"
      },
      "bytecode": { "tlb": "#A3", "prefix": "A3", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 189,
          "function_name": "exec_negate"
        }
      ]
    },
    {
      "mnemonic": "MUL",
      "since_version": 0,
      "doc": {
        "category": "arithm_basic",
        "description": "",
        "gas": "18",
        "fift": "MUL",
        "fift_examples": [],
        "opcode": "A8",
        "stack": "x y - x*y"
      },
      "bytecode": { "tlb": "#A8", "prefix": "A8", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 231,
          "function_name": "exec_mul"
        }
      ]
    },
    {
      "mnemonic": "THROWANY",
      "since_version": 0,
      "doc": {
        "category": "exceptions",
        "description": "Throws exception `0 <= n < 2^16` with parameter zero.\nApproximately equivalent to `ZERO` `SWAP` `THROWARGANY`.",
        "gas": "76",
        "fift": "THROWANY",
        "fift_examples": [],
        "opcode": "F2F0",
        "stack": "n - 0 n"
      },
      "bytecode": { "tlb": "#F2F0", "prefix": "F2F0", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": false },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 1153,
          "function_name": "exec_throw_any"
        }
      ]
    },
    {
      "mnemonic": "XC2PU",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `s[i] s[j] XCHG2` `s[k] PUSH`.",
        "gas": "34",
        "fift": "s[i] s[j] s[k] XC2PU",
        "fift_examples": [],
        "opcode": "541ijk",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#541 i:uint4 j:uint4 k:uint4",
        "prefix": "541",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "j",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "k",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 215,
          "function_name": "exec_xc2pu"
        }
      ]
    },
    {
      "mnemonic": "ISNULL",
      "since_version": 0,
      "doc": {
        "category": "tuple",
        "description": "Checks whether `x` is a _Null_, and returns `-1` or `0` accordingly.",
        "gas": "18",
        "fift": "ISNULL",
        "fift_examples": [],
        "opcode": "6E",
        "stack": "x - ?"
      },
      "bytecode": { "tlb": "#6E", "prefix": "6E", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tupleops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tupleops.cpp",
          "line": 34,
          "function_name": "exec_is_null"
        }
      ]
    },
    {
      "mnemonic": "OR",
      "since_version": 0,
      "doc": {
        "category": "arithm_logical",
        "description": "Bitwise or of two integers.",
        "gas": "18",
        "fift": "OR",
        "fift_examples": [],
        "opcode": "B1",
        "stack": "x y - x|y"
      },
      "bytecode": { "tlb": "#B1", "prefix": "B1", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 778,
          "function_name": "exec_or"
        }
      ]
    },
    {
      "mnemonic": "GREATER",
      "since_version": 0,
      "doc": {
        "category": "compare_int",
        "description": "",
        "gas": "18",
        "fift": "GREATER",
        "fift_examples": [],
        "opcode": "BC",
        "stack": "x y - x>y"
      },
      "bytecode": { "tlb": "#BC", "prefix": "BC", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 975,
          "function_name": "exec_cmp"
        }
      ]
    },
    {
      "mnemonic": "DROP2",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `DROP` `DROP`.",
        "gas": "18",
        "fift": "DROP2\n2DROP",
        "fift_examples": [],
        "opcode": "5B",
        "stack": "a b - "
      },
      "bytecode": { "tlb": "#5B", "prefix": "5B", "operands": [] },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 335,
          "function_name": "exec_2drop"
        }
      ]
    },
    {
      "mnemonic": "XCPUXC",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `s1 s[i] XCHG` `s[j] s[k-1] PUXC`.",
        "gas": "34",
        "fift": "s[i] s[j] s[k-1] XCPUXC",
        "fift_examples": [],
        "opcode": "542ijk",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#542 i:uint4 j:uint4 k:uint4",
        "prefix": "542",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "j",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "k",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" },
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 226,
          "function_name": "exec_xcpuxc"
        }
      ]
    },
    {
      "mnemonic": "DIV",
      "since_version": 0,
      "doc": {
        "category": "arithm_div",
        "description": "`q=floor(x/y)`, `r=x-y*q`",
        "gas": "26",
        "fift": "DIV",
        "fift_examples": [],
        "opcode": "A904",
        "stack": "x y - q"
      },
      "bytecode": { "tlb": "#A904", "prefix": "A904", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 266,
          "function_name": "exec_divmod"
        }
      ]
    },
    {
      "mnemonic": "PUSH_LONG",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Pushes a copy of the old `s[ii]` into the stack.\n`0 <= ii <= 255`",
        "gas": "26",
        "fift": "[ii] s() PUSH",
        "fift_examples": [],
        "opcode": "56ii",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#56 ii:uint8",
        "prefix": "56",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "stack" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 118,
          "function_name": "exec_push_l"
        }
      ]
    },
    {
      "mnemonic": "PUSHSLICE",
      "since_version": 0,
      "doc": {
        "category": "const_data",
        "description": "Pushes the slice `slice` into the stack.\n_Details:_ Pushes the (prefix) subslice of `cc.code` consisting of its first `8x+4` bits and no references (i.e., essentially a bitstring), where `0 <= x <= 15`.\nA completion tag is assumed, meaning that all trailing zeroes and the last binary one (if present) are removed from this bitstring.\nIf the original bitstring consists only of zeroes, an empty slice will be pushed.",
        "gas": "22",
        "fift": "[slice] PUSHSLICE\n[slice] SLICE",
        "fift_examples": [],
        "opcode": "8Bxsss",
        "stack": "- s"
      },
      "bytecode": {
        "tlb": "#8B x:(## 4) sss:((8 * x + 4) * Bit)",
        "prefix": "8B",
        "operands": [
          {
            "name": "s",
            "type": "subslice",
            "bits_length_var_size": 4,
            "bits_padding": 4,
            "completion_tag": true,
            "max_bits": 123,
            "min_bits": 0,
            "max_refs": 0,
            "min_refs": 0,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 117,
          "function_name": "exec_push_slice"
        }
      ]
    },
    {
      "mnemonic": "LESS",
      "since_version": 0,
      "doc": {
        "category": "compare_int",
        "description": "Returns `-1` if `x<y`, `0` otherwise.",
        "gas": "18",
        "fift": "LESS",
        "fift_examples": [],
        "opcode": "B9",
        "stack": "x y - x<y"
      },
      "bytecode": { "tlb": "#B9", "prefix": "B9", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 975,
          "function_name": "exec_cmp"
        }
      ]
    },
    {
      "mnemonic": "PUSH3",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `s[i] PUSH` `s[j+1] s[k+1] PUSH2`.",
        "gas": "34",
        "fift": "s[i] s[j] s[k] PUSH3",
        "fift_examples": [],
        "opcode": "547ijk",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#547 i:uint4 j:uint4 k:uint4",
        "prefix": "547",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "j",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "k",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 286,
          "function_name": "exec_push3"
        }
      ]
    },
    {
      "mnemonic": "NOT",
      "since_version": 0,
      "doc": {
        "category": "arithm_logical",
        "description": "Bitwise not of an integer.",
        "gas": "26",
        "fift": "NOT",
        "fift_examples": [],
        "opcode": "B3",
        "stack": "x - ~x"
      },
      "bytecode": { "tlb": "#B3", "prefix": "B3", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 796,
          "function_name": "exec_not"
        }
      ]
    },
    {
      "mnemonic": "THROWANYIFNOT",
      "since_version": 0,
      "doc": {
        "category": "exceptions",
        "description": "Throws exception `0 <= n<2^16` with parameter zero only if `f=0`.",
        "gas": "26/76",
        "fift": "THROWANYIFNOT",
        "fift_examples": [],
        "opcode": "F2F4",
        "stack": "n f - "
      },
      "bytecode": { "tlb": "#F2F4", "prefix": "F2F4", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "f",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 1153,
          "function_name": "exec_throw_any"
        }
      ]
    },
    {
      "mnemonic": "LESSINT",
      "since_version": 0,
      "doc": {
        "category": "compare_int",
        "description": "Returns `-1` if `x<yy`, `0` otherwise.\n`-2^7 <= yy < 2^7`.",
        "gas": "26",
        "fift": "[yy] LESSINT\n[yy-1] LEQINT",
        "fift_examples": [],
        "opcode": "C1yy",
        "stack": "x - x<yy"
      },
      "bytecode": {
        "tlb": "#C1 yy:int8",
        "prefix": "C1",
        "operands": [
          {
            "name": "y",
            "type": "int",
            "size": 8,
            "min_value": -128,
            "max_value": 127,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 992,
          "function_name": "exec_cmp_int"
        }
      ]
    },
    {
      "mnemonic": "NEQINT",
      "since_version": 0,
      "doc": {
        "category": "compare_int",
        "description": "Returns `-1` if `x!=yy`, `0` otherwise.\n`-2^7 <= yy < 2^7`.",
        "gas": "26",
        "fift": "[yy] NEQINT",
        "fift_examples": [],
        "opcode": "C3yy",
        "stack": "x - x!=yy"
      },
      "bytecode": {
        "tlb": "#C3 yy:int8",
        "prefix": "C3",
        "operands": [
          {
            "name": "y",
            "type": "int",
            "size": 8,
            "min_value": -128,
            "max_value": 127,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 992,
          "function_name": "exec_cmp_int"
        }
      ]
    },
    {
      "mnemonic": "STIX",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Stores a signed `l`-bit integer `x` into `b` for `0 <= l <= 257`.",
        "gas": "26",
        "fift": "STIX",
        "fift_examples": [],
        "opcode": "CF00",
        "stack": "x b l - b'"
      },
      "bytecode": { "tlb": "#CF00", "prefix": "CF00", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 599,
          "function_name": "exec_store_int_var"
        }
      ]
    },
    {
      "mnemonic": "LEQ",
      "since_version": 0,
      "doc": {
        "category": "compare_int",
        "description": "",
        "gas": "18",
        "fift": "LEQ",
        "fift_examples": [],
        "opcode": "BB",
        "stack": "x y - x<=y"
      },
      "bytecode": { "tlb": "#BB", "prefix": "BB", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 975,
          "function_name": "exec_cmp"
        }
      ]
    },
    {
      "mnemonic": "LSHIFT",
      "since_version": 0,
      "doc": {
        "category": "arithm_logical",
        "description": "`0 <= cc <= 255`",
        "gas": "26",
        "fift": "[cc+1] LSHIFT#",
        "fift_examples": [],
        "opcode": "AAcc",
        "stack": "x - x*2^(cc+1)"
      },
      "bytecode": {
        "tlb": "#AA cc:uint8",
        "prefix": "AA",
        "operands": [
          {
            "name": "c",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 740,
          "function_name": "exec_lshift"
        }
      ]
    },
    {
      "mnemonic": "SWAP2",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `2 2 BLKSWAP` or to `s3 s2 XCHG2`.",
        "gas": "18",
        "fift": "SWAP2\n2SWAP",
        "fift_examples": [],
        "opcode": "5A",
        "stack": "a b c d - c d a b"
      },
      "bytecode": { "tlb": "#5A", "prefix": "5A", "operands": [] },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 326,
          "function_name": "exec_2swap"
        }
      ]
    },
    {
      "mnemonic": "UNTUPLE",
      "since_version": 0,
      "doc": {
        "category": "tuple",
        "description": "Unpacks a _Tuple_ `t=(x_1,...,x_n)` of length equal to `0 <= n <= 15`.\nIf `t` is not a _Tuple_, or if `|t| != n`, a type check exception is thrown.",
        "gas": "26+n",
        "fift": "[n] UNTUPLE",
        "fift_examples": [],
        "opcode": "6F2n",
        "stack": "t - x_1 ... x_n"
      },
      "bytecode": {
        "tlb": "#6F2 n:uint4",
        "prefix": "6F2",
        "operands": [
          {
            "name": "n",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": [
                "Tuple"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "array",
              "name": "tuple_elements",
              "length_var": "n",
              "array_entry": [
                { "type": "simple", "name": "x" }
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tupleops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tupleops.cpp",
          "line": 158,
          "function_name": "exec_untuple"
        }
      ]
    },
    {
      "mnemonic": "MULRSHIFT",
      "since_version": 0,
      "doc": {
        "category": "arithm_div",
        "description": "",
        "gas": "34",
        "fift": "[tt+1] MULRSHIFT#",
        "fift_examples": [],
        "opcode": "A9B4tt",
        "stack": "x y - floor(x*y/2^(tt+1))"
      },
      "bytecode": {
        "tlb": "#A9B4 tt:uint8",
        "prefix": "A9B4",
        "operands": [
          {
            "name": "t",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 740,
          "function_name": "exec_lshift"
        }
      ]
    },
    {
      "mnemonic": "PUSHREFCONT",
      "since_version": 0,
      "doc": {
        "category": "const_data",
        "description": "Similar to `PUSHREFSLICE`, but makes a simple ordinary _Continuation_ out of the cell.",
        "gas": "118/43",
        "fift": "[ref] PUSHREFCONT",
        "fift_examples": [],
        "opcode": "8A",
        "stack": "- cont"
      },
      "bytecode": {
        "tlb": "#8A c:^Cell",
        "prefix": "8A",
        "operands": [
          {
            "name": "c",
            "type": "ref",
            "display_hints": [
              { "type": "continuation" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Continuation"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 165,
          "function_name": "exec_push_cont"
        }
      ]
    },
    {
      "mnemonic": "INDEX",
      "since_version": 0,
      "doc": {
        "category": "tuple",
        "description": "Returns the `k`-th element of a _Tuple_ `t`.\n`0 <= k <= 15`.",
        "gas": "26",
        "fift": "[k] INDEX",
        "fift_examples": [],
        "opcode": "6F1k",
        "stack": "t - x"
      },
      "bytecode": {
        "tlb": "#6F1 k:uint4",
        "prefix": "6F1",
        "operands": [
          {
            "name": "k",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": [
                "Tuple"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            { "type": "simple", "name": "x" }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tupleops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tupleops.cpp",
          "line": 106,
          "function_name": "exec_tuple_index"
        }
      ]
    },
    {
      "mnemonic": "MULDIV",
      "since_version": 0,
      "doc": {
        "category": "arithm_div",
        "description": "`q=floor(x*y/z)`",
        "gas": "26",
        "fift": "MULDIV",
        "fift_examples": [],
        "opcode": "A984",
        "stack": "x y z - q"
      },
      "bytecode": { "tlb": "#A984", "prefix": "A984", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 434,
          "function_name": "exec_muldivmod"
        }
      ]
    },
    {
      "mnemonic": "PUSHREFSLICE",
      "since_version": 0,
      "doc": {
        "category": "const_data",
        "description": "Similar to `PUSHREF`, but converts the cell into a _Slice_.",
        "gas": "118/43",
        "fift": "[ref] PUSHREFSLICE",
        "fift_examples": [],
        "opcode": "89",
        "stack": "- s"
      },
      "bytecode": {
        "tlb": "#89 c:^Cell",
        "prefix": "89",
        "operands": [
          { "name": "c", "type": "ref", "display_hints": [] }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 117,
          "function_name": "exec_push_slice"
        }
      ]
    },
    {
      "mnemonic": "NEQ",
      "since_version": 0,
      "doc": {
        "category": "compare_int",
        "description": "Equivalent to `EQUAL` `NOT`.",
        "gas": "18",
        "fift": "NEQ",
        "fift_examples": [],
        "opcode": "BD",
        "stack": "x y - x!=y"
      },
      "bytecode": { "tlb": "#BD", "prefix": "BD", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 975,
          "function_name": "exec_cmp"
        }
      ]
    },
    {
      "mnemonic": "RSHIFT",
      "since_version": 0,
      "doc": {
        "category": "arithm_logical",
        "description": "`0 <= cc <= 255`",
        "gas": "18",
        "fift": "[cc+1] RSHIFT#",
        "fift_examples": [],
        "opcode": "ABcc",
        "stack": "x - floor(x/2^(cc+1))"
      },
      "bytecode": {
        "tlb": "#AB cc:uint8",
        "prefix": "AB",
        "operands": [
          {
            "name": "c",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 749,
          "function_name": "exec_rshift"
        }
      ]
    },
    {
      "mnemonic": "STUX",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Stores an unsigned `l`-bit integer `x` into `b` for `0 <= l <= 256`.",
        "gas": "26",
        "fift": "STUX",
        "fift_examples": [],
        "opcode": "CF01",
        "stack": "x b l - b'"
      },
      "bytecode": { "tlb": "#CF01", "prefix": "CF01", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 599,
          "function_name": "exec_store_int_var"
        }
      ]
    },
    {
      "mnemonic": "ADDCONST",
      "since_version": 0,
      "doc": {
        "category": "arithm_basic",
        "description": "`-128 <= cc <= 127`.",
        "gas": "26",
        "fift": "[cc] ADDCONST\n[cc] ADDINT\n[-cc] SUBCONST\n[-cc] SUBINT",
        "fift_examples": [],
        "opcode": "A6cc",
        "stack": "x - x+cc"
      },
      "bytecode": {
        "tlb": "#A6 cc:int8",
        "prefix": "A6",
        "operands": [
          {
            "name": "c",
            "type": "int",
            "size": 8,
            "min_value": -128,
            "max_value": 127,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 213,
          "function_name": "exec_add_tinyint8"
        }
      ]
    },
    {
      "mnemonic": "TUCK",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `SWAP` `OVER` or to `s1 s1 XCPU`.",
        "gas": "18",
        "fift": "TUCK",
        "fift_examples": [],
        "opcode": "66",
        "stack": "a b - b a b"
      },
      "bytecode": { "tlb": "#66", "prefix": "66", "operands": [] },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 474,
          "function_name": "exec_tuck"
        }
      ]
    },
    {
      "mnemonic": "DUP2",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `s1 s0 PUSH2`.",
        "gas": "18",
        "fift": "DUP2\n2DUP",
        "fift_examples": [],
        "opcode": "5C",
        "stack": "a b - a b a b"
      },
      "bytecode": { "tlb": "#5C", "prefix": "5C", "operands": [] },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 344,
          "function_name": "exec_2dup"
        }
      ]
    },
    {
      "mnemonic": "PU2XC",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `s[i] PUSH` `SWAP` `s[j] s[k-1] PUXC`.",
        "gas": "34",
        "fift": "s[i] s[j-1] s[k-2] PU2XC",
        "fift_examples": [],
        "opcode": "546ijk",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#546 i:uint4 j:uint4 k:uint4",
        "prefix": "546",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "j",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" },
              { "type": "add", "value": 1 }
            ]
          },
          {
            "name": "k",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" },
              { "type": "add", "value": 2 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 249,
          "function_name": "exec_puxc2"
        }
      ]
    },
    {
      "mnemonic": "XCPU2",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `s[i] XCHG0` `s[j] s[k] PUSH2`.",
        "gas": "34",
        "fift": "s[i] s[j] s[k] XCPU2",
        "fift_examples": [],
        "opcode": "543ijk",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#543 i:uint4 j:uint4 k:uint4",
        "prefix": "543",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "j",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "k",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 215,
          "function_name": "exec_xc2pu"
        }
      ]
    },
    {
      "mnemonic": "NULLSWAPIFNOT2",
      "since_version": 0,
      "doc": {
        "category": "tuple",
        "description": "Pushes two nulls under the topmost _Integer_ `x`, but only if `x=0`.\nEquivalent to `NULLSWAPIFNOT` `NULLSWAPIFNOT`.",
        "gas": "26",
        "fift": "NULLSWAPIFNOT2",
        "fift_examples": [],
        "opcode": "6FA5",
        "stack": "x - x or null null x"
      },
      "bytecode": { "tlb": "#6FA5", "prefix": "6FA5", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "x",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    { "type": "const", "value": null, "value_type": "Null" },
                    { "type": "const", "value": null, "value_type": "Null" }
                  ]
                }
              ],
              "else": []
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tupleops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tupleops.cpp",
          "line": 56,
          "function_name": "exec_null_swap_if_many"
        }
      ]
    },
    {
      "mnemonic": "MULDIVR",
      "since_version": 0,
      "doc": {
        "category": "arithm_div",
        "description": "`q'=round(x*y/z)`",
        "gas": "26",
        "fift": "MULDIVR",
        "fift_examples": [],
        "opcode": "A985",
        "stack": "x y z - q'"
      },
      "bytecode": { "tlb": "#A985", "prefix": "A985", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 434,
          "function_name": "exec_muldivmod"
        }
      ]
    },
    {
      "mnemonic": "BBITS",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Returns the number of data bits already stored in _Builder_ `b`.",
        "gas": "26",
        "fift": "BBITS",
        "fift_examples": [],
        "opcode": "CF31",
        "stack": "b - x"
      },
      "bytecode": { "tlb": "#CF31", "prefix": "CF31", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 837,
          "function_name": "exec_int_builder_func"
        }
      ]
    },
    {
      "mnemonic": "PUXC2",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `s[i] PUSH` `s2 XCHG0` `s[j] s[k] XCHG2`.",
        "gas": "34",
        "fift": "s[i] s[j-1] s[k-1] PUXC2",
        "fift_examples": [],
        "opcode": "544ijk",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#544 i:uint4 j:uint4 k:uint4",
        "prefix": "544",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" }
            ]
          },
          {
            "name": "j",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" },
              { "type": "add", "value": 1 }
            ]
          },
          {
            "name": "k",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": [
              { "type": "stack" },
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 249,
          "function_name": "exec_puxc2"
        }
      ]
    },
    {
      "mnemonic": "STBR",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Concatenates two builders.\nEquivalent to `SWAP` `STB`.",
        "gas": "26",
        "fift": "STBR\nBCONCAT",
        "fift_examples": [],
        "opcode": "CF17",
        "stack": "b b' - b''"
      },
      "bytecode": { "tlb": "#CF17", "prefix": "CF17", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            },
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b3",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 576,
          "function_name": "exec_store_builder_rev"
        }
      ]
    },
    {
      "mnemonic": "SREFS",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Returns the number of references in _Slice_ `s`.",
        "gas": "26",
        "fift": "SREFS",
        "fift_examples": [],
        "opcode": "D74A",
        "stack": "s - r"
      },
      "bytecode": { "tlb": "#D74A", "prefix": "D74A", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "r",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1308,
          "function_name": "exec_slice_bits_refs"
        }
      ]
    },
    {
      "mnemonic": "MULCONST",
      "since_version": 0,
      "doc": {
        "category": "arithm_basic",
        "description": "`-128 <= cc <= 127`.",
        "gas": "26",
        "fift": "[cc] MULCONST\n[cc] MULINT",
        "fift_examples": [],
        "opcode": "A7cc",
        "stack": "x - x*cc"
      },
      "bytecode": {
        "tlb": "#A7 cc:int8",
        "prefix": "A7",
        "operands": [
          {
            "name": "c",
            "type": "int",
            "size": 8,
            "min_value": -128,
            "max_value": 127,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 222,
          "function_name": "exec_mul_tinyint8"
        }
      ]
    },
    {
      "mnemonic": "THROWANYIF",
      "since_version": 0,
      "doc": {
        "category": "exceptions",
        "description": "Throws exception `0 <= n < 2^16` with parameter zero only if `f!=0`.",
        "gas": "26/76",
        "fift": "THROWANYIF",
        "fift_examples": [],
        "opcode": "F2F2",
        "stack": "n f - "
      },
      "bytecode": { "tlb": "#F2F2", "prefix": "F2F2", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "f",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 1153,
          "function_name": "exec_throw_any"
        }
      ]
    },
    {
      "mnemonic": "PUSHREF",
      "since_version": 0,
      "doc": {
        "category": "const_data",
        "description": "Pushes the reference `ref` into the stack.\n_Details:_ Pushes the first reference of `cc.code` into the stack as a _Cell_ (and removes this reference from the current continuation).",
        "gas": "18",
        "fift": "[ref] PUSHREF",
        "fift_examples": [],
        "opcode": "88",
        "stack": "- c"
      },
      "bytecode": {
        "tlb": "#88 c:^Cell",
        "prefix": "88",
        "operands": [
          { "name": "c", "type": "ref", "display_hints": [] }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Cell"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 32,
          "function_name": "exec_push_ref"
        }
      ]
    },
    {
      "mnemonic": "DEC",
      "since_version": 0,
      "doc": {
        "category": "arithm_basic",
        "description": "Equivalent to `-1 ADDCONST`.",
        "gas": "18",
        "fift": "DEC",
        "fift_examples": [],
        "opcode": "A5",
        "stack": "x - x-1"
      },
      "bytecode": { "tlb": "#A5", "prefix": "A5", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 205,
          "function_name": "exec_dec"
        }
      ]
    },
    {
      "mnemonic": "THROW",
      "since_version": 0,
      "doc": {
        "category": "exceptions",
        "description": "For `0 <= n < 2^11`, an encoding of `[n] THROW` for larger values of `n`.",
        "gas": "84",
        "fift": "[n] THROW",
        "fift_examples": [],
        "opcode": "F2C4_n",
        "stack": "- 0 nn"
      },
      "bytecode": {
        "tlb": "#F2C4_ n:uint11",
        "prefix": "F2C4_",
        "operands": [
          {
            "name": "n",
            "type": "uint",
            "size": 11,
            "min_value": 0,
            "max_value": 2047,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": false },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 1130,
          "function_name": "exec_throw_fixed"
        }
      ]
    },
    {
      "mnemonic": "TPUSH",
      "since_version": 0,
      "doc": {
        "category": "tuple",
        "description": "Appends a value `x` to a _Tuple_ `t=(x_1,...,x_n)`, but only if the resulting _Tuple_ `t'=(x_1,...,x_n,x)` is of length at most 255. Otherwise throws a type check exception.",
        "gas": "26+|t'|",
        "fift": "TPUSH\nCOMMA",
        "fift_examples": [],
        "opcode": "6F8C",
        "stack": "t x - t'"
      },
      "bytecode": { "tlb": "#6F8C", "prefix": "6F8C", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": [
                "Tuple"
              ]
            },
            { "type": "simple", "name": "x" }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t2",
              "value_types": [
                "Tuple"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tupleops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tupleops.cpp",
          "line": 296,
          "function_name": "exec_tuple_push"
        }
      ]
    },
    {
      "mnemonic": "REVERSE",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Reverses the order of `s[j+i+1] ... s[j]`.",
        "gas": "26",
        "fift": "[i+2] [j] REVERSE",
        "fift_examples": [],
        "opcode": "5Eij",
        "stack": ""
      },
      "bytecode": {
        "tlb": "#5E i:uint4 j:uint4",
        "prefix": "5E",
        "operands": [
          {
            "name": "i",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": []
          },
          {
            "name": "j",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 362,
          "function_name": "exec_reverse"
        }
      ]
    },
    {
      "mnemonic": "TLEN",
      "since_version": 0,
      "doc": {
        "category": "tuple",
        "description": "Returns the length of a _Tuple_.",
        "gas": "26",
        "fift": "TLEN",
        "fift_examples": [],
        "opcode": "6F88",
        "stack": "t - n"
      },
      "bytecode": { "tlb": "#6F88", "prefix": "6F88", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": [
                "Tuple"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tupleops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tupleops.cpp",
          "line": 265,
          "function_name": "exec_tuple_length"
        }
      ]
    },
    {
      "mnemonic": "SDEMPTY",
      "since_version": 0,
      "doc": {
        "category": "compare_other",
        "description": "Checks whether _Slice_ `s` has no bits of data.",
        "gas": "26",
        "fift": "SDEMPTY",
        "fift_examples": [],
        "opcode": "C701",
        "stack": "s - ?"
      },
      "bytecode": { "tlb": "#C701", "prefix": "C701", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 315,
          "function_name": "reg_un_cs_cmp"
        }
      ]
    },
    {
      "mnemonic": "LDSLICE",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Cuts the next `cc+1` bits of `s` into a separate _Slice_ `s''`.",
        "gas": "26",
        "fift": "[cc+1] LDSLICE",
        "fift_examples": [],
        "opcode": "D6cc",
        "stack": "s - s'' s'"
      },
      "bytecode": {
        "tlb": "#D6 cc:uint8",
        "prefix": "D6",
        "operands": [
          {
            "name": "c",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s3",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1127,
          "function_name": "exec_load_slice"
        }
      ]
    },
    {
      "mnemonic": "TRY",
      "since_version": 0,
      "doc": {
        "category": "exceptions",
        "description": "Sets `c2` to `c'`, first saving the old value of `c2` both into the savelist of `c'` and into the savelist of the current continuation, which is stored into `c.c0` and `c'.c0`. Then runs `c` similarly to `EXECUTE`. If `c` does not throw any exceptions, the original value of `c2` is automatically restored on return from `c`. If an exception occurs, the execution is transferred to `c'`, but the original value of `c2` is restored in the process, so that `c'` can re-throw the exception by `THROWANY` if it cannot handle it by itself.",
        "gas": "26",
        "fift": "TRY",
        "fift_examples": [
          { "fift": "TRY:<{ code1 }>CATCH<{ code2 }>", "description": "Equivalent to `<{ code1 }> CONT` `<{ code2 }> CONT` `TRY`." }
        ],
        "opcode": "F2FF",
        "stack": "c c' - "
      },
      "bytecode": { "tlb": "#F2FF", "prefix": "F2FF", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Continuation"
              ]
            },
            {
              "type": "simple",
              "name": "c2",
              "value_types": [
                "Continuation"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": {
        "branches": [
          {
            "type": "variable",
            "var_name": "c",
            "save": {
              "c0": {
                "type": "cc",
                "save": {
                  "c0": { "type": "register", "index": 0 },
                  "c1": { "type": "register", "index": 1 },
                  "c2": { "type": "register", "index": 2 }
                }
              },
              "c2": {
                "type": "variable",
                "var_name": "c2",
                "save": {
                  "c0": {
                    "type": "cc",
                    "save": {
                      "c0": { "type": "register", "index": 0 },
                      "c1": { "type": "register", "index": 1 },
                      "c2": { "type": "register", "index": 2 }
                    }
                  },
                  "c2": { "type": "register", "index": 2 }
                }
              }
            }
          }
        ],
        "nobranch": false
      },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 1186,
          "function_name": "exec_try"
        }
      ]
    },
    {
      "mnemonic": "THROW_SHORT",
      "since_version": 0,
      "doc": {
        "category": "exceptions",
        "description": "Throws exception `0 <= n <= 63` with parameter zero.\nIn other words, it transfers control to the continuation in `c2`, pushing `0` and `n` into its stack, and discarding the old stack altogether.",
        "gas": "76",
        "fift": "[n] THROW",
        "fift_examples": [],
        "opcode": "F22_n",
        "stack": " - 0 n"
      },
      "bytecode": {
        "tlb": "#F22_ n:uint6",
        "prefix": "F22_",
        "operands": [
          {
            "name": "n",
            "type": "uint",
            "size": 6,
            "min_value": 0,
            "max_value": 63,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": false },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 1130,
          "function_name": "exec_throw_fixed"
        }
      ]
    },
    {
      "mnemonic": "PLDI",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Preloads a signed `cc+1`-bit integer from _Slice_ `s`.",
        "gas": "34",
        "fift": "[cc+1] PLDI",
        "fift_examples": [],
        "opcode": "D70Acc",
        "stack": "s - x"
      },
      "bytecode": {
        "tlb": "#D70A cc:uint8",
        "prefix": "D70A",
        "operands": [
          {
            "name": "c",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1092,
          "function_name": "exec_load_int_fixed2"
        }
      ]
    },
    {
      "mnemonic": "OVER2",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Equivalent to `s3 s2 PUSH2`.",
        "gas": "18",
        "fift": "OVER2\n2OVER",
        "fift_examples": [],
        "opcode": "5D",
        "stack": "a b c d - a b c d a b"
      },
      "bytecode": { "tlb": "#5D", "prefix": "5D", "operands": [] },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 353,
          "function_name": "exec_2over"
        }
      ]
    },
    {
      "mnemonic": "POW2",
      "since_version": 0,
      "doc": {
        "category": "arithm_logical",
        "description": "`0 <= y <= 1023`\nEquivalent to `ONE` `SWAP` `LSHIFT`.",
        "gas": "18",
        "fift": "POW2",
        "fift_examples": [],
        "opcode": "AE",
        "stack": "y - 2^y"
      },
      "bytecode": { "tlb": "#AE", "prefix": "AE", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 758,
          "function_name": "exec_pow2"
        }
      ]
    },
    {
      "mnemonic": "SREMPTY",
      "since_version": 0,
      "doc": {
        "category": "compare_other",
        "description": "Checks whether _Slice_ `s` has no references.",
        "gas": "26",
        "fift": "SREMPTY",
        "fift_examples": [],
        "opcode": "C702",
        "stack": "s - ?"
      },
      "bytecode": { "tlb": "#C702", "prefix": "C702", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 316,
          "function_name": "reg_un_cs_cmp"
        }
      ]
    },
    {
      "mnemonic": "PLDSLICEX",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Returns the first `0 <= l <= 1023` bits of `s` as `s''`.",
        "gas": "26",
        "fift": "PLDSLICEX",
        "fift_examples": [],
        "opcode": "D719",
        "stack": "s l - s''"
      },
      "bytecode": { "tlb": "#D719", "prefix": "D719", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s3",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1092,
          "function_name": "exec_load_int_fixed2"
        }
      ]
    },
    {
      "mnemonic": "INDEXVAR",
      "since_version": 0,
      "doc": {
        "category": "tuple",
        "description": "Similar to `k INDEX`, but with `0 <= k <= 254` taken from the stack.",
        "gas": "26",
        "fift": "INDEXVAR",
        "fift_examples": [],
        "opcode": "6F81",
        "stack": "t k - x"
      },
      "bytecode": { "tlb": "#6F81", "prefix": "6F81", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": [
                "Tuple"
              ]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            { "type": "simple", "name": "x" }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tupleops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tupleops.cpp",
          "line": 112,
          "function_name": "exec_tuple_index_var"
        }
      ]
    },
    {
      "mnemonic": "STZEROES",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Stores `n` binary zeroes into _Builder_ `b`.",
        "gas": "26",
        "fift": "STZEROES",
        "fift_examples": [],
        "opcode": "CF40",
        "stack": "b n - b'"
      },
      "bytecode": { "tlb": "#CF40", "prefix": "CF40", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 752,
          "function_name": "exec_store_same"
        }
      ]
    },
    {
      "mnemonic": "LDUX",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Loads an unsigned `l`-bit integer `x` from (the first `l` bits of) `s`, with `0 <= l <= 256`.",
        "gas": "26",
        "fift": "LDUX",
        "fift_examples": [],
        "opcode": "D701",
        "stack": "s l - x s'"
      },
      "bytecode": { "tlb": "#D701", "prefix": "D701", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1080,
          "function_name": "exec_load_int_var"
        }
      ]
    },
    {
      "mnemonic": "STSLICE",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Stores _Slice_ `s` into _Builder_ `b`.",
        "gas": "18",
        "fift": "STSLICE",
        "fift_examples": [],
        "opcode": "CE",
        "stack": "s b - b'"
      },
      "bytecode": { "tlb": "#CE", "prefix": "CE", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 507,
          "function_name": "exec_store_slice"
        }
      ]
    },
    {
      "mnemonic": "SPLIT",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Splits the first `0 <= l <= 1023` data bits and first `0 <= r <= 4` references from `s` into `s'`, returning the remainder of `s` as `s''`.",
        "gas": "26",
        "fift": "SPLIT",
        "fift_examples": [],
        "opcode": "D736",
        "stack": "s l r - s' s''"
      },
      "bytecode": { "tlb": "#D736", "prefix": "D736", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "s3",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1250,
          "function_name": "exec_split"
        }
      ]
    },
    {
      "mnemonic": "ABS",
      "since_version": 0,
      "doc": {
        "category": "arithm_logical",
        "description": "Computes the absolute value of an integer `x`.",
        "gas": "26",
        "fift": "ABS",
        "fift_examples": [],
        "opcode": "B60B",
        "stack": "x - |x|"
      },
      "bytecode": { "tlb": "#B60B", "prefix": "B60B", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 936,
          "function_name": "exec_abs"
        }
      ]
    },
    {
      "mnemonic": "LDIX",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Loads a signed `l`-bit (`0 <= l <= 257`) integer `x` from _Slice_ `s`, and returns the remainder of `s` as `s'`.",
        "gas": "26",
        "fift": "LDIX",
        "fift_examples": [],
        "opcode": "D700",
        "stack": "s l - x s'"
      },
      "bytecode": { "tlb": "#D700", "prefix": "D700", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1080,
          "function_name": "exec_load_int_var"
        }
      ]
    },
    {
      "mnemonic": "MULDIVC",
      "since_version": 0,
      "doc": {
        "category": "arithm_div",
        "description": "`q'=ceil(x*y/z)`",
        "gas": "26",
        "fift": "MULDIVC",
        "fift_examples": [],
        "opcode": "A986",
        "stack": "x y z - q'"
      },
      "bytecode": { "tlb": "#A986", "prefix": "A986", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 434,
          "function_name": "exec_muldivmod"
        }
      ]
    },
    {
      "mnemonic": "SDPPFXREV",
      "since_version": 0,
      "doc": {
        "category": "compare_other",
        "description": "Checks whether `s'` is a proper prefix of `s`.",
        "gas": "26",
        "fift": "SDPPFXREV",
        "fift_examples": [],
        "opcode": "C70B",
        "stack": "s s' - ?"
      },
      "bytecode": { "tlb": "#C70B", "prefix": "C70B", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 323,
          "function_name": "reg_bin_cs_cmp"
        }
      ]
    },
    {
      "mnemonic": "SDSKIPLAST",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Returns all but the last `0 <= l <= 1023` bits of `s`.",
        "gas": "26",
        "fift": "SDSKIPLAST",
        "fift_examples": [],
        "opcode": "D723",
        "stack": "s l - s'"
      },
      "bytecode": { "tlb": "#D723", "prefix": "D723", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1468,
          "function_name": "exec_slice_op_args"
        }
      ]
    },
    {
      "mnemonic": "SDCUTLAST",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Returns the last `0 <= l <= 1023` bits of `s`.",
        "gas": "26",
        "fift": "SDCUTLAST",
        "fift_examples": [],
        "opcode": "D722",
        "stack": "s l - s'"
      },
      "bytecode": { "tlb": "#D722", "prefix": "D722", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1465,
          "function_name": "exec_slice_op_args"
        }
      ]
    },
    {
      "mnemonic": "DIVMOD",
      "since_version": 0,
      "doc": {
        "category": "arithm_div",
        "description": "",
        "gas": "26",
        "fift": "DIVMOD",
        "fift_examples": [],
        "opcode": "A90C",
        "stack": "x y - q r"
      },
      "bytecode": { "tlb": "#A90C", "prefix": "A90C", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 266,
          "function_name": "exec_divmod"
        }
      ]
    },
    {
      "mnemonic": "SBITREFS",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Returns both the number of data bits and the number of references in `s`.",
        "gas": "26",
        "fift": "SBITREFS",
        "fift_examples": [],
        "opcode": "D74B",
        "stack": "s - l r"
      },
      "bytecode": { "tlb": "#D74B", "prefix": "D74B", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "l",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1308,
          "function_name": "exec_slice_bits_refs"
        }
      ]
    },
    {
      "mnemonic": "LDREFRTOS",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Equivalent to `LDREF` `SWAP` `CTOS`.",
        "gas": "118/43",
        "fift": "LDREFRTOS",
        "fift_examples": [],
        "opcode": "D5",
        "stack": "s - s' s''"
      },
      "bytecode": { "tlb": "#D5", "prefix": "D5", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "s3",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1026,
          "function_name": "exec_load_ref_rev_to_slice"
        }
      ]
    },
    {
      "mnemonic": "SDSUBSTR",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Returns `0 <= l' <= 1023` bits of `s` starting from offset `0 <= l <= 1023`, thus extracting a bit substring out of the data of `s`.",
        "gas": "26",
        "fift": "SDSUBSTR",
        "fift_examples": [],
        "opcode": "D724",
        "stack": "s l l' - s'"
      },
      "bytecode": { "tlb": "#D724", "prefix": "D724", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "l2",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1472,
          "function_name": "exec_slice_op_args2"
        }
      ]
    },
    {
      "mnemonic": "STB",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Appends all data from _Builder_ `b'` to _Builder_ `b`.",
        "gas": "26",
        "fift": "STB",
        "fift_examples": [],
        "opcode": "CF13",
        "stack": "b' b - b''"
      },
      "bytecode": { "tlb": "#CF13", "prefix": "CF13", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b3",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 553,
          "function_name": "exec_store_builder"
        }
      ]
    },
    {
      "mnemonic": "XCTOS",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Transforms an ordinary or exotic cell into a _Slice_, as if it were an ordinary cell. A flag is returned indicating whether `c` is exotic. If that be the case, its type can later be deserialized from the first eight bits of `s`.",
        "gas": "",
        "fift": "XCTOS",
        "fift_examples": [],
        "opcode": "D739",
        "stack": "c - s ?"
      },
      "bytecode": { "tlb": "#D739", "prefix": "D739", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "flag",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 881,
          "function_name": "exec_cell_to_slice_maybe_special"
        }
      ]
    },
    {
      "mnemonic": "XOR",
      "since_version": 0,
      "doc": {
        "category": "arithm_logical",
        "description": "Bitwise xor of two integers.",
        "gas": "18",
        "fift": "XOR",
        "fift_examples": [],
        "opcode": "B2",
        "stack": "x y - x xor y"
      },
      "bytecode": { "tlb": "#B2", "prefix": "B2", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 787,
          "function_name": "exec_xor"
        }
      ]
    },
    {
      "mnemonic": "MULDIVMOD",
      "since_version": 0,
      "doc": {
        "category": "arithm_div",
        "description": "`q=floor(x*y/z)`, `r=x*y-z*q`",
        "gas": "26",
        "fift": "MULDIVMOD",
        "fift_examples": [],
        "opcode": "A98C",
        "stack": "x y z - q r"
      },
      "bytecode": { "tlb": "#A98C", "prefix": "A98C", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 434,
          "function_name": "exec_muldivmod"
        }
      ]
    },
    {
      "mnemonic": "PLDUX",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Preloads an unsigned `l`-bit integer from `s`, for `0 <= l <= 256`.",
        "gas": "26",
        "fift": "PLDUX",
        "fift_examples": [],
        "opcode": "D703",
        "stack": "s l - x"
      },
      "bytecode": { "tlb": "#D703", "prefix": "D703", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1092,
          "function_name": "exec_load_int_fixed2"
        }
      ]
    },
    {
      "mnemonic": "TPOP",
      "since_version": 0,
      "doc": {
        "category": "tuple",
        "description": "Detaches the last element `x=x_n` from a non-empty _Tuple_ `t=(x_1,...,x_n)`, and returns both the resulting _Tuple_ `t'=(x_1,...,x_{n-1})` and the original last element `x`.",
        "gas": "26+|t'|",
        "fift": "TPOP",
        "fift_examples": [],
        "opcode": "6F8D",
        "stack": "t - t' x"
      },
      "bytecode": { "tlb": "#6F8D", "prefix": "6F8D", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": [
                "Tuple"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t2",
              "value_types": [
                "Tuple"
              ]
            },
            { "type": "simple", "name": "x" }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tupleops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tupleops.cpp",
          "line": 308,
          "function_name": "exec_tuple_pop"
        }
      ]
    },
    {
      "mnemonic": "UBITSIZE",
      "since_version": 0,
      "doc": {
        "category": "arithm_logical",
        "description": "Computes smallest `c >= 0` such that `x` fits into a `c`-bit unsigned integer (`0 <= x < 2^c`), or throws a range check exception.",
        "gas": "26",
        "fift": "UBITSIZE",
        "fift_examples": [],
        "opcode": "B603",
        "stack": "x - c"
      },
      "bytecode": { "tlb": "#B603", "prefix": "B603", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 856,
          "function_name": "exec_bitsize"
        }
      ]
    },
    {
      "mnemonic": "SDLEXCMP",
      "since_version": 0,
      "doc": {
        "category": "compare_other",
        "description": "Compares the data of `s` lexicographically with the data of `s'`, returning `-1`, 0, or 1 depending on the result.",
        "gas": "26",
        "fift": "SDLEXCMP",
        "fift_examples": [],
        "opcode": "C704",
        "stack": "s s' - x"
      },
      "bytecode": { "tlb": "#C704", "prefix": "C704", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 318,
          "function_name": "reg_ibin_cs_cmp"
        }
      ]
    },
    {
      "mnemonic": "SETINDEXVAR",
      "since_version": 0,
      "doc": {
        "category": "tuple",
        "description": "Similar to `k SETINDEX`, but with `0 <= k <= 254` taken from the stack.",
        "gas": "26+|t'|",
        "fift": "SETINDEXVAR",
        "fift_examples": [],
        "opcode": "6F85",
        "stack": "t x k - t'"
      },
      "bytecode": { "tlb": "#6F85", "prefix": "6F85", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": [
                "Tuple"
              ]
            },
            { "type": "simple", "name": "x" },
            {
              "type": "simple",
              "name": "k",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t2",
              "value_types": [
                "Tuple"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tupleops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tupleops.cpp",
          "line": 229,
          "function_name": "exec_tuple_set_index_var"
        }
      ]
    },
    {
      "mnemonic": "NOP",
      "since_version": 0,
      "doc": {
        "category": "stack_basic",
        "description": "Does nothing.",
        "gas": "18",
        "fift": "NOP",
        "fift_examples": [],
        "opcode": "00",
        "stack": "-"
      },
      "bytecode": { "tlb": "#00", "prefix": "00", "operands": [] },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 28,
          "function_name": "exec_nop"
        }
      ]
    },
    {
      "mnemonic": "EXPLODEVAR",
      "since_version": 0,
      "doc": {
        "category": "tuple",
        "description": "Similar to `n EXPLODE`, but with `0 <= n <= 255` taken from the stack.",
        "gas": "26+m",
        "fift": "EXPLODEVAR",
        "fift_examples": [],
        "opcode": "6F84",
        "stack": "t n - x_1 ... x_m m"
      },
      "bytecode": { "tlb": "#6F84", "prefix": "6F84", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": [
                "Tuple"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "array",
              "name": "tuple_elements",
              "length_var": "m",
              "array_entry": [
                { "type": "simple", "name": "x" }
              ]
            },
            {
              "type": "simple",
              "name": "m",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tupleops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tupleops.cpp",
          "line": 202,
          "function_name": "exec_explode_tuple_var"
        }
      ]
    },
    {
      "mnemonic": "CDEPTH",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Returns the depth of _Cell_ `c`. If `c` has no references, then `x=0`; otherwise `x` is one plus the maximum of depths of cells referred to from `c`. If `c` is a _Null_ instead of a _Cell_, returns zero.",
        "gas": "26",
        "fift": "CDEPTH",
        "fift_examples": [],
        "opcode": "D765",
        "stack": "c - x"
      },
      "bytecode": { "tlb": "#D765", "prefix": "D765", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1378,
          "function_name": "exec_cell_depth"
        }
      ]
    },
    {
      "mnemonic": "UFITSX",
      "since_version": 0,
      "doc": {
        "category": "arithm_logical",
        "description": "Checks whether `x` is a `c`-bit unsigned integer for `0 <= c <= 1023`.",
        "gas": "26/76",
        "fift": "UFITSX",
        "fift_examples": [],
        "opcode": "B601",
        "stack": "x c - x"
      },
      "bytecode": { "tlb": "#B601", "prefix": "B601", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 843,
          "function_name": "exec_ufits"
        }
      ]
    },
    {
      "mnemonic": "LSHIFT_VAR",
      "since_version": 0,
      "doc": {
        "category": "arithm_logical",
        "description": "`0 <= y <= 1023`",
        "gas": "18",
        "fift": "LSHIFT",
        "fift_examples": [],
        "opcode": "AC",
        "stack": "x y - x*2^y"
      },
      "bytecode": { "tlb": "#AC", "prefix": "AC", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 740,
          "function_name": "exec_lshift"
        }
      ]
    },
    {
      "mnemonic": "RSHIFTR",
      "since_version": 0,
      "doc": {
        "category": "arithm_div",
        "description": "",
        "gas": "34",
        "fift": "[tt+1] RSHIFTR#",
        "fift_examples": [],
        "opcode": "A935tt",
        "stack": "x - round(x/2^(tt+1))"
      },
      "bytecode": {
        "tlb": "#A935 tt:uint8",
        "prefix": "A935",
        "operands": [
          {
            "name": "t",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 740,
          "function_name": "exec_lshift"
        }
      ]
    },
    {
      "mnemonic": "STSLICECONST",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Stores a constant subslice `sss`.\n_Details:_ `sss` consists of `0 <= x <= 3` references and up to `8y+2` data bits, with `0 <= y <= 7`. Completion bit is assumed.\nNote that the assembler can replace `STSLICECONST` with `PUSHSLICE` `STSLICER` if the slice is too big.",
        "gas": "24",
        "fift": "[slice] STSLICECONST",
        "fift_examples": [],
        "opcode": "CFC0_xysss",
        "stack": "b - b'"
      },
      "bytecode": {
        "tlb": "#CFC0_ x:(## 2) y:(## 3) c:(x * ^Cell) sss:((8 * y + 2) * Bit)",
        "prefix": "CFC0_",
        "operands": [
          {
            "name": "s",
            "type": "subslice",
            "bits_length_var_size": 3,
            "refs_length_var_size": 2,
            "bits_padding": 2,
            "refs_add": 0,
            "completion_tag": true,
            "max_bits": 57,
            "min_bits": 0,
            "max_refs": 3,
            "min_refs": 0,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 507,
          "function_name": "exec_store_slice"
        }
      ]
    },
    {
      "mnemonic": "ISNAN",
      "since_version": 0,
      "doc": {
        "category": "compare_int",
        "description": "Checks whether `x` is a `NaN`.",
        "gas": "18",
        "fift": "ISNAN",
        "fift_examples": [],
        "opcode": "C4",
        "stack": "x - x=NaN"
      },
      "bytecode": { "tlb": "#C4", "prefix": "C4", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 1007,
          "function_name": "exec_is_nan"
        }
      ]
    },
    {
      "mnemonic": "RSHIFT_VAR",
      "since_version": 0,
      "doc": {
        "category": "arithm_logical",
        "description": "`0 <= y <= 1023`",
        "gas": "18",
        "fift": "RSHIFT",
        "fift_examples": [],
        "opcode": "AD",
        "stack": "x y - floor(x/2^y)"
      },
      "bytecode": { "tlb": "#AD", "prefix": "AD", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 749,
          "function_name": "exec_rshift"
        }
      ]
    },
    {
      "mnemonic": "PUSHNAN",
      "since_version": 0,
      "doc": {
        "category": "const_int",
        "description": "Pushes a `NaN`.",
        "gas": "26",
        "fift": "PUSHNAN",
        "fift_examples": [],
        "opcode": "83FF",
        "stack": "- NaN"
      },
      "bytecode": { "tlb": "#83FF", "prefix": "83FF", "operands": [] },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            { "type": "const", "value_type": "Integer", "value": null }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 120,
          "function_name": "exec_push_nan"
        }
      ]
    },
    {
      "mnemonic": "SETINDEX",
      "since_version": 0,
      "doc": {
        "category": "tuple",
        "description": "Computes _Tuple_ `t'` that differs from `t` only at position `t'_{k+1}`, which is set to `x`.\n`0 <= k <= 15`\nIf `k >= |t|`, throws a range check exception.",
        "gas": "26+|t|",
        "fift": "[k] SETINDEX",
        "fift_examples": [],
        "opcode": "6F5k",
        "stack": "t x - t'"
      },
      "bytecode": {
        "tlb": "#6F5 k:uint4",
        "prefix": "6F5",
        "operands": [
          {
            "name": "k",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": [
                "Tuple"
              ]
            },
            { "type": "simple", "name": "x" }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t2",
              "value_types": [
                "Tuple"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tupleops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tupleops.cpp",
          "line": 222,
          "function_name": "exec_tuple_set_index"
        }
      ]
    },
    {
      "mnemonic": "QTLEN",
      "since_version": 0,
      "doc": {
        "category": "tuple",
        "description": "Similar to `TLEN`, but returns `-1` if `t` is not a _Tuple_.",
        "gas": "26",
        "fift": "QTLEN",
        "fift_examples": [],
        "opcode": "6F89",
        "stack": "t - n or -1"
      },
      "bytecode": { "tlb": "#6F89", "prefix": "6F89", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": [
                "Tuple"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tupleops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tupleops.cpp",
          "line": 273,
          "function_name": "exec_tuple_length_quiet"
        }
      ]
    },
    {
      "mnemonic": "MULRSHIFTR",
      "since_version": 0,
      "doc": {
        "category": "arithm_div",
        "description": "",
        "gas": "34",
        "fift": "[tt+1] MULRSHIFTR#",
        "fift_examples": [],
        "opcode": "A9B5tt",
        "stack": "x y - round(x*y/2^(tt+1))"
      },
      "bytecode": {
        "tlb": "#A9B5 tt:uint8",
        "prefix": "A9B5",
        "operands": [
          {
            "name": "t",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 740,
          "function_name": "exec_lshift"
        }
      ]
    },
    {
      "mnemonic": "CMP",
      "since_version": 0,
      "doc": {
        "category": "compare_int",
        "description": "Computes the sign of `x-y`:\n`-1` if `x<y`, `0` if `x=y`, `1` if `x>y`.\nNo integer overflow can occur here unless `x` or `y` is a `NaN`.",
        "gas": "18",
        "fift": "CMP",
        "fift_examples": [],
        "opcode": "BF",
        "stack": "x y - sgn(x-y)"
      },
      "bytecode": { "tlb": "#BF", "prefix": "BF", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 975,
          "function_name": "exec_cmp"
        }
      ]
    },
    {
      "mnemonic": "SDCUTFIRST",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Returns the first `0 <= l <= 1023` bits of `s`. It is equivalent to `PLDSLICEX`.",
        "gas": "26",
        "fift": "SDCUTFIRST",
        "fift_examples": [],
        "opcode": "D720",
        "stack": "s l - s'"
      },
      "bytecode": { "tlb": "#D720", "prefix": "D720", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1459,
          "function_name": "exec_slice_op_args"
        }
      ]
    },
    {
      "mnemonic": "SDEPTH",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Returns the depth of _Slice_ `s`. If `s` has no references, then `x=0`; otherwise `x` is one plus the maximum of depths of cells referred to from `s`.",
        "gas": "26",
        "fift": "SDEPTH",
        "fift_examples": [],
        "opcode": "D764",
        "stack": "s - x"
      },
      "bytecode": { "tlb": "#D764", "prefix": "D764", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1386,
          "function_name": "exec_slice_depth"
        }
      ]
    },
    {
      "mnemonic": "STONES",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Stores `n` binary ones into _Builder_ `b`.",
        "gas": "26",
        "fift": "STONES",
        "fift_examples": [],
        "opcode": "CF41",
        "stack": "b n - b'"
      },
      "bytecode": { "tlb": "#CF41", "prefix": "CF41", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 752,
          "function_name": "exec_store_same"
        }
      ]
    },
    {
      "mnemonic": "SCUTLAST",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Returns the last `0 <= l <= 1023` data bits and last `0 <= r <= 4` references of `s`.",
        "gas": "26",
        "fift": "SCUTLAST",
        "fift_examples": [],
        "opcode": "D732",
        "stack": "s l r - s'"
      },
      "bytecode": { "tlb": "#D732", "prefix": "D732", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1488,
          "function_name": "exec_slice_op_args2"
        }
      ]
    },
    {
      "mnemonic": "RSHIFTC",
      "since_version": 0,
      "doc": {
        "category": "arithm_div",
        "description": "",
        "gas": "34",
        "fift": "[tt+1] RSHIFTC#",
        "fift_examples": [],
        "opcode": "A936tt",
        "stack": "x - ceil(x/2^(tt+1))"
      },
      "bytecode": {
        "tlb": "#A936 tt:uint8",
        "prefix": "A936",
        "operands": [
          {
            "name": "t",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 740,
          "function_name": "exec_lshift"
        }
      ]
    },
    {
      "mnemonic": "SDPFXREV",
      "since_version": 0,
      "doc": {
        "category": "compare_other",
        "description": "Checks whether `s'` is a prefix of `s`, equivalent to `SWAP` `SDPFX`.",
        "gas": "26",
        "fift": "SDPFXREV",
        "fift_examples": [],
        "opcode": "C709",
        "stack": "s s' - ?"
      },
      "bytecode": { "tlb": "#C709", "prefix": "C709", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 321,
          "function_name": "reg_bin_cs_cmp"
        }
      ]
    },
    {
      "mnemonic": "QMUL",
      "since_version": 0,
      "doc": {
        "category": "arithm_quiet",
        "description": "",
        "gas": "26",
        "fift": "QMUL",
        "fift_examples": [],
        "opcode": "B7A8",
        "stack": "x y - x*y"
      },
      "bytecode": { "tlb": "#B7A8", "prefix": "B7A8", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 231,
          "function_name": "exec_mul"
        }
      ]
    },
    {
      "mnemonic": "QMULDIVMOD",
      "since_version": 0,
      "doc": {
        "category": "arithm_quiet",
        "description": "",
        "gas": "34",
        "fift": "QMULDIVMOD",
        "fift_examples": [],
        "opcode": "B7A98C",
        "stack": "x y z - q r"
      },
      "bytecode": { "tlb": "#B7A98C", "prefix": "B7A98C", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 434,
          "function_name": "exec_muldivmod"
        }
      ]
    },
    {
      "mnemonic": "LDULE4",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Loads a little-endian unsigned 32-bit integer.",
        "gas": "26",
        "fift": "LDULE4",
        "fift_examples": [],
        "opcode": "D751",
        "stack": "s - x s'"
      },
      "bytecode": { "tlb": "#D751", "prefix": "D751", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 971,
          "function_name": "exec_load_int_fixed"
        }
      ]
    },
    {
      "mnemonic": "SDCNTTRAIL1",
      "since_version": 0,
      "doc": {
        "category": "compare_other",
        "description": "Returns the number of trailing ones in `s`.",
        "gas": "26",
        "fift": "SDCNTTRAIL1",
        "fift_examples": [],
        "opcode": "C713",
        "stack": "s - n"
      },
      "bytecode": { "tlb": "#C713", "prefix": "C713", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 331,
          "function_name": "reg_iun_cs_cmp"
        }
      ]
    },
    {
      "mnemonic": "STBREF",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Equivalent to `SWAP` `STBREFR`.",
        "gas": "526",
        "fift": "STBREF",
        "fift_examples": [],
        "opcode": "CF11",
        "stack": "b' b - b''"
      },
      "bytecode": { "tlb": "#CF11", "prefix": "CF11", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "child",
              "value_types": [
                "Builder"
              ]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 461,
          "function_name": "exec_store_builder_as_ref"
        }
      ]
    },
    {
      "mnemonic": "ENDXC",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "If `x!=0`, creates a _special_ or _exotic_ cell from _Builder_ `b`.\nThe type of the exotic cell must be stored in the first 8 bits of `b`.\nIf `x=0`, it is equivalent to `ENDC`. Otherwise some validity checks on the data and references of `b` are performed before creating the exotic cell.",
        "gas": "526",
        "fift": "ENDXC",
        "fift_examples": [],
        "opcode": "CF23",
        "stack": "b x - c"
      },
      "bytecode": { "tlb": "#CF23", "prefix": "CF23", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 349,
          "function_name": "exec_builder_to_special_cell"
        }
      ]
    },
    {
      "mnemonic": "LSHIFTDIVC",
      "since_version": 0,
      "doc": {
        "category": "arithm_div",
        "description": "",
        "gas": "26",
        "fift": "[tt+1] LSHIFT#DIVC",
        "fift_examples": [],
        "opcode": "A9D6tt",
        "stack": "x y - ceil(2^(tt+1)*x/y)"
      },
      "bytecode": {
        "tlb": "#A9D6 tt:uint8",
        "prefix": "A9D6",
        "operands": [
          {
            "name": "t",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 740,
          "function_name": "exec_lshift"
        }
      ]
    },
    {
      "mnemonic": "PLDUZ",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Preloads the first `32(c+1)` bits of _Slice_ `s` into an unsigned integer `x`, for `0 <= c <= 7`. If `s` is shorter than necessary, missing bits are assumed to be zero. This operation is intended to be used along with `IFBITJMP` and similar instructions.",
        "gas": "26",
        "fift": "[32(c+1)] PLDUZ",
        "fift_examples": [],
        "opcode": "D714_c",
        "stack": "s - s x"
      },
      "bytecode": {
        "tlb": "#D714_ c:uint3",
        "prefix": "D714_",
        "operands": [
          {
            "name": "c",
            "type": "uint",
            "size": 3,
            "min_value": 0,
            "max_value": 7,
            "display_hints": [
              { "type": "plduz" }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1092,
          "function_name": "exec_load_int_fixed2"
        }
      ]
    },
    {
      "mnemonic": "THROWARG",
      "since_version": 0,
      "doc": {
        "category": "exceptions",
        "description": "Throws exception `0 <= n <  2^11` with parameter `x`, by copying `x` and `n` into the stack of `c2` and transferring control to `c2`.",
        "gas": "84",
        "fift": "[n] THROWARG",
        "fift_examples": [],
        "opcode": "F2CC_n",
        "stack": "x - x nn"
      },
      "bytecode": {
        "tlb": "#F2CC_ n:uint11",
        "prefix": "F2CC_",
        "operands": [
          {
            "name": "n",
            "type": "uint",
            "size": 11,
            "min_value": 0,
            "max_value": 2047,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            { "type": "simple", "name": "x" }
          ],
          "registers": []
        },
        "outputs": { "stack": [], "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": false },
      "implementation": [
        {
          "file": "contops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/contops.cpp",
          "line": 1140,
          "function_name": "exec_throw_arg_fixed"
        }
      ]
    },
    {
      "mnemonic": "PUSHSLICE_REFS",
      "since_version": 0,
      "doc": {
        "category": "const_data",
        "description": "Pushes the slice `slice` into the stack.\n_Details:_ Pushes the (prefix) subslice of `cc.code` consisting of its first `1 <= r+1 <= 4` references and up to first `8xx+1` bits of data, with `0 <= xx <= 31`.\nA completion tag is also assumed.",
        "gas": "25",
        "fift": "[slice] PUSHSLICE\n[slice] SLICE",
        "fift_examples": [],
        "opcode": "8Crxxssss",
        "stack": "- s"
      },
      "bytecode": {
        "tlb": "#8C r:(## 2) xx:(## 5) c:((r + 1) * ^Cell) ssss:((8 * xx + 1) * Bit)",
        "prefix": "8C",
        "operands": [
          {
            "name": "slice",
            "type": "subslice",
            "bits_length_var_size": 5,
            "refs_length_var_size": 2,
            "bits_padding": 1,
            "refs_add": 1,
            "completion_tag": true,
            "max_bits": 248,
            "min_bits": 0,
            "max_refs": 4,
            "min_refs": 1,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 129,
          "function_name": "exec_push_slice_r"
        }
      ]
    },
    {
      "mnemonic": "PLDSLICE",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Returns the first `0 < cc+1 <= 256` bits of `s` as `s''`.",
        "gas": "34",
        "fift": "[cc+1] PLDSLICE",
        "fift_examples": [],
        "opcode": "D71Dcc",
        "stack": "s - s''"
      },
      "bytecode": {
        "tlb": "#D71D cc:uint8",
        "prefix": "D71D",
        "operands": [
          {
            "name": "c",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s3",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1092,
          "function_name": "exec_load_int_fixed2"
        }
      ]
    },
    {
      "mnemonic": "LSHIFTDIVR",
      "since_version": 0,
      "doc": {
        "category": "arithm_div",
        "description": "",
        "gas": "34",
        "fift": "[tt+1] LSHIFT#DIVR",
        "fift_examples": [],
        "opcode": "A9D5tt",
        "stack": "x y - round(2^(tt+1)*x/y)"
      },
      "bytecode": {
        "tlb": "#A9D5 tt:uint8",
        "prefix": "A9D5",
        "operands": [
          {
            "name": "t",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 740,
          "function_name": "exec_lshift"
        }
      ]
    },
    {
      "mnemonic": "MULRSHIFTRMOD",
      "since_version": 0,
      "doc": {
        "category": "arithm_div",
        "description": "",
        "gas": "34",
        "fift": "MULRSHIFTR#MOD",
        "fift_examples": [],
        "opcode": "A9BD",
        "stack": "x y - q=round(x*y/2^(tt+1)) r=xy-q*2^(tt+1)"
      },
      "bytecode": {
        "tlb": "#A9BD",
        "prefix": "A9BD",
        "operands": [
          {
            "name": "t",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 497,
          "function_name": "exec_mulshrmod"
        }
      ]
    },
    {
      "mnemonic": "LSHIFTDIVMODR_VAR",
      "since_version": 0,
      "doc": {
        "category": "arithm_div",
        "description": "",
        "gas": "26",
        "fift": "LSHIFTDIVMODR",
        "fift_examples": [],
        "opcode": "A9CD",
        "stack": "x y z - q=round(2^z*x/y) r=2^z*x-q*y"
      },
      "bytecode": { "tlb": "#A9CD", "prefix": "A9CD", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 595,
          "function_name": "exec_shldivmod"
        }
      ]
    },
    {
      "mnemonic": "RSHIFTR_VAR",
      "since_version": 0,
      "doc": {
        "category": "arithm_div",
        "description": "",
        "gas": "26",
        "fift": "RSHIFTR",
        "fift_examples": [],
        "opcode": "A925",
        "stack": "x y - round(x/2^y)"
      },
      "bytecode": { "tlb": "#A925", "prefix": "A925", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 740,
          "function_name": "exec_lshift"
        }
      ]
    },
    {
      "mnemonic": "UFITS",
      "since_version": 0,
      "doc": {
        "category": "arithm_logical",
        "description": "Checks whether `x` is a `cc+1`-bit unsigned integer for `0 <= cc <= 255` (i.e., whether `0 <= x < 2^(cc+1)`).",
        "gas": "26/76",
        "fift": "[cc+1] UFITS",
        "fift_examples": [],
        "opcode": "B5cc",
        "stack": "x - x"
      },
      "bytecode": {
        "tlb": "#B5 cc:uint8",
        "prefix": "B5",
        "operands": [
          {
            "name": "c",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 843,
          "function_name": "exec_ufits"
        }
      ]
    },
    {
      "mnemonic": "SGN",
      "since_version": 0,
      "doc": {
        "category": "compare_int",
        "description": "Computes the sign of an integer `x`:\n`-1` if `x<0`, `0` if `x=0`, `1` if `x>0`.",
        "gas": "18",
        "fift": "SGN",
        "fift_examples": [],
        "opcode": "B8",
        "stack": "x - sgn(x)"
      },
      "bytecode": { "tlb": "#B8", "prefix": "B8", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 961,
          "function_name": "exec_sgn"
        }
      ]
    },
    {
      "mnemonic": "STUR",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Equivalent to `SWAP` `[cc+1] STU`.",
        "gas": "34",
        "fift": "[cc+1] STUR",
        "fift_examples": [],
        "opcode": "CF0Bcc",
        "stack": "b x - b'"
      },
      "bytecode": {
        "tlb": "#CF0B cc:uint8",
        "prefix": "CF0B",
        "operands": [
          {
            "name": "c",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 407,
          "function_name": "exec_store_int"
        }
      ]
    },
    {
      "mnemonic": "SDFIRST",
      "since_version": 0,
      "doc": {
        "category": "compare_other",
        "description": "Checks whether the first bit of _Slice_ `s` is a one.",
        "gas": "26",
        "fift": "SDFIRST",
        "fift_examples": [],
        "opcode": "C703",
        "stack": "s - ?"
      },
      "bytecode": { "tlb": "#C703", "prefix": "C703", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 317,
          "function_name": "reg_un_cs_cmp"
        }
      ]
    },
    {
      "mnemonic": "BCHKBITSQ_VAR",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Checks whether `x` bits can be stored into `b`, `0 <= x <= 1023`.",
        "gas": "26",
        "fift": "BCHKBITSQ",
        "fift_examples": [],
        "opcode": "CF3D",
        "stack": "b x - ?"
      },
      "bytecode": { "tlb": "#CF3D", "prefix": "CF3D", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 723,
          "function_name": "exec_builder_chk_bits"
        }
      ]
    },
    {
      "mnemonic": "STULE4",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Stores a little-endian unsigned 32-bit integer.",
        "gas": "26",
        "fift": "STULE4",
        "fift_examples": [],
        "opcode": "CF29",
        "stack": "x b - b'"
      },
      "bytecode": { "tlb": "#CF29", "prefix": "CF29", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 407,
          "function_name": "exec_store_int"
        }
      ]
    },
    {
      "mnemonic": "LDUXQ",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Quiet version of `LDUX`.",
        "gas": "26",
        "fift": "LDUXQ",
        "fift_examples": [],
        "opcode": "D705",
        "stack": "s l - x s' -1 or s 0"
      },
      "bytecode": { "tlb": "#D705", "prefix": "D705", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "s",
                      "value_types": [
                        "Slice"
                      ]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": [
                        "Integer"
                      ]
                    },
                    {
                      "type": "simple",
                      "name": "s2",
                      "value_types": [
                        "Slice"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 1080,
          "function_name": "exec_load_int_var"
        }
      ]
    },
    {
      "mnemonic": "STIR",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Equivalent to `SWAP` `[cc+1] STI`.",
        "gas": "34",
        "fift": "[cc+1] STIR",
        "fift_examples": [],
        "opcode": "CF0Acc",
        "stack": "b x - b'"
      },
      "bytecode": {
        "tlb": "#CF0A cc:uint8",
        "prefix": "CF0A",
        "operands": [
          {
            "name": "c",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 407,
          "function_name": "exec_store_int"
        }
      ]
    },
    {
      "mnemonic": "SDCNTLEAD0",
      "since_version": 0,
      "doc": {
        "category": "compare_other",
        "description": "Returns the number of leading zeroes in `s`.",
        "gas": "26",
        "fift": "SDCNTLEAD0",
        "fift_examples": [],
        "opcode": "C710",
        "stack": "s - n"
      },
      "bytecode": { "tlb": "#C710", "prefix": "C710", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": [
                "Slice"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 328,
          "function_name": "reg_iun_cs_cmp"
        }
      ]
    },
    {
      "mnemonic": "PUSHNEGPOW2",
      "since_version": 0,
      "doc": {
        "category": "const_int",
        "description": "Pushes `-2^(xx+1)` for `0 <= xx <= 255`.",
        "gas": "26",
        "fift": "[xx+1] PUSHNEGPOW2",
        "fift_examples": [],
        "opcode": "85xx",
        "stack": "- -2^(xx+1)"
      },
      "bytecode": {
        "tlb": "#85 xx:uint8",
        "prefix": "85",
        "operands": [
          {
            "name": "x",
            "type": "uint",
            "size": 8,
            "min_value": 0,
            "max_value": 255,
            "display_hints": [
              { "type": "add", "value": 1 }
            ]
          }
        ]
      },
      "value_flow": {
        "inputs": { "stack": [], "registers": [] },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": [
                "Integer"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "arithops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/arithops.cpp",
          "line": 139,
          "function_name": "exec_push_negpow2"
        }
      ]
    },
    {
      "mnemonic": "STREFR",
      "since_version": 0,
      "doc": {
        "category": "cell_build",
        "description": "Equivalent to `SWAP` `STREF`.",
        "gas": "26",
        "fift": "STREFR",
        "fift_examples": [],
        "opcode": "CF14",
        "stack": "b c - b'"
      },
      "bytecode": { "tlb": "#CF14", "prefix": "CF14", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": [
                "Builder"
              ]
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": [
                "Builder"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 438,
          "function_name": "exec_store_ref_rev"
        }
      ]
    },
    {
      "mnemonic": "BLKSWX",
      "since_version": 0,
      "doc": {
        "category": "stack_complex",
        "description": "Pops integers `i`,`j` from the stack, then performs `[i] [j] BLKSWAP`.",
        "gas": "18",
        "fift": "BLKSWX",
        "fift_examples": [],
        "opcode": "63",
        "stack": ""
      },
      "bytecode": { "tlb": "#63", "prefix": "63", "operands": [] },
      "value_flow": {
        "inputs": { "registers": [] },
        "outputs": { "registers": [] }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "stackops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/stackops.cpp",
          "line": 436,
          "function_name": "exec_blkswap_x"
        }
      ]
    },
    {
      "mnemonic": "INDEXQ",
      "since_version": 0,
      "doc": {
        "category": "tuple",
        "description": "Returns the `k`-th element of a _Tuple_ `t`, where `0 <= k <= 15`. In other words, returns `x_{k+1}` if `t=(x_1,...,x_n)`. If `k>=n`, or if `t` is _Null_, returns a _Null_ instead of `x`.",
        "gas": "26",
        "fift": "[k] INDEXQ",
        "fift_examples": [],
        "opcode": "6F6k",
        "stack": "t - x"
      },
      "bytecode": {
        "tlb": "#6F6 k:uint4",
        "prefix": "6F6",
        "operands": [
          {
            "name": "k",
            "type": "uint",
            "size": 4,
            "min_value": 0,
            "max_value": 15,
            "display_hints": []
          }
        ]
      },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": [
                "Tuple",
                "Null"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            { "type": "simple", "name": "x" }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "tupleops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/tupleops.cpp",
          "line": 124,
          "function_name": "exec_tuple_quiet_index"
        }
      ]
    },
    {
      "mnemonic": "XLOAD",
      "since_version": 0,
      "doc": {
        "category": "cell_parse",
        "description": "Loads an exotic cell `c` and returns an ordinary cell `c'`. If `c` is already ordinary, does nothing. If `c` cannot be loaded, throws an exception.",
        "gas": "",
        "fift": "XLOAD",
        "fift_examples": [],
        "opcode": "D73A",
        "stack": "c - c'"
      },
      "bytecode": { "tlb": "#D73A", "prefix": "D73A", "operands": [] },
      "value_flow": {
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": [
                "Cell"
              ]
            }
          ],
          "registers": []
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c2",
              "value_types": [
                "Cell"
              ]
            }
          ],
          "registers": []
        }
      },
      "control_flow": { "branches": [], "nobranch": true },
      "implementation": [
        {
          "file": "cellops.cpp",
          "path": "https://raw.githubusercontent.com/ton-blockchain/ton/cee4c674ea999fecc072968677a34a7545ac9c4d/crypto/vm/cellops.cpp",
          "line": 891,
          "function_name": "exec_load_special_cell"
        }
      ]
    }
  ],
  "aliases": []
}
